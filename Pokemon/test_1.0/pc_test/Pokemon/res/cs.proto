//cleint <---> scene
package cs;

message User {
  required uint32 id = 1;
  required string name = 2;
  required uint32 level = 3;
  required uint32 vit = 4; //体力
  required uint32 spirit = 5; //精力
  required uint32 refresh_vit_time = 6;
  required uint32 refresh_spirit_time = 7;
  required uint32 exp = 8;
  required uint32 money = 9;
  required uint32 gold = 10;
  required uint32 prestige = 11; //声望
  optional uint32 skill_point = 12;//技能点
  required uint32 medal = 13; //奖章
  required uint32 tower_score = 14; //爬塔积分
  required uint32 fight_value = 15; //战斗力
  required uint32 battle_token = 16; //出征令
  required uint32 battle_token_time = 17; //出征令恢复时间
  optional uint32 essence = 18; //精魄
  required uint32 forbid_battle_time = 19;//免战时间戳
  optional uint32 guide_id = 20;
  optional uint32 corp_point = 21;//军团贡献
  optional uint32 wheel_score = 22;//转盘积分
  optional uint32 god_soul = 23; //神魂
  optional uint32 contest_point = 24;//比武点
  optional uint32 title_id = 25; //称号ID
  repeated TitleInfo title_list = 26; //称号列表
  optional uint32 spread_sum_score = 27; //推广积分
  optional uint32 coupon = 28; //团购券
  optional uint32 fid = 29;	// 头像框ID
  optional uint32 fight_score = 30;	// 征战积分
  optional uint32 cloth_id = 31;
  optional uint32 cloth_time = 32;
  optional bool	  cloth_open = 33;
  optional uint32 ksoul_point = 34;//灵玉
  optional uint32 cnt = 35;//改名次数
  optional uint32 ksoul_summon_score = 36;//奇遇值
  optional uint32 ksoul_fight_base = 37;//底座
  optional uint32 order_num = 38; //已充值订单数量
}

message Knight {
  required uint32 id = 1;
  required uint32 base_id = 2;
  required uint32 level = 3;
  required uint32 exp = 4;
  required uint32 time = 5;
  required uint32 user_id = 6;
  required KnightTraining training = 7;//历练
  required uint32 halo_level = 8;//光环等级
  required uint32 halo_exp = 9;//光环成长值
  required uint32 halo_ts = 10;//光环成长值有效时间戳
  repeated uint32 association = 11;//人物羁绊
  repeated uint32 passive_skill = 12;//被动技能
  required uint32 awaken_level = 13;//觉醒等级
  repeated uint32 awaken_items = 14;//装备觉醒道具
  required uint32 pulse_level = 15; // 脉等级
  optional uint32 frag_consume = 16; // 升神脉或神阶消耗的碎片数
}

message KnightTraining {
  required uint32 hp = 1;//生命历练值
  required int32 hp_tmp = 2;//生命历练临时值
  required uint32 at = 3;//攻击历练值
  required int32 at_tmp = 4;//攻击历练临时值
  required uint32 pd = 5;//物防历练值
  required int32 pd_tmp = 6;//物防历练临时值
  required uint32 md = 7;//法防历练值
  required int32 md_tmp = 8;//法防历练临时值
}

message Equipment {
  required uint32 id = 1;
  required uint32 base_id = 2;
  required uint32 time = 3;
  required uint32 user_id = 4;
  required uint32 level = 5;
  required uint32 refining_level = 6;
  required uint32 refining_exp = 7;
  required uint32 money = 8;
  optional uint32 star = 9;
  optional uint32 star_exp = 10;
  optional uint32 luck_value = 11;
}

message Dress {
  required uint32 id = 1;
  required uint32 base_id = 2;
  required uint32 level = 3;
}

message Pet {
  required uint32 id = 1;
  required uint32 base_id = 2;
  required uint32 level = 3;
  required uint32 exp = 4;
  required uint32 addition_exp = 5;
  required uint32 addition_lvl = 6;
  required uint32 fight_value = 7;
}

message Treasure {
  required uint32 id = 1;
  required uint32 base_id = 2;
  required uint32 time = 3;
  required uint32 user_id = 4;
  required uint32 level = 5;
  required uint32 exp = 6;
  required uint32 refining_level = 7;
}

message Item {
  required uint32 id = 1;
  required uint32 num = 2;
}

message AwakenItem {
  required uint32 id = 1;
  required uint32 num = 2;
}

message Fragment {
  required uint32 id = 1;
  required uint32 num = 2;
}

message TreasureFragment {
  required uint32 id = 1;
  required uint32 num = 2;
}

message ArenaBattleUser {
  required uint32 id = 1;
  required string name = 2;
  required uint32 level = 3;
  required uint32 fight_value = 4;
  repeated Knight knights = 5;
  repeated Equipment equipments = 6;
  repeated Treasure treasures = 7;
  repeated FightEquipment fight_equipments = 8;
  repeated FightTreasure fight_treasures = 9;
  repeated Dress dresses = 10;
  optional uint32 dress_slot = 11;
  optional Pet fpet = 12; //出战宠物信息
  repeated bool has_ppet = 13; // 是否有宠物护佑
  repeated Pet ppet = 14; // 宠物护佑
  optional uint32 clid = 15;
  optional uint32 cltm = 16;
  optional bool   clop = 17;
}

message TitleInfo {
  required uint32 id = 1;
  required uint32 time = 2;
}

message UserRice {
  required uint32 rice_rank = 1; //粮草排名
  required uint32 init_rice = 2; //可抢夺粮草
  required uint32 growth_rice = 3; //不可夺粮草
  required uint32 rice_refresh_time = 4; //粮草自增刷新时间
  repeated RiceRival rivals = 5; //对手列表
  required uint32 rival_flush_time = 6; //对手匹配时间
  required uint32 revenge_token = 7; //复仇令数量
  required uint32 buy_revtoken_times = 8; //购买复仇令次数
  required uint32 rob_token = 9; //抢粮令数量
  required uint32 rob_token_refresh_time = 10; //抢粮令刷新时间戳
  required uint32 last_rob_time = 11; //上次抢粮时间戳
  required uint32 buy_robtoken_times = 12; //抢粮令购买次数
  //required uint32 achievement_id = 13; //已完成成就
  repeated uint32 achievement_list = 13;
  required uint32 rank_award = 14; //排行榜奖励领取时间戳(0:未领取/大于0:已领取)
}

message RiceEnemy {
  required uint32 id = 1;
  required uint32 user_id = 2; //仇人uid
  required uint32 rob_result = 3; //抢夺结果 0:失败/1:成功
  required uint32 rob_rice = 4; //抢夺粮草
  required uint32 revenge = 5; //复仇状态 0:未复仇/1:已复仇/2:不能复仇
  required uint32 time = 6;
  required string name = 7;
  required uint32 fight_value = 8;
  required uint32 init_rice = 9;
  required uint32 base_id = 10;
  required uint32 dress_base = 11;
  required uint32 level = 12;
  optional uint32 clid = 13;
  optional uint32 cltm = 14;
  optional bool   clop = 15;
}

message RiceRival {
  required uint32 user_id = 1;
  required string name = 2;
  required uint32 fight_value = 3; //战力
  required uint32 init_rice = 4; //可夺粮草
  required uint32 base_id = 5;
  required uint32 growth_rice = 6; //固定粮草
  required uint32 corp_id = 7;
}

message RiceRankUser {
  required uint32 user_id = 1;
  required uint32 rice_rank = 2;
  required string name = 3;
  required uint32 rice = 4;
  required uint32 fight_value = 5;
  required uint32 level = 6;
  required uint32 base_id = 7;
  required uint32 dress_base = 8;
  optional uint32 clid = 9;
  optional uint32 cltm = 10;
  optional bool	  clop = 11;
}

enum RET {
  RET_ERROR = 0;
  RET_OK = 1;
  RET_SERVER_MAINTAIN = 2; //服务器维护
  RET_USER_NOT_EXIST = 3; //玩家不存在
  RET_LOGIN_REPEAT = 4; //重复登陆
  RET_USER_NAME_REPEAT = 5; //创建角色时,玩家名字重复
  RET_CHAT_OUT_OF_LENGTH = 6; // 聊天 - 话太多
  RET_CHAT_CHAN_INEXISTENCE = 7; // 聊天 - 频道不存在
  RET_ITEM_BAG_FULL = 8; //物品背包满
  RET_FRIEND_FULL_1 = 9; // 自己好友已满
  RET_FRIEND_FULL_2 = 10; // 对方好友已满
  RET_STAGEDUNGEON_OVERLIMIT = 11;//副本超过挑战次数
  RET_NOT_ENOUGH_VIT = 12;//体力不足
  RET_STAGEBOX_REWARDED = 13;//副本类宝箱奖励已经领取
  RET_FASTEXECUTE_LOCK = 14;//秒杀CD中
  RET_CHAPTERACHVRWD_ALREAD_FINISHED = 15;//章节星星奖励已经领取
  RET_NOT_ENOUGH_STAR = 16;//章节星星总数不够
  RET_CHAPTERBOX_REWARDED = 17;//章节宝箱奖励已经领取
  RET_NOT_ENOUGH_CHAPTERBOX_STAR = 18;//章节宝箱星星数不够
  RET_NOT_ENOUGH_GOLD = 19;///////////////////////元宝不足
  RET_NOT_ENOUGH_MONEY = 20;/////////////////////银两数量不足
  RET_KNIGHT_BAG_FULL = 21; //卡牌背包满
  RET_EQUIP_BAG_FULL = 22; //装备背包满
  RET_DUNGEON_NOT_FINISHED = 23;//副本未通过
  RET_IS_NOT_UP_TO_LEVEL = 24;//等级不够
  RET_NOT_ENOUGH_SPIRIT = 25;//精力不够
  RET_VIP_SHOP_UP_LIMIT = 26; //购买到达上限
  RET_NOT_ENOUGH_PRESTIGE = 27;//声望不够
  RET_KNIGHT_NOT_EXIST = 28;//武将不存在
  RET_CANNOT_UPGRADE_MAINROLE = 29;//主将不可强化
  RET_KNIGHT_LEVEL_EXCEED_MAINROLE = 30;//强化武将等级超过主将
  RET_MAINROLE_CANNOT_BE_UPGRADE = 31;//主将不可用作强化材料
  RET_BE_UPGRADE_KNIGHT_NOT_EXIST = 32;//强化材料武将不存在
  RET_BE_UPGRADE_KNIGHT_REPEAT = 33;//强化材料武将重复
  RET_ONTEAM_KNIGHT_CANNOT_BE_UPGRADE = 34;//出阵武将不可作为强化材料
  RET_KNIGHT_ADVANCED_LEVEL_EXCEED_LIMIT = 35;//武将升阶等级已经达到最大
  RET_KNIGHT_ADVANCED_NOT_ENOUGH_NUM = 36;//武将升阶需求卡牌数量不足
  RET_ADVANCED_COST_KNIGHT_ERR = 37;//武将升阶材料卡牌id不对
  RET_ONTEAM_KNIGHT_CANNOT_BE_ADVANCED = 38;//出阵武将不可当作升阶材料
  RET_ITEM_NUM_NOT_ENOUGH = 39;//道具数量不足
  RET_FRONT_SKILL_NOTLEARNED = 40;//前置技能未学习
  RET_SKILL_REACH_MAXLEVEL = 41;//技能达到满级
  RET_NOT_ENOUGH_SKILLPOINT = 42;//技能点不足
  RET_SKILL_NOT_FOUND = 43;//技能未找到
  RET_NOT_ENOUGH_PEER_SKILL = 44;//同类型技能不够导致无法洗技能
  RET_ILLEAGAL_SKILL_SLOT = 45;//技能槽位错误
  RET_KNIGHT_TRAINING_VALUE_EXCEED_LIMIT = 46;//武将历练值超过限制
  RET_ILLEGAL_RESET_SLOT = 47;//洗技能所洗槽位不为空
  RET_STORYDUNGEON_OVERLIMIT = 48;//剧情副本次数超过限制
  RET_SGZAWARD_ALREAD_FINISHED = 49;//三国志奖励已经领取
  RET_EQIUP_NOT_EXIST = 50; //装备不存在
  RET_EQUIP_LEVEL_EXCEED_LIMIT = 51;//装备强化等级超过限制
  RET_EQUIP_REFINING_LEVEL_EXCEED_LIMIT = 52;//装备精炼等级超过限制
  RET_ITEM_TYPE_ERROR = 53;//道具类型不对
  RET_KNIGHT_HALO_LEVEL_EXCEED_LIMIT = 54;//武将光环等级已经达到最大
  RET_KNIGHT_HALO_ADVANCE_LEVEL_NOT_REACH = 55;//武将光环等级不够
  RET_MYSTICAL_SHOP_UP_LIMIT = 56; //神秘商店购买到达上限
  RET_NOT_ENOUGH_ESSENCE = 57;  //精魄数量不足
  RET_REBEL_NOT_VAILD = 58; //叛军无效
  RET_NOT_ENOUGH_BATTLE_TOKEN = 59; //没有足够的出征令
  RET_NO_FIND_REBEL_EXPLOIT_AWARD = 60; //没找到叛军奖励ID
  RET_TREASURE_BAG_FULL = 61;  //宝物背包已满
  RET_KNIGHT_CANNOT_BE_ADVANCED = 62;//武将不能被升阶
  RET_TREASURE_NOT_EXIST = 63; //宝物不存在
  RET_BE_UPGRADE_TREASURE_REPEAT = 64;//强化材料宝物重复
  RET_TREASURE_REFINING_NOT_ENOUGH_NUM = 65;//精炼材料宝物数据不足
  RET_TREASURE_FRAGMENT_NOT_ENOUGH = 66;//宝物碎片数量不足
  RET_REBEL_NOT_PUBLIC = 67; //叛军没公开
  RET_REBEL_NOT_FRIEND = 68; //不是自己好友的叛军
  RET_TREASURE_IN_FIGHT_POSTION = 69;//宝物出阵中
  RET_TREASURE_CANNOT_STRENGTH = 70;//该宝物不能被强化或精炼
  RET_NOT_ENOUGH_MEDAL = 71;//没有足够的勋章
  RET_NOT_ENOUGH_TOWERSCORE = 72;// 没有足够试练塔积分
  RET_ARENA_RANK_LOCK = 73;//竞技场排名已更新
  RET_EQUIP_NOT_EXIST = 74;//装备不在
  RET_NOT_SKILL_NOTENOUGH_ITEM = 75;//装备学习所需道具不足
  RET_ILLEGAL_SKILL_LEVEL = 76;//重置技能 技能等级非法
  RET_USER_DATA_LOCK = 77;//玩家数据更新中
  RET_TREASURE_FRAGMENT_ROBBED = 78;//宝物碎片已被抢夺
  RET_USER_OFFLINE = 79;// 玩家已下线
  RET_NOT_FRIEND = 80;// 对方不是你的好友
  RET_SCORE_SHOP_UP_LIMIT = 81; //积分商城购买到达上限
  RET_SCORE_SHOP_NO_ARENA_LIMIT = 82; //积分商城未达到竞技场排名需求
  RET_SCORE_SHOP_NO_TOWER_LIMIT = 83; //积分商城未达到闯关层数需求
  RET_VIP_DUNGEON_NOT_OPEN = 84; // VIP副本未开启
  RET_VIP_DUNGEON_MAX_COUNT = 85; // VIP副本次数用完
  RET_VIP_LEVEL_NOT_ENOUGH = 86; // VIP等级不够
  RET_CHAT_HIGH_FREQUENCY = 87; // 聊天太频繁
  RET_HUODONG_OVER = 88; // 活动结束
  RET_MONTHCARD_ALREADY_USED = 89; // 月卡已经使用过了
  RET_WORSHIP_CD = 90; // 祭拜关公cd
  RET_DAILYMISSION_PROGRESS_ERROR = 91;//每日任务进度不足
  RET_DAILIYMISSION_ALREAD_FINISH = 92;//每日任务奖励已经领取
  RET_DAILIYMISSION_BOX_ALREAD_FINISH = 93;//每日任务宝箱奖励已经领取
  RET_DAILIYMISSION_BOX_NOT_ENOUGH_POINT = 94;//每日任务宝箱奖励点数不够
  RET_RESET_COUNT_MAX = 95;//重置次数达到上限
  RET_CHAT_FORBID = 96;  // 被禁言
  RET_LOGIN_BAN_USER = 97;//被封号了
  RET_KNIGHT_LEVEL_NOT_REACH = 98;//武将等级不够
  RET_LOGIN_TOKEN_TIME_OUT = 99;
  RET_LOGIN_BAN_USER2 = 100;//不在白名单
  RET_USER_IN_FORBID_BATTLE_TIME = 101;//玩家在免战状态不能抢夺
  RET_ARENA_RANK_NOT_REACH_20 = 102;//竞技场排名20名之后不能直接挑战前10名
  RET_GIFT_CODE_ERR = 103; //错误的礼品码
  RET_VERSION_ERR = 104; //客户端版本错误
  RET_HOF_SIGN_LENGTH_ERROR = 105; //名人堂签名过长
  RET_HOF_SIGN_GOLD_ERROR = 106; //名人堂改签名元宝不足
  RET_SERVER_NOT_OPEN = 107;//服务器还未开放
  RET_FUND_BUY_TIME_EXPIRE = 108;//基金购买时间过期
  RET_FUND_BUY_REPEATE = 109;//基金购买重复
  RET_USER_NOT_BUY_FUND = 110; //玩家未购买基金
  RET_FUND_WEAL_TIME_EXPIRE = 111;//基金福利领取时间过期
  RET_FUND_HAS_AWARD = 112;//基金奖励已经领取
  RET_FUND_HAS_WEAL = 113; //基金福利已经领取
  RET_FUND_CANNOT_WEAL = 114; //基金福利领取条件未达成
  RET_ACTIVITY_STATUS_NO_PERMIT = 115; //活动奖励条件不可领取
  RET_ACTIVITY_DEC_NOT_ENOUGHT = 116; //活动奖励兑换物品不足
  RET_ACTIVITY_SELL_ALREADY_BOUGHT = 117; //活动限购已经参与
  RET_ACTIVITY_SELL_MAX = 118; //活动限购已经被抢购完了
  RET_ACTIVITY_CLOSED= 119; //活动已经结束
  RET_RIOT_ASSISTED = 120; //暴动已被解决
  RET_GC_TIME_OUT = 121;//礼品码时间过期
  RET_GC_NOT_ENOUGH_PARAM = 122; //礼品码缺少参数
  RET_GC_PARAM_ERR = 123; //参数错误
  RET_GC_ACT_CODE_NOT_USE = 124; //活动批次的码失效
  RET_GC_CODE_NOT_USE = 125; //码已经失效
  RET_GC_CODE_NOT_EXIST = 126; //码不存在
  RET_GC_ACT_TIMEOUT = 127; //活动过期
  RET_GC_CODE_USE_MORE_TIME = 128; //码超过使用次数
  RET_GC_ACT_CODE_ERR = 129; //活动游戏编码错误
  RET_GC_USER_ERR = 130; //用户名非该码绑定用户
  RET_GC_VERIFY_CODE_ERR = 131; //校验码错误
  RET_CORP_NOT_EXIST = 132; //军团不存在
  RET_CORP_NAME_ILLEGAL = 133; //非法军团名
  RET_CORP_NAME_REPEAT = 134; //军团名已存在
  RET_JOIN_CORP_EXIST= 135; //申请的军团已存在
  RET_JOIN_CORP_MAX = 136; //申请的军团数量到达上限
  RET_QUIT_CORP_INCD = 137; //退出军团时间CD中（在玩家主动退出 或者 军团长T人时候提示）
  RET_CORP_MEMBER_FULL = 138; //军团人数已满
  RET_CORP_AUTH_NO_PERMIT = 139; //军团权限不够
  RET_USER_HAS_JOINED_ANOTHER_CORP = 140; //玩家已经加入另外个军团
  RET_CORP_FRAME_DEMAND_NOT_MEET = 141; //军团边框条件不满足
  RET_CORP_VLEADER_FULL= 142; //军团副军团人数满了
  RET_DISMISS_MEMBER_ILLEGAL= 143; //军团人数大于最小解散军团人数
  RET_CORP_WORSHIP_ALREADY_DONE = 144; //已经做过军团贡献
  RET_CORP_WORSHIP_AWARD_GOT = 145; //已经领过军团贡献奖励
  RET_CORP_WORSHIP_POINT_ILLEGAL = 146; //军团贡献奖励点数不足 无法领取奖励
  RET_NOT_ENOUGH_CORP_POINT = 147; //军团点数不足
  RET_CA_AWARD_TIMES_EXCEED_LIMIT = 148; //可配置活动奖励次数超过限制
  RET_CA_AWARD_TIMES_EXCEED_SERVER_LIMIT = 149; //可配置活动全服奖励次数超过限制
  RET_CA_QUEST_ISNOT_COMPLETE = 150; //可配置活动奖励不可领取
  RET_CA_AWARD_ID_ERROR = 151; //可配置活动奖励ID错误
  RET_KNIGHT_NUM_NOT_ENOUGH = 152; //卡牌数量不足
  RET_EQUIP_NUM_NOT_ENOUGH = 153; //装备数量不足
  RET_TREASURE_NUM_NOT_ENOUGH = 154; //宝物数量不足
  RET_CA_AWARD_TIMENOT_REACH = 155; //可配置任务奖励领取时间未到
  RET_CORP_NOT_IN_EXCHANGE_TIME = 156; //弹劾军团长 时间未到
  RET_CORP_LEADER_CANNOT_QUIT = 157; //军团长不能退出军团
  RET_CORP_SHOP_REQUEST_OVERDUE = 158; //军团商店ID不存在 请求过期
  RET_USER_HAS_NO_CORP = 159; //玩家没有军团
  RET_USER_HAS_CORP = 160; //玩家已经有军团
  RET_DRESS_LEVEL_EXCEED_LIMIT = 161;//时装强化等级超过限制
  RET_DRESS_NOT_EXIST = 162;//时装不在
  RET_CORP_SHOP_HAS_BOUGHT = 163; //玩家已经购买了该军团商城道具
  RET_CORP_SET_CHAPTER_ILLEGAL = 164; //设置军团章节信息条件不足
  RET_CORP_CHAPTER_EXECUTE_MAX = 165; //最大军团副本执行次数
  RET_CORP_CHAPTER_INFORMATION_ERROR = 166; //军团副本信息错误 信息过期
  RET_CORP_CHAPTER_FINISHED = 167; //军团副本已经结束
  RET_CORP_CHAPTER_DUNGEON_NOT_FINISH = 168; //军团副本没通关
  RET_CORP_CHAPTER_DUNGEON_NO_AWARD = 169; //该玩家没有军团副本奖励
  RET_CORP_CHAPTER_AWARD_HAS_GOT = 170; //该玩家已经领取的军团副本奖励
  RET_HOLIDAY_AWARD_TIMES_EXCEED_LIMIT = 171; //节日活动领奖次数超过限制
  RET_HOLIDAY_EVENT_IS_NOT_OPEN = 172; //节日活动还未开放
  RET_ITEM_IS_EXPIRE = 173; //道具已过期
  RET_CORP_CHAPTER_AWARD_BELONG_TO_OTHERS= 174; //这个蛋已经被别人砸了
  RET_CORP_ANNOUNCEMENT_ILLEGAL = 175; //非法军团对外公告
  RET_CORP_NOTIFICATION_ILLEGAL = 176; //非法军团对内公告
  RET_GIFT_CODE_OP_TOO_FAST = 177; //礼品码操作过快
  RET_JOIN_CORP_INCD = 178; //加入军团时间CD中
  RET_JOIN_CORP_USER_REQUEST_NOT_EXIST = 179; //玩家军团申请不存在
  RET_CORP_WORSHIP_MAX_COUNT = 180; //军团祭天达到最大值
  RET_SERVER_USER_OVER_CEILING = 181; //服务器到达承载上线
  RET_CORP_SHOP_NO_LEFT = 182; //军团商城物品已经售完
  RET_DISMISS_CORP_INCD = 183; //解散军团时间CD中
  RET_VIP_DUNGEON_RESET_ERROR= 184; //无法购买日常副本次数
  RET_RECHARGE_BACK_ENDED = 185; //冲返活动已经结束
  RET_RECHARGE_BACK_REQUEST_ILLEGAL = 186; //请求过于频繁
  RET_RECHARGE_BACK_FAILED_FINISHED = 187; //冲返领取失败已经在别的服务器领取过
  RET_RECHARGE_BACK_FAILED = 188; //冲返领取失败
  RET_AWAKEN_ITEM_BAG_FULL = 189; //觉醒道具包裹已满
  RET_NOT_ENOUGH_WHEEL = 190;//转盘积分不足
  RET_NOT_ENOUGH_WHEEL_TOTAL = 191;//转盘总积分不足
  RET_AWAKEN_ITEM_NOT_ENOUGH = 192; //觉醒道具数量不足
  RET_KNIGHT_CANNOT_AWAKEN = 193; //武将不能觉醒
  RET_KNIGHT_AWAKEN_ITEM_POS_ERROR = 194; //武将觉醒道具位置不对
  RET_AWAKEN_ITEM_NOT_EXIST = 195; //觉醒道具不存在
  RET_KNIGHT_AWAKEN_LEVEL_EXCEED_LIMIT = 196; //武将觉醒等级超过限制
  RET_KNIGHT_AWAKEN_ITEM_NOT_COMPLETE = 197; //武将觉醒道具未集齐
  RET_AWAKEN_KNIGHT_NOT_ENOUGH = 198; //武将觉醒材料卡牌数量不足
  RET_AWAKEN_COST_KNIGHT_ERR = 199; //武将觉醒材料卡牌不对
  RET_ONTEAM_KNIGHT_CANNOT_BE_AWAKEN = 200; //出阵武将不可作为觉醒材料
  RET_NOT_ENOUGH_SOUL = 201;// 没有足够神魂
  RET_CORP_REQUEST_MAX = 202;//该军团申请已满
  RET_CORP_DUNGEON_RESET_MAX = 203;//军团副本购买次数达到上限
  RET_TITLE_IN_USE = 204; //称号已装备
  RET_TITLE_IS_EXPIRED = 205; //称号已过期
  RET_NOT_ENOUGH_CONTEST_POINT= 206; //比武勋章不足
  RET_NOT_ENOUGH_CORPPOINT_TOTAL = 207;//军团点数不足
  RET_NOT_ENOUGH_CONTESTWINS_TOTAL = 208;//比武连胜次数不足
  RET_TIME_DUNGEON_NOT_OPEN = 209; //限时副本未开放
  RET_TIME_DUNGEON_IS_COMPLETED = 210; //限时副本挑战已完成
  RET_GAME_TIME_ERROR1 = 211;//转盘活动已结束
  RET_GAME_TIME_ERROR2 = 212;//大富翁活动已结束
  RET_PAY_PRICE_TYPE_NIL = 213;//未知价格类型
  RET_GAME_TIME_ERROR0 = 214;//当前没有活动开启
  RET_USER_CHAT_NOT_EXIST = 215; //在线列表中无此玩家
  RET_MAIL_LONG = 216; //邮件长度超长
  RET_HARD_CHAPTER_ROIT_ERROR = 217; //精英副本状态错误
  RET_BATTLE_TOO_FREQUENT = 218;//战斗请求太频繁
  RET_USER_RECOVER = 219;//玩家数据需要恢复
  RET_CREATE_LIMIT = 220;//同一ip建号数量达到上限
  RET_CLIENT_REQUEST_ERROR = 221; //客户端请求错误
  RET_REBEL_BOSS_NOT_OPEN = 222;//叛军BOSS活动未开启
  RET_CHALLENGE_COUNT_NOT_ENOUGH = 223; //叛军BOSS挑战次数不足
  RET_REBEL_BOSS_NOT_REPEAT_AWARD = 224; //叛军奖励已经领取
  RET_REBEL_BOSS_DIE = 225; //叛军BOSS已死亡
  RET_LOGIN_BLACKCARD_USER = 226;//黑卡封禁用户
  RET_REBEL_BOSS_GROUP_EXIST = 227; //阵营已经选择过
  RET_SPREAD_USER_LVL_LIMIT = 228;//推广玩家等级不够
  RET_SPREAD_MAX_COUNT = 229;//推广玩家达到最大数
  RET_SPREAD_DRAW_ERROR = 230;//推广奖励领取不成功
  RET_SPREAD_NOT_ENOUGH = 231;//推广积分不够
  RET_RICE_ROB_TIME_END = 232; //粮草抢夺时间结束了
  RET_RICE_ROB_NOT_OPEN = 233; //粮草抢夺活动未开放
  RET_USER_NOT_JOIN_RICE_ROB = 234; //玩家未加入粮草战
  RET_RICE_RIVALS_FLUSH_IN_CD = 235; //对手匹配CD中
  RET_RICE_ROB_TOKEN_NOT_ENOUGH = 236; //抢粮剩余次数不足
  RET_RICE_ROB_IN_CD = 237; //抢粮CD时间中
  RET_USER_NOT_IN_RICE_RIVALS = 238; //对方不在对手列表中
  RET_RICE_REVENGE_TOKEN_NOT_ENOUGH = 239; //复仇令不足
  RET_RICE_ENEMY_NOT_EXIST = 240; //仇人不存在
  RET_RICE_ENEMY_CANNOT_REVENGED = 241; //不能复仇
  RET_RICE_ACHIEVEMENT_ID_ERROR = 242; //成就ID错误
  RET_RICE_ACHIEVEMEN_NOT_REACH = 243; //成就未达成
  RET_RICE_ENEMY_NOT_NEED_REVENGE = 244; //不需要复仇
  RET_SHOPTIME_GOODS_NOT_ENOUGH = 245;//限时优惠商店商品不足
  RET_SHOPTIME_ACTIVITY_NOT_START = 246;//限时优惠未开始
  RET_OUTLET_SHOP_UP_LIMIT = 247;//限时优惠商店购买到达上限
  RET_OUTLET_SHOP_REWARD_HAS_AWARD = 248;//限时优惠商店全服福利已经领取
  RET_OUTLET_SHOP_REWARD_CAN_NOT_WELFARE = 249;//限时优惠商店全服福利不能领取
  RET_NOT_RICE_RANK_AWARD_TIME = 250; //非粮草战排行榜领奖时间
  RET_RICE_RANK_AWARD_HAS_RECEIVED = 251; //粮草排行榜奖励已经领取
  RET_RICE_RANK_NOT_AWARD = 252; //粮草排行没有奖励
  RET_RICE_TOKEN_EXCEED_BUY_LIMIT = 253; //粮草令牌购买次数超过限制
  RET_RICE_TOKEN_BUY_PRICE_ERROR = 254; //粮草令牌价格错误
  RET_OUTLET_SHOP_RECHARGE_NOT_FIND_ID = 255;//限时优惠商店未找到充值id
  RET_OUTLET_SHOP_GET_GOODS_ERROR = 256;//限时优惠商店未找到商品
  RET_SPREAD_INVALID_INPUT = 257;//推广非法输入
  RET_REGISTER_SPREAD_ERROR = 258;//已经注册
  RET_REGISTERING_SPREAD    = 259;//正在建立注册关系，请稍等
  RET_REGISTERING_ERROR     = 260;//注册失败(新老玩家不在同一个跨服上)
	RET_REBEL_BOSS_REFRESH_TOO_FREQUENT = 261; //叛军BOSS刷新请求太频繁
	RET_REBEL_BOSS_BATTLE_TOO_FREQUENT = 262; //叛军BOSS战斗请求太频繁
	RET_REBEL_BOSS_REWARD_NO_PERMIT = 263; //奖励不可领取
  RET_REGISTER_CONNECT_CROSS_ERROR     = 264;//注册时连跨服失败
	RET_REBEL_BOSS_CORP_REWARD_NOT_PERMIT = 265;//无法领取，每次活动只可领取1次军团奖励
  RET_RICE_RANK_ACHIEVEMENT_RECEIVED = 266; //粮草战成就奖励已领取
  RET_CORP_CHAPTER_AWARD_FINISHED = 267; //玩家已经领取过军团章节奖励
  RET_CORP_CHAPTER_DUNGEON_NOT_OPEN = 268; //军团副本未开启 不能攻打
  RET_MONTH_FUND_ACTIVITY_CFG_ERROR = 269; //月基金配置出错
  RET_MONTH_FUND_ACTIVITY_NOT_START = 270; //月基金未开始
  RET_MONTH_FUND_NOT_FIND_USER_DATA = 271; //月基金找不到玩家数据
  RET_MONTH_FUND_NOT_IN_AWARD_TIME = 272; //月基金不在领取奖励时间
  RET_MONTH_FUND_AWARD_HAS_ACQUIRED = 273; //月基金奖励已经领取过了
  RET_MONTH_FUND_HAVE_NOT_BUY_BEFORE = 274; //没有购买过月基金
  RET_CUSTOM_ACTIVITY_LEVEL_NOT_MATCH = 275; //可配置活动等级不匹配
  RET_CUSTOM_ACTIVITY_VIP_NOT_MATCH = 276; //可配置活动vip等级不匹配
  RET_MAIL_STRANGER_LEVEL = 277; //给陌生人发邮件等级不足
  RET_MAIL_STRANGER_COUNT = 278; //今天给陌生人发邮件已达到次数限制
  RET_ROOKIE_INACTIVE = 279; //新手光环活动已关闭
  RET_THEME_DROP_ZY_CHANGE			= 280;	//限时抽将阵营已变
  RET_THEME_DROP_TIMES_LACK			= 281;	//限时抽将次数不足
  RET_THEME_DROP_KNIGHT_ERROR		= 282;	//限时抽将主题将不符合
  RET_THEME_DROP_SV_LACK			= 283;	//限时抽将缺少星运值
  RET_GROUP_BUY_PURCHASE_COUNT_LIMIT = 284; //限时团购购买次数不足
  RET_GROUP_BUY_GET_TASK_AWARD_ID_ERROR = 285; //限时团购领奖Id错误
  RET_GROUP_BUY_GET_TASK_AWARD_SELF_SCORE_NOT_ENOUGH = 286; //限时团购领奖个人积分不足
  RET_GROUP_BUY_GET_TASK_AWARD_MAX_SCORE_NOT_ENOUGH = 287; //限时团购领奖全服最高积分不足
  RET_GROUP_BUY_TASK_AWARD_GET_BEFORE = 288;//限时团购奖励已经领取过
  RET_GROUP_BUY_TASK_AWARD_BACK_GOLD_ERROR = 289;//限时团购返还元宝出错
  RET_GROUP_BUY_VIP_LEVLE_NOT_ENOUGH = 290;//限时团购vip等级不足
  RET_GROUP_BUY_LEVLE_NOT_ENOUGH = 291;//限时团购等级不足
  RET_GROUP_BUY_NOT_IN_BUY_TIME = 292;//限时团购不在购买状态
  RET_GROUP_BUY_USER_DATA_ERROR = 293;//限时团购玩家数据异常
  RET_GROUP_BUY_NOT_IN_ACTIVITY_TIME = 294;//限时团购不在活动时间
  RET_GROUP_BUY_NOT_IN_AWARD_TIME = 295;//限时团购不在领奖时间
  RET_GROUP_BUY_USER_DATA_NOT_LOAD = 296;//限时团购玩家数据异常
  RET_PICTURE_FRAME_ID_ERROR		= 297;//更换头像框ID错误
  RET_PET_BAG_FULL = 298; //宠物背包满
  RET_PET_NOT_EXIST = 299; //宠物不存在
  RET_PET_IS_IN_FIGHT = 300; //宠物已上阵
  RET_BATTLE_FIELD_GONEXT_ERROR = 301;//远征进入下一关条件不满足
  RET_BATTLE_FIELD_RESET_ERROR = 302;//远征无法重置
  RET_BATTLE_FIELD_OUTOFDATE = 303;//远征信息过期
  RET_BATTLE_FIELD_AWARD_ERROR = 304;//远征领奖错误
  RET_BATTLE_FIELD_CHALLENGE_ERROR= 305;//远征关卡已经挑战过
  RET_BATTLE_FIELD_LOADING = 306;//远征关卡载入中
  RET_BATTLE_FIELD_SHOP_UP_LIMIT = 307;
  RET_CORP_DUNGEON_AWARD_OVER_DIFF = 308;//军团奖励领取异常 利用工作室
  RET_FIGHT_SCORE_NOT_ENOUGH = 309;//兽魂数量不足
  RET_DELAY_RELOAD_ERROR = 310;//正在努力加载数据，请稍后
  RET_CORP_TECH_ID_NOT_OPEN = 311;//军团科技未开放（军团等级不够）
  RET_CORP_TECH_ID_NOT_EXIST = 312; //军团科技id错误
  RET_CORP_TECH_ID_REACH_MAX_LEVEL = 313; //军团科技达到最高等级
  RET_CORP_TECH_ID_USER_LEVEL_REACH_CORP_LEVEL = 314; //军团科技 玩家科技等级达到军团科技等级
  RET_CORP_TECH_CORP_EXP_NOT_ENOUGH = 315; //军团科技研发，军团经验不足
  RET_CORP_UP_LEVEL_REACH_MAX_LEVEL = 316; //军团升级到达最高等级
  RET_CORP_UP_LEVEL_NOT_ENOUGH_EXP = 317; //军团升级经验不足
  RET_CROSS_PVP_RANK_LIMIT_ERROR = 318; //跨服夺帅竞技场排名条件不符
  RET_CROSS_PVP_INSPIRE_COUNT_LIMIT = 319; //跨服夺帅鼓舞达到上限
  RET_CROSS_RANK_BUSY = 320; //排行榜正在结算
  RET_GAME_TIME_ERROR3 = 321;//奇门八卦活动已结束
  RET_CROSS_PVP_FLOWER_SELF_ILLEGAL = 322; //不能给自己鲜花鸡蛋
  RET_CROSS_PVP_STAGE_ILLEGAL = 323; //请求的战场不存在
  RET_CROSS_PVP_FLOWER_TYPE_ILLEGAL = 324; //鲜花鸡蛋类型错误
  RET_CROSS_PVP_CONFIG_ERROR = 325; //跨服夺帅配置异常
  RET_CROSS_PVP_SLAVE_DATA_ERROR = 326; //跨服夺帅数据异常
  RET_CROSS_PVP_INSPIRE_TYPE_ILLEGAL = 327; //跨服夺帅鼓舞类型错误
  RET_CROSS_PVP_GET_AWARD_ERROR = 328; //跨服夺帅领奖出错
  RET_CROSS_PVP_FLOWER_COUNT_TOO_MUCH = 329; //跨服夺帅投注次数太多
  RET_SPECIAL_HOLIDAY_TASK_NOT_FINISHED = 330; //长假活动，中秋国庆领奖任务未完成
  RET_SPECIAL_HOLIDAY_TASK_NOT_IN_TIME = 331; //中秋国庆活动已过
  RET_SPECIAL_HOLIDAY_TASK_FINISHED = 332; //中秋活动奖励已领取
  RET_SPECIAL_HOLIDAY_SALE_REACH_MAX = 333; //中秋活动兑换达到最大次数
  RET_SPECIAL_HOLIDAY_SALE_PRICE_NOT_ENOUGH = 334; //中秋活动兑换资源不足
  RET_SPECIAL_HOLIDAY_SALE_NOT_IN_TIME = 335; //中秋活动兑换 时间不对
  RET_BULLET_SCREEN_IN_CD = 336; //发送弹幕CD中
  RET_BULLET_SCREEN_CONTENT_ILLEGAL = 337; //发送弹幕内容错误
  RET_BULLET_SCREEN_BUSY = 338; //弹幕系统繁忙
  RET_EXPANSIVE_DUNGEON_STAGE_NOT_OPEN = 339; //关卡未开启
  RET_EXPANSIVE_DUNGEON_CHAPTER_NOT_OPEN = 340; //章节未开启
  RET_HAVE_GET_MAX_STAR = 341; //已三星通关
  RET_HAS_GET_CHAPTER_AWARD = 342; //已经领取过章节奖励
  RET_BATTLE_ON_SLOT_KNIGHT_ERROR = 343; //战斗缺少上阵侠客
  RET_EXPANSIVE_DUNGEON_SHOP_BUY_COUNT_ERROR = 344; //资料片副本商品购买次数不足
  RET_EXPANSIVE_DUNGEON_SHOP_ITEM_NOT_EXIST = 345; //资料片副本商品不存在
  RET_EXPANSIVE_DUNGEON_SHOP_CHAPTER_NOT_FINISH = 346; //资料片副本章节未完成
  RET_FRAGMENT_COMPOUND_NOT_ENOUGH = 347; //合成碎片不足
  RET_OLDER_PLAYER_VIP_AWARD = 348; //已经领取过老玩家VIP奖励
  RET_NOT_OLDER_PLAYER = 349; //不是老玩家
  RET_OLDER_PLAYER_LEVEL_AWARD = 350; //已经领取过老玩家等级奖励
  RET_GET_OLDER_PLAYER_INFO = 351; //已经在获取老玩家数据
  RET_EXPANSIVE_DUNGEON_NOT_START = 352; //资料片副本未开启
  RET_ACCOUNT_BINDING_REWARDED = 353; //社交账号绑定奖励已领取
  RET_CONNECT_CROSS_ERROR = 354; //连跨服失败
  RET_NOT_ENOUGH_KSOUL = 355; //将灵不足
  RET_NOT_ENOUGH_KSOUL_POINT = 356; //灵玉不足
  RET_ACTIVE_DEMAND_NOT_MEET = 357; //条件不足 无法激活
  RET_HAS_ALREAD_ACTIVE = 358; //已经激活
  RET_KSOUL_SHOP_ITEM_BUYED = 359; //灵玉商店物品已购买
  RET_KSOUL_SHOP_ITEM_NOT_EXIST = 360; //灵玉商店物品不存在
  RET_KSOUL_SUMMON_ERROR = 361; //点将错误
  RET_KSOUL_SUMMON_POINT_NOT_ENOUGH = 362; //点将奇遇点不足
  RET_KSOUL_SUMMON_EXCHANGE_MAX = 363; //点将奇遇最大次数
  RET_CITY_ALL_NO_OPEN = 364;		// 城池未都攻下
  RET_CITY_PATROL_CONFIG = 365; // 城池巡逻配置错误
  RET_CITY_TECH_CONFIG = 367;	// 城池科技配置错误
  RET_CITY_TECHUP_TIME_NO_ATTACH = 368;	// 城池科技升级巡逻时间但没达到
  RET_CITY_TECHUP_CONSUME_NO_ATTACH = 369;	// 城池科技升级消耗品不足
  RET_KNIGHT_GOD_NO_ATTACH_POTENTIALITY = 370; // 化神, 武将没有达到化神的潜质
  RET_KNIGHT_GOD_CONFIG	= 371;					// 化神, 化神神脉配置错误
  RET_KNIGHT_GOD_CONSUME_NO_ENOUGH = 372;		// 化神, 化神消耗不足
  RET_KNIGHT_TRANSFORM_NO_SAME_GROUP_LEVEL = 373; // 八卦镜跨阵营转换等级不足
  RET_DAYS_SEVEN_COMP_NO_IN_AWARD_TIME = 374; // 开服七日战力比拼不在领奖时间内
  RET_NOT_ENOUGH_KSOUL_SUMMON_SCORE = 375; // 奇遇点不足 
  RET_DAYS_SEVEN_COMP_RANK_IS_EMPTY = 376; // 开服七日战力比拼榜是空
  RET_DAYS_SEVEN_COMP_NO_ON_RANK = 377; // 开服七日战力比拼你不在榜上
  RET_DAYS_SEVEN_COMP_CONF_EROR = 378; // 开服七日战力比配置异常
  RET_DAYS_SEVEN_COMP_HAD_AWARD = 379; // 开服七日战力比拼你已经领奖
  RET_DAYS_SEVEN_COMP_SWITCH_CLOSE = 380; // 开服七日战力比拼活动开关关闭
  RET_SHARE_FRIEND_AWARD_NO_LOAD_CONF = 381; // 新马服FB好友分享配置没有加载
  RET_SHARE_FRIEND_AWARD_NO_LOAD_DATA = 382; // 新马服FB好友分享数据没有加载
  RET_SHARE_FRIEND_AWARD_CONF_ERROR   = 383; // 新马服FB好友分享配置错误
  RET_SHARE_FRIEND_AWARD_HAVE_AWARD	  = 384; // 新马服FB好友分享当日奖励已将领取
  RET_FORTUNE_TODAY_TIMES_MAX		  = 385; // 招财符今日招财次数已达上限
  RET_FORTUNE_BOX_TIMES_NO_ENOUGH	  = 386; // 招财符抽宝箱招财次数不够
  RET_FORTUNE_BOX_ID_NO_EXIST		  = 387; // 招财符抽宝箱id不存在
  RET_FORTUNE_BOX_ID_HAD_AWARD		  = 388; // 招财符抽宝箱id今日已领
  RET_FORTUNE_BOX_AWARD_CONF_ERROR	  = 389; // 招财符抽宝箱配置问题

//-------------------------------------我 叫 分 隔 符-------------------------------------------------
  //1000以上共享用 和crosspk同步 不然尼玛转换就想死了
  RET_CORP_CROSS_PK_STATE_ERROR = 1000; //跨服军团状态错误
  RET_CORP_CROSS_PK_HAS_APPLY= 1001; //跨服军团已经报名
  RET_CORP_CROSS_PK_HAS_NOT_APPLY= 1002; //跨服军团未报名
  RET_CORP_CROSS_PK_DEMAND_NOT_MEET = 1004; //跨服军团报名条件不满足
  RET_CORP_CROSS_PK_ENCOURAGE_OVER_MAX = 1005; //跨服鼓舞超过军团最大次数
  RET_CORP_CROSS_PK_ENCOURAGE_OVER_MEMBERMAX = 1006; //跨服鼓舞超过玩家最大次数
  RET_CORP_CROSS_PK_IN_REFRESH_CD = 1007; //跨服战斗刷新CD中
  RET_CORP_CROSS_PK_IN_PK_CD = 1008; //跨服战斗CD中
  RET_CORP_CROSS_PK_NOT_IN_PK_CD = 1009; //不在跨服战斗CD中 不用重置
  RET_CORP_CROSS_PK_FIELD_NOT_EXIT = 1010; //战场不存在
  RET_CORP_QUERY_ERROR = 1011; //查询异常
  RET_CORP_CROSS_PK_CORP_NOT_EXIT = 1012; //军团不存在
  RET_CORP_CROSS_PK_CORP_MEMBER_MAX_CHALLENGE= 1013; //军团挑战玩家打到最大次数
  RET_CORP_CROSS_PK_CORP_SET_FIREON_ERROR = 1014; //不能设置自己为集火目标
  RET_CORP_CROSS_PK_CORP_STATE_LOCK = 1015; //军团战状态锁定中
  RET_CORP_CROSS_PK_SERVER_ERROR = 1016; //跨服服务器失联
  RET_CORP_CROSS_PK_RESET_MAX = 1017; //跨服战战斗重置达到上限
  RET_USER_CROSS_PK_SERVER_ERROR = 1018;//比武服务器战场信息错误
  RET_USER_CROSS_PK_STATE_ERROR = 1019;//比武状态错误
  RET_USER_CROSS_PK_GROUP_ERROR  = 1020;//比武玩家未选择阵营
  RET_USER_CROSS_PK_REFRESH_ERROR = 1021;//比武玩家没有刷新次数
  RET_USER_CROSS_PK_FREQUENCE_ERROR = 1022;//比武玩家请求列表频繁
  RET_USER_CROSS_PK_BATTLE_ERROR = 1023;//比武玩家请求战斗错误
  RET_USER_CROSS_PK_USER_CHALLENGED = 1024;//比武玩家已经挑战过了
  RET_USER_CROSS_PK_USER_NO_CHALLENGE= 1025;//比武玩家没有挑战次数
  RET_USER_CROSS_PK_GET_ENEMY_ERROR = 1026;//比武玩家获取对手信息失败
  RET_USER_CROSS_PK_ARENA_NO_INVITATION = 1027;//没有邀请资格
  RET_USER_CROSS_PK_ARENA_BET_ERROR = 1028;//投注错误
  RET_USER_CROSS_PK_ARENA_HAS_SERVER_AWARD = 1029;//已经领取过全服奖励
  RET_USER_CROSS_PK_ARENA_AWARD_NOT_PREPARED= 1030;//奖励初始化中
  RET_USER_CROSS_PK_ARENA_AWARD_ILLEGAL= 1031;//奖励条件不满足
  RET_USER_CROSS_PK_ARENA_NOT_OPEN = 1032;//争霸赛未开启
  RET_USER_CROSS_PK_ARENA_BET_INIT = 1033;//投注初始化中
  RET_USER_CROSS_PK_ARENA_BET_FINISH = 1034;//投注结算中
  RET_USER_CROSS_PK_ARENA_CHALLENGE_ERROR = 1035;//挑战信息错误
  RET_USER_CROSS_PK_ARENA_CHALLENGE_LOCK = 1036;//正在被挑战
  RET_USER_CROSS_PK_ARENA_BET_MAX = 1037;//投注超过上限
  RET_USER_CROSS_PK_ARENA_BET_AWARD_FINISH = 1038;//已经领取过投注奖励
  RET_USER_CROSS_PK_GET_USER_INFO_FAILED = 1039;//玩家信息获取失败
  RET_USER_CROSS_GB_NOT_IN_AWARD_TIME = 1040;//不在团购领奖时间内
  RET_USER_CROSS_GB_NOT_IN_AWARD_RANK = 1041;//不在团购排行榜奖励中
  RET_USER_CROSS_GB_GET_RANK_AWARD_BEFORE = 1042;//团购奖励已经领取过

  RET_TEAM_PVP_CROSS_SERVER_ERROR = 1100; // 组队pvp，跨服服务器失联
  RET_TEAM_PVP_HAS_TEAM = 1101; //组队PVP,已经有队伍
  RET_TEAM_PVP_JOINING_TEAM = 1102; // 组队pvp, 在自动匹配队伍中
  RET_TEAM_PVP_NOT_IN_TEAM = 1103; // 组队pvp，不在队伍中
  RET_TEAM_PVP_NOT_TEAM_LEADER = 1104; //组队pvp，不是队长
  RET_TEAM_PVP_KICK_NO_TEAM_MEMBER = 1105; // 组队pvp，踢的人不在队伍中_
  RET_TEAM_PVP_CAN_NOT_KICK_SELF = 1106; //组队pvp，不能踢自己
  RET_TEAM_PVP_INVITE_TARGET_NOT_ONLINE = 1107; //组队pvp，邀请对象不在线
  RET_TEAM_PVP_INVITE_TARGET_NOT_FRIEND = 1108; //组队pvp，邀请对象非好友
  RET_TEAM_PVP_INVITOR_QUIT_TEAM = 1109; // 组队pvp，邀请人已退出
  RET_TEAM_PVP_INVITE_TICKET_INVALID = 1110; // 组队pvp，无效邀请
  RET_TEAM_PVP_TEAM_FULL = 1111; // 组队pvp，队伍已满
  RET_TEAM_PVP_ALREADY_INVITING_NPC = 1112; // 组队pvp，已经在邀请NPC了
  RET_TEAM_PVP_TEAM_NOT_FULL = 1113; //组队pvp，队伍未满
  RET_TEAM_PVP_TEAM_IS_MATCHING = 1114; // 组队pvp，已经在匹配其他队伍中
  RET_TEAM_PVP_TEAM_MEMBERS_DISAGREE = 1115; // 组队pvp，有队员不同意出战
  RET_TEAM_PVP_CHANGE_POSITION_INVALID = 1116; // 组队pvp，换位置无效
  RET_TEAM_PVP_TEAM_IS_NOT_MATCHING = 1117; // 组队pvp，队伍不在匹配其他队伍
  RET_TEAM_PVP_USER_LEVEL_NOT_ENOUGH = 1118; // 组队pvp，玩家等级不足
  RET_TEAM_PVP_NPC_SEARCH_CD = 1119; // 组队pvp，npc  cd中
  RET_TEAM_PVP_NOT_ENOUGH_SCORE = 1120; // 组队pvp商店，积分不足
  RET_TEAM_PVP_NOT_ENOUGH_HONOR = 1121; // 组队pvp商店，荣誉不足

  //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!上面别加游戏服的RET 游戏服的RET方放在1000以内!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  //------------------------slave master -----------------------------------------
  RET_CROSS_PVP_APPLY_FULL = 2000;//跨服报名已满
  RET_CROSS_PVP_ROLE_EXIST = 2001;//跨服战已经报名
  RET_CROSS_PVP_NO_EXIST_ACT_ID = 2002;//跨服赛区不存在
  RET_CROSS_PVP_NO_FIND_ROOM = 2003;//跨服房间不存在
  RET_SERVER_BUSY = 2004;//跨服服务器繁忙
  RET_CROSS_PVP_NO_FIND_RESOURCE = 2005;//跨服资源点错误
  RET_CROSS_PVP_NO_EXIST_ID = 2006;//跨服挑战对象不存在
  RET_PVP_LOCK = 2007;//资源点因为攻击被锁
  RET_PVP_COLDDOWN = 2008;//玩家处于冷却时间
  RET_PVPING = 2009;//玩家正在攻击资源
  RET_PVP_OCCUPY = 2010;//玩家已经占领了一个资源点
  RET_PVP_M2M = 2011;//玩家自己攻击自己
  RET_CROSS_PVP_STATE_ERROR = 2012;//跨服PVP状态错误
  RET_CROSS_PVP_LEVEL_ERROR = 2013;//跨服报名等级不满足
  RET_CROSS_PVP_TYPE_ERROR = 2014;//跨服报名战场不存在
  RET_CROSS_PVP_BUFF_MAX = 2015;//BUFF已最大
  RET_CROSS_PVP_BUFF_TYPE_ERROR = 2016;//BUFF类型错误
  RET_FLOWER_EGG_TYPE_ERROR = 2017;//鲜花鸡蛋类型错误
  RET_CROSS_PVP_NO_BET = 2018;//该轮没有鲜花鸡蛋押注
  RET_FLOWER_EGG_ONLY_ONE = 2019;//鲜花/鸡蛋只能押一个人
  RET_FLOWEREGG_AWARDED = 2020;//鲜花鸡蛋奖励已经领取了
  RET_FLOWEREGG_NOT_MEET = 2021;//鲜花鸡蛋奖励条件不满足
  RET_CROSS_PVP_RANK_GOT_AWARD = 2022;//已经领取过排行奖励
  RET_CROSS_PVP_NOT_OB = 2023;//不在OB列表内
  //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!上面别加游戏服的RET 游戏服的RET方放在1000以内!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
}

enum ID {
  //网关中的协议
  ID_C2S_KeepAlive = 10000;
  ID_S2C_KeepAlive = 10001;
  ID_C2S_Login = 10002;
  ID_S2C_Login = 10003;
  ID_C2S_Create = 10004;
  ID_S2C_Create = 10005;
  ID_C2S_Offline = 10009;
  ID_C2S_GetServerTime = 10011;
  ID_S2C_GetServerTime = 10012;

  ID_C2S_Flush = 10006;
  ID_S2C_Flush = 10007;
  ID_S2C_GetUser = 10008;
  ID_S2C_GetKnight = 10010;

  ID_C2S_TestBattle = 10013;
  ID_S2C_TestBattle = 10014;

  ID_S2C_FightKnight = 10016;
  ID_C2S_ChangeFormation = 10017;
  ID_S2C_ChangeFormation = 10018;
  ID_C2S_ChangeTeamKnight = 10019;
  ID_S2C_ChangeTeamKnight = 10020;
  ID_C2S_AddTeamKnight = 10021;
  ID_S2C_AddTeamKnight = 10022;
  ID_S2C_GetItem = 10023;
  ID_S2C_GetFragment = 10024;
  ID_C2S_Shopping = 10025;
  ID_S2C_Shopping = 10026;
  ID_C2S_UseItem = 10027;
  ID_S2C_UseItem = 10028;
  ID_S2C_GetEquipment = 10029;
  ID_C2S_EnterShop = 10030;
  ID_S2C_EnterShop = 10031;
  ID_S2C_OpObject = 10032;
  ID_C2S_Sell = 10033;
  ID_S2C_Sell = 10034;
  ID_C2S_FragmentCompound = 10035;
  ID_S2C_FragmentCompound = 10036;
  ID_C2S_MysticalShopInfo = 10037;
  ID_S2C_MysticalShopInfo = 10038;
  ID_C2S_MysticalShopRefresh = 10039;
  ID_S2C_MysticalShopRefresh = 10040;
  ID_S2C_GetTreasureFragment = 10041;
  ID_S2C_GetTreasure = 10042;
  ID_S2C_FightResource = 10043;
  ID_C2S_AddFightEquipment = 10044;
  ID_S2C_AddFightEquipment = 10045;
  ID_C2S_ClearFightEquipment = 10046;
  ID_S2C_ClearFightEquipment = 10047;
  ID_C2S_AddFightTreasure = 10048;
  ID_S2C_AddFightTreasure = 10049;
  ID_C2S_ClearFightTreasure = 10050;
  ID_S2C_ClearFightTreasure = 10051;
  ID_C2S_GiftCode = 10052;
  ID_S2C_GiftCode = 10053;
  ID_S2C_RollNotice = 10054; //跑马灯公告
  ID_S2C_HOF_Points = 10055;
  ID_S2C_GetAwakenItem = 10056;
  ID_C2S_AwakenShopInfo = 10057;
  ID_S2C_AwakenShopInfo = 10058;
  ID_C2S_AwakenShopRefresh = 10059;
  ID_S2C_AwakenShopRefresh = 10060;
  ID_C2S_GetTencentReward = 10061; //获取腾讯应用宝礼包
  ID_C2S_ChangeTitle = 10062; //装备称号
  ID_S2C_ChangeTitle = 10063;
  ID_C2S_UpdateFightValue = 10064; //更新玩家战斗力数据(重算战斗力)
  ID_C2S_FragmentSale = 10065;
  ID_S2C_FragmentSale = 10066;
  ID_C2S_ItemCompose = 10067;
  ID_S2C_ItemCompose = 10068;
  ID_C2S_ChangeName = 10069;
  ID_S2C_ChangeName = 10070;

  //聊天
  ID_C2S_ChatRequest = 10100;
  ID_S2C_ChatRequest = 10101;
  ID_S2C_Chat = 10102;
  ID_S2C_Notify = 10103;

  //好友
  ID_C2S_GetFriendList = 10200;
  ID_S2C_GetFriendList = 10201;
  ID_C2S_GetFriendReqList = 10202;
  ID_S2C_GetFriendReqList = 10203;
  ID_C2S_RequestAddFriend = 10204;
  ID_S2C_RequestAddFriend  = 10205;
  ID_C2S_RequestDeleteFriend = 10206;
  ID_S2C_RequestDeleteFriend = 10207;
  ID_C2S_ConfirmAddFriend = 10208;
  ID_S2C_ConfirmAddFriend = 10209;
  ID_C2S_FriendPresent = 10210;
  ID_S2C_FriendPresent = 10211;
  ID_C2S_GetFriendPresent = 10212;
  ID_S2C_GetFriendPresent = 10213;
  ID_C2S_GetPlayerInfo = 10214;
  ID_S2C_GetPlayerInfo = 10215;
  ID_S2C_AddFriendRespond = 10216;
  ID_C2S_ChooseFriend = 10217;
  ID_S2C_ChooseFriend = 10218;
  ID_C2S_GetFriendsInfo = 10219;
  ID_S2C_GetFriendsInfo = 10220;
  ID_C2S_KillFriend = 10221;
  ID_S2C_KillFriend = 10222;
  ID_S2C_DelFriend = 10223;

  //主线副本
  ID_C2S_GetChapterList = 10300;
  ID_S2C_GetChapterList = 10301;
  //ID_C2S_GetStageList = 10302;
  //ID_S2C_GetStageList = 10303;
  ID_C2S_GetChapterRank = 10304;
  ID_S2C_GetChapterRank = 10305;
  ID_S2C_AddStage = 10306;
  ID_C2S_ExecuteStage  = 10307;
  ID_S2C_ExecuteStage  = 10308;
  ID_C2S_FastExecuteStage  = 10309;
  ID_S2C_FastExecuteStage  = 10310;
  ID_C2S_ChapterAchvRwdInfo  = 10311;//副本星数奖励信息
  ID_S2C_ChapterAchvRwdInfo  = 10312;
  ID_C2S_FinishChapterAchvRwd  = 10313;//获取星星成就奖励
  ID_S2C_FinishChapterAchvRwd  = 10314;
  ID_C2S_FinishChapterBoxRwd  = 10315;//获取箱子奖励
  ID_S2C_FinishChapterBoxRwd  = 10316;
  ID_C2S_ResetDungeonExecution = 10317;//重置副本次数
  ID_S2C_ResetDungeonExecution = 10318;
  ID_C2S_ResetDungeonFastTimeCd = 10319;//重置秒杀时间
  ID_S2C_ResetDungeonFastTimeCd = 10320;
  ID_S2C_ExecuteMultiStage = 10321;//副本战斗多战报协议
  ID_C2S_ExecuteMultiStage = 10322;
  ID_S2C_FirstEnterChapter = 10323;//第一次进入设置TAG
  ID_C2S_FirstEnterChapter = 10324;

  //竞技场
  ID_C2S_GetArenaInfo = 10400;//获取竞技场信息
  ID_S2C_GetArenaInfo = 10401;
  ID_C2S_ChallengeArena = 10402;//挑战竞技场
  ID_S2C_ChallengeArena = 10403;
  ID_C2S_GetArenaTopInfo = 10404;//获取竞技场排行榜
  ID_S2C_GetArenaTopInfo = 10405;
  ID_C2S_GetArenaUserInfo = 10406;//获取竞技场排行榜
  ID_S2C_GetArenaUserInfo = 10407;

  //闯关
  ID_C2S_TowerInfo = 10500;
  ID_S2C_TowerInfo = 10501;
  ID_C2S_TowerChallenge = 10502;
  ID_S2C_TowerChallenge = 10503;
  ID_C2S_TowerStartCleanup = 10504;
  ID_S2C_TowerStartCleanup = 10505;
  ID_C2S_TowerStopCleanup = 10506;
  ID_S2C_TowerStopCleanup = 10507;
  ID_C2S_TowerReset = 10508;
  ID_S2C_TowerReset = 10509;
  ID_C2S_TowerGetBuff = 10510;
  ID_S2C_TowerGetBuff = 10511;
  ID_C2S_TowerRfBuff = 10512;
  ID_S2C_TowerRfBuff = 10513;
  ID_C2S_TowerRequestReward = 10514;
  ID_S2C_TowerRequestReward = 10515;
  ID_C2S_TowerRankingList = 10516;
  ID_S2C_TowerRankingList = 10517;
  ID_C2S_TowerChallengeGuide = 10518;
  ID_S2C_TowerChallengeGuide = 10519;

  //邮件
  ID_S2C_GetSimpleMail = 10600;
  ID_S2C_AddSimpleMail = 10601;
  ID_S2C_GetNewMailCount = 10602;
  ID_C2S_GetMail = 10603;
  ID_S2C_GetMail = 10604;//普通邮件
  ID_S2C_GetGiftMailCount = 10605;
  ID_C2S_GetGiftMail = 10606;
  ID_S2C_GetGiftMail = 10607;
  ID_C2S_ProcessGiftMail = 10608;
  ID_S2C_ProcessGiftMail = 10609;
  ID_C2S_TestMail= 10610;
  ID_C2S_Mail= 10611;
  ID_S2C_Mail= 10612;

  //抽卡
  ID_C2S_RecruitInfo = 10700;
  ID_S2C_RecruitInfo = 10701;
  ID_C2S_RecruitLp = 10702;
  ID_S2C_RecruitLp = 10703;
  ID_C2S_RecruitLpTen = 10704;
  ID_S2C_RecruitLpTen = 10705;
  ID_C2S_RecruitJp = 10706;
  ID_S2C_RecruitJp = 10707;
  ID_C2S_RecruitJpTen = 10708;
  ID_S2C_RecruitJpTen = 10709;
  ID_C2S_RecruitJpTw = 10710;
  ID_S2C_RecruitJpTw = 10711;
  ID_C2S_RecruitZy = 10712;
  ID_S2C_RecruitZy = 10713;

  //技能树
  ID_C2S_GetSkillTree = 10800;
  ID_S2C_GetSkillTree = 10801;
  ID_C2S_LearnSkill = 10802;//学习和升级都用这条协议
  ID_S2C_LearnSkill = 10803;
  ID_C2S_ResetSkill= 10804;
  ID_S2C_ResetSkill = 10805;
  ID_C2S_PlaceSkill= 10806;
  ID_S2C_PlaceSkill = 10807;

  //剧情副本
  ID_C2S_GetStoryList = 10900;
  ID_S2C_GetStoryList = 10901;
  ID_C2S_ExecuteBarrier = 10902;
  ID_S2C_ExecuteBarrier = 10903;
  ID_C2S_FastExecuteBarrier = 10904;
  ID_S2C_FastExecuteBarrier = 10905;
  ID_C2S_SanguozhiAwardInfo = 10906;
  ID_S2C_SanguozhiAwardInfo = 10907;
  ID_C2S_FinishSanguozhiAward = 10908;
  ID_S2C_FinishSanguozhiAward = 10909;
  ID_C2S_ResetStoryFastTimeCd = 10910;//重置秒杀时间
  ID_S2C_ResetStoryFastTimeCd = 10911;
  ID_S2C_AddStoryDungeon = 10912;//新增剧情副本
  ID_C2S_SetStoryTag = 10913;
  ID_S2C_SetStoryTag = 10914;
  ID_C2S_GetBarrierAward = 10915;
  ID_S2C_GetBarrierAward = 10916;

  // 武将养成
  ID_C2S_UpgradeKnight = 11000;//武将强化
  ID_S2C_UpgradeKnight = 11001;
  ID_C2S_AdvancedKnight = 11002;//武将升阶
  ID_S2C_AdvancedKnight = 11003;
  ID_C2S_TrainingKnight = 11004;//武将历练
  ID_S2C_TrainingKnight = 11005;
  ID_C2S_SaveTrainingKnight = 11006;//保存武将历练
  ID_S2C_SaveTrainingKnight = 11007;
  ID_C2S_GiveupTrainingKnight = 11008;//放弃武将历练
  ID_S2C_GiveupTrainingKnight = 11009;
  ID_C2S_RecycleKnight = 11010;//武将回收
  ID_S2C_RecycleKnight = 11011;
  ID_C2S_UpgradeKnightHalo = 11012;//升级武将光环
  ID_S2C_UpgradeKnightHalo = 11013;

  ID_C2S_GetKnightAttr = 11014;//获取武将一级属性(仅供开发测试使用)
  ID_S2C_GetKnightAttr = 11015;
  ID_C2S_KnightTransform = 11016;//武将回收
  ID_S2C_KnightTransform = 11017;
  ID_C2S_KnightOrangeToRed = 11018; // 武将橙色升红色
  ID_S2C_KnightOrangeToRed = 11019;


  //装备养成
  ID_C2S_UpgradeEquipment = 12000;//强化装备
  ID_S2C_UpgradeEquipment = 12001;
  ID_C2S_RefiningEquipment = 12002;//精炼装备
  ID_S2C_RefiningEquipment = 12003;
  ID_C2S_RecycleEquipment = 12004;//分解装备
  ID_S2C_RecycleEquipment = 12005;
  ID_C2S_RebornEquipment = 12006;//装备重生
  ID_S2C_RebornEquipment = 12007;
  ID_C2S_UpStarEquipment = 12008; //升星装备
  ID_S2C_UpStarEquipment = 12009;
  ID_C2S_FastRefineEquipment = 12010; //一键神练
  ID_S2C_FastRefineEquipment = 12011;

  //图鉴
  ID_C2S_GetHandbookInfo = 12100;
  ID_S2C_GetHandbookInfo = 12101;

  //叛军
  ID_S2C_GetRebel = 12200;
  ID_C2S_EnterRebelUI = 12201;
  ID_S2C_EnterRebelUI = 12202;
  ID_C2S_AttackRebel = 12203;
  ID_S2C_AttackRebel = 12204;
  ID_C2S_PublicRebel = 12205;
  ID_S2C_PublicRebel = 12206;
  ID_C2S_RebelRank = 12207;
  ID_S2C_RebelRank = 12208;
  ID_C2S_MyRebelRank = 12209;
  ID_S2C_MyRebelRank = 12210;
  ID_C2S_RefreshRebel = 12211;
  ID_S2C_RefreshRebel = 12212;
  ID_C2S_GetExploitAward = 12215;
  ID_S2C_GetExploitAward = 12216;
  ID_C2S_GetExploitAwardType = 12217;
  ID_S2C_GetExploitAwardType = 12218;
  ID_C2S_RefreshRebelShow = 12221;
  ID_S2C_RefreshRebelShow = 12222;

  //宝物系统
  ID_C2S_GetTreasureFragmentRobList = 12300;//获取宝物碎片抢夺列表
  ID_S2C_GetTreasureFragmentRobList = 12301;
  ID_C2S_RobTreasureFragment = 12302;//抢夺宝物碎片
  ID_S2C_RobTreasureFragment = 12303;
  ID_C2S_UpgradeTreasure = 12304;//强化宝物
  ID_S2C_UpgradeTreasure = 12305;
  ID_C2S_RefiningTreasure = 12306;//精炼宝物
  ID_S2C_RefiningTreasure = 12307;
  ID_C2S_ComposeTreasure = 12308;//合成宝物
  ID_S2C_ComposeTreasure = 12309;
  ID_C2S_TreasureFragmentForbidBattle = 12310;//使用免战牌
  ID_S2C_TreasureFragmentForbidBattle = 12311;
  ID_C2S_RecycleTreasure = 12312;//宝物重生
  ID_S2C_RecycleTreasure = 12313;
  ID_C2S_FastRobTreasureFragment = 12314;//5次夺宝
  ID_S2C_FastRobTreasureFragment = 12315;
  ID_C2S_TreasureSmelt = 12316;     //宝物熔炼
  ID_S2C_TreasureSmelt = 12317;
  ID_C2S_TreasureForge = 12318;     //宝物铸造
  ID_S2C_TreasureForge = 12319;
  ID_C2S_OneKeyRobTreasureFragment = 12320;	//一键夺宝
  ID_S2C_OneKeyRobTreasureFragment = 12321;	

  //新手引导
  ID_C2S_GetGuideId = 12400;
  ID_S2C_GetGuideId = 12401;
  ID_C2S_SaveGuideId = 12402;
  ID_S2C_SaveGuideId = 12403;

  //VIP副本
  ID_C2S_GetVip = 12500;
  ID_S2C_GetVip = 12501;
  ID_C2S_ExecuteVipDungeon = 12502;
  ID_S2C_ExecuteVipDungeon = 12503;
  ID_C2S_ResetVipDungeonCount = 12504;
  ID_S2C_ResetVipDungeonCount = 12505;

  // 喝酒
  ID_C2S_LiquorInfo = 12600;
  ID_S2C_LiquorInfo = 12601;
  ID_C2S_Drink = 12602;
  ID_S2C_Drink = 12603;

  //充值相关
  ID_C2S_GetRecharge = 12700;
  ID_S2C_GetRecharge = 12701;
  ID_C2S_UseMonthCard = 12702;
  ID_S2C_UseMonthCard = 12703;
  ID_S2C_RechargeSuccess = 12704;
  ID_C2S_GetRechargeBonus = 12705;
  ID_S2C_GetRechargeBonus= 12706;

  // 关公
  ID_C2S_MrGuanInfo = 12800;
  ID_S2C_MrGuanInfo = 12801;
  ID_C2S_Worship = 12802;
  ID_S2C_Worship = 12803;

  // 登陆奖励
  ID_C2S_LoginRewardInfo = 12900;
  ID_S2C_LoginRewardInfo = 12901;
  ID_C2S_LoginReward = 12902;
  ID_S2C_LoginReward = 12903;

  //每日任务
  ID_C2S_GetDailyMission = 13000;
  ID_S2C_GetDailyMission = 13001;
  ID_C2S_FinishDailyMission = 13002;
  ID_S2C_FinishDailyMission = 13003;
  ID_C2S_GetDailyMissionAward = 13004;
  ID_S2C_GetDailyMissionAward = 13005;
  ID_C2S_ResetDailyMission = 13006;
  ID_S2C_ResetDailyMission = 13007;
  ID_S2C_FlushDailyMission = 13008;

  // 无双
  ID_C2S_WushInfo = 13100;
  ID_S2C_WushInfo = 13101;
  ID_C2S_WushGetBuff = 13102;
  ID_S2C_WushGetBuff = 13103;
  ID_C2S_WushChallenge = 13104;
  ID_S2C_WushChallenge = 13105;
  ID_C2S_WushReset = 13106;
  ID_S2C_WushReset = 13107;
  ID_C2S_WushRankingList = 13108;
  ID_S2C_WushRankingList = 13109;
  ID_C2S_WushApplyBuff = 13110;
  ID_S2C_WushApplyBuff = 13111;
  ID_C2S_WushBuy = 13112;
  ID_S2C_WushBuy = 13113;

  // 目标系统
  ID_C2S_TargetInfo = 13200;
  ID_S2C_TargetInfo = 13201;
  ID_C2S_TargetGetReward = 13202;
  ID_S2C_TargetGetReward = 13203;

  //MAIN GROUTH
  ID_C2S_GetMainGrouthInfo = 13301;
  ID_S2C_GetMainGrouthInfo = 13302;
  ID_C2S_UseMainGrouthInfo = 13303;
  ID_S2C_UseMainGrouthInfo = 13304;

  //名人堂
  ID_C2S_HOF_UIInfo = 13400;
  ID_S2C_HOF_UIInfo = 13401;
  ID_C2S_HOF_Confirm = 13402;
  ID_S2C_HOF_Confirm = 13403;
  ID_C2S_HOF_Sign = 13404;
  ID_S2C_HOF_Sign = 13405;
  ID_C2S_HOF_RankInfo = 13406;
  ID_S2C_HOF_RankInfo = 13407;

  //开服基金
  ID_C2S_GetFundInfo = 13500; //获取全服基金购买信息
  ID_S2C_GetFundInfo = 13501;
  ID_C2S_GetUserFund = 13502; //获取个人基金信息
  ID_S2C_GetUserFund = 13503;
  ID_C2S_BuyFund = 13504; //购买基金
  ID_S2C_BuyFund = 13505;
  ID_C2S_GetFundAward = 13506; //领取基金奖励
  ID_S2C_GetFundAward = 13507;
  ID_C2S_GetFundWeal = 13508; //领取福利奖励
  ID_S2C_GetFundWeal = 13509;

  // 城池挂机
  ID_C2S_CityInfo = 13600;
  ID_S2C_CityInfo = 13601;
  ID_C2S_CityAttack = 13602;
  ID_S2C_CityAttack = 13603;
  ID_C2S_CityPatrol = 13604;
  ID_S2C_CityPatrol = 13605;
  ID_C2S_CityReward = 13606;
  ID_S2C_CityReward = 13607;
  ID_C2S_CityAssist = 13608;
  ID_S2C_CityAssist = 13609;
  ID_C2S_CityCheck = 13610;
  ID_S2C_CityCheck = 13611;
  ID_S2C_CityAssisted = 13612;
  ID_C2S_CityOneKeyReward = 13613;
  ID_S2C_CityOneKeyReward = 13614;
  ID_C2S_CityOneKeyPatrol = 13615;
  ID_S2C_CityOneKeyPatrol = 13616;
  ID_C2S_CityOneKeyPatrolSet = 13617;
  ID_S2C_CityOneKeyPatrolSet = 13618;
  ID_C2S_CityTechUp = 13619;
  ID_S2C_CityTechUp = 13620;

  //可配置活动
  ID_C2S_GetCustomActivityInfo = 13700; //获取可配置活动信息
  ID_S2C_GetCustomActivityInfo = 13701;
  ID_S2C_UpdateCustomActivity = 13702; //更新可配置活动
  ID_S2C_UpdateCustomActivityQuest = 13703; //更新可配置活动任务
  ID_C2S_GetCustomActivityAward = 13704; //领取可配置活动奖励
  ID_S2C_GetCustomActivityAward = 13705;
  ID_S2C_UpdateCustomSeriesActivity = 13706; //更新系列活动
  ID_C2S_GetCustomSeriesActivity = 13707; //获取系列活动
  ID_S2C_GetCustomSeriesActivity = 13708;

  //节日活动
  ID_C2S_GetHolidayEventInfo = 13800;
  ID_S2C_GetHolidayEventInfo = 13801;
  ID_C2S_GetHolidayEventAward = 13802;
  ID_S2C_GetHolidayEventAward = 13803;

  //觉醒相关功能
  ID_C2S_ComposeAwakenItem = 13900; //道具合成
  ID_S2C_ComposeAwakenItem = 13901;
  ID_C2S_PutonAwakenItem = 13902; //装备觉醒道具
  ID_S2C_PutonAwakenItem = 13903;
  ID_C2S_AwakenKnight = 13904; //武将觉醒
  ID_S2C_AwakenKnight = 13905;
  ID_C2S_FastComposeAwakenItem = 13906; //一键道具合成
  ID_S2C_FastComposeAwakenItem = 13907;

  //开服七天活动
  ID_C2S_GetDaysActivityInfo = 14000;
  ID_S2C_GetDaysActivityInfo = 14001;
  ID_C2S_FinishDaysActivity = 14002;
  ID_S2C_FinishDaysActivity = 14003;
  ID_C2S_GetDaysActivitySell = 14004;
  ID_S2C_GetDaysActivitySell = 14005;
  ID_C2S_PurchaseActivitySell = 14006;
  ID_S2C_PurchaseActivitySell = 14007;
  ID_S2C_FlushDaysActivity = 14008;

  ID_C2S_UpgradeDress = 14100;
  ID_S2C_UpgradeDress = 14101;
  ID_S2C_GetDress = 14156;
  ID_C2S_AddFightDress = 14157;
  ID_S2C_AddFightDress = 14158;
  ID_C2S_ClearFightDress = 14159;
  ID_S2C_ClearFightDress = 14160;
  ID_C2S_RecycleDress = 14161;
  ID_S2C_RecycleDress = 14162;

	//微信分享
  ID_C2S_Share = 14200;
  ID_S2C_Share = 14201;
  ID_C2S_GetShareState = 14202;
  ID_S2C_GetShareState = 14203;
  ID_C2S_GetPhoneBindNotice = 14204;
  ID_S2C_GetPhoneBindNotice = 14205;

  //封测充值返还
  ID_C2S_GetRechargeBack = 14300;//查看是否有返还信息
  ID_S2C_GetRechargeBack = 14301;
  ID_C2S_RechargeBackGold = 14302;//领取返还元宝
  ID_S2C_RechargeBackGold = 14303;

  //军团 16000 - 17000 为军团 勿用
  //默认获取
  ID_C2S_GetCorpList = 16000;//获取军团列表
  ID_S2C_GetCorpList = 16001;
  ID_C2S_GetJoinCorpList = 16002;//获取玩家申请军团列表
  ID_S2C_GetJoinCorpList = 16003;
  ID_C2S_GetCorpDetail = 16004;//获取自身帮会信息 刷新自身帮会信息都通过这条
  ID_S2C_GetCorpDetail = 16005;
  ID_C2S_GetCorpMember = 16006;//获取军团成员信息
  ID_S2C_GetCorpMember= 16007;
  ID_C2S_GetCorpHistory= 16008;//获取军团动态
  ID_S2C_GetCorpHistory= 16009;
  ID_S2C_NotifyCorpDismiss = 16010;//军团解散消息
  //军团权利行为
  //以下为所有人的权利
  ID_C2S_CreateCorp = 16100;//创建帮会
  ID_S2C_CreateCorp = 16101;
  ID_C2S_RequestJoinCorp = 16102;//请求加入帮会
  ID_S2C_RequestJoinCorp = 16103;
  ID_C2S_DeleteJoinCorp = 16104;//删除加入帮会请求
  ID_S2C_DeleteJoinCorp = 16105;
  ID_C2S_QuitCorp = 16106;//退出帮会
  ID_S2C_QuitCorp = 16107;
  ID_C2S_SearchCorp = 16108;//查找帮会
  ID_S2C_SearchCorp = 16109;
  ID_C2S_ExchangeLeader = 16110;//弹劾军团长
  ID_S2C_ExchangeLeader = 16111;
  //以下为部分人的权利（军团长 副军团长）
  ID_C2S_ConfirmJoinCorp = 16200;//确认加入帮会
  ID_S2C_ConfirmJoinCorp = 16201;
  ID_C2S_ModifyCorp = 16202;//修改军团信息（内部公告，宣言，标识）
  ID_S2C_ModifyCorp = 16203;
  ID_C2S_DismissCorpMember = 16204;//踢人
  ID_S2C_DismissCorpMember = 16205;
  ID_C2S_GetCorpJoin= 16206;//查看军团申请
  ID_S2C_GetCorpJoin= 16207;
  ID_S2C_MyCorpChangedByCorpLeader = 16208;
  //军团长Only
  ID_C2S_DismissCorp = 16300;//解散帮会
  ID_S2C_DismissCorp = 16301;
  ID_C2S_CorpStaff = 16302;//任命
  ID_S2C_CorpStaff = 16303;
  ID_C2S_SetCorpChapterId = 16304;//设置军团副本ID
  ID_S2C_SetCorpChapterId = 16305;//设置军团副本ID
  //军团祭天
  ID_C2S_GetCorpWorship = 16400;//祭天信息
  ID_S2C_GetCorpWorship = 16401;
  ID_C2S_CorpContribute = 16402;//祭天
  ID_S2C_CorpContribute = 16403;
  ID_C2S_GetCorpContributeAward = 16404;//祭祀领奖
  ID_S2C_GetCorpContributeAward = 16405;
  //军团商店 (特殊)
  ID_C2S_GetCorpSpecialShop = 16500;//获取特殊军团商店信息
  ID_S2C_GetCorpSpecialShop = 16501;
  ID_C2S_CorpSpecialShopping = 16502;//特殊军团商店购买
  ID_S2C_CorpSpecialShopping = 16503;
  //军团副本
  ID_C2S_GetCorpChapter= 16600;//获取军团副本信息
  ID_S2C_GetCorpChapter = 16601;
  ID_C2S_GetCorpDungeonInfo= 16602;//获取军团副本信息
  ID_S2C_GetCorpDungeonInfo = 16603;
  ID_C2S_ExecuteCorpDungeon = 16604;//获取军团副本信息
  ID_S2C_ExecuteCorpDungeon = 16605;
  ID_S2C_FlushCorpDungeon =16606;//有信息刷新 通知
  ID_C2S_GetDungeonAwardList = 16607;//获取军团副本砸蛋信息
  ID_S2C_GetDungeonAwardList = 16608;//
  ID_C2S_GetDungeonAward = 16609;//砸蛋
  ID_S2C_GetDungeonAward = 16610;
  ID_C2S_GetDungeonCorpRank = 16611;//军团排行
  ID_S2C_GetDungeonCorpRank = 16612;
  ID_C2S_GetDungeonCorpMemberRank = 16613;//军团个人排行
  ID_S2C_GetDungeonCorpMemberRank = 16614;
  ID_C2S_GetDungeonAwardCorpPoint = 16615;//获取军团副本通关后的帮贡奖励
  ID_S2C_GetDungeonAwardCorpPoint = 16616;//
  ID_S2C_FlushDungeonAward = 16617;
  ID_C2S_ResetDungeonCount = 16618;//购买副本挑战次数
  ID_S2C_ResetDungeonCount = 16619;//购买副本挑战次数
  ID_C2S_GetCorpChapterRank = 16620;//军团副本总排行
  ID_S2C_GetCorpChapterRank = 16621;
  //跨服群英战
  ID_C2S_GetCorpCrossBattleInfo = 16700;//获取群英战信息
  ID_S2C_GetCorpCrossBattleInfo = 16701;//获取群英战信息
  ID_C2S_ApplyCorpCrossBattle = 16702;//报名//军团长 副军团长才有权限
  ID_S2C_ApplyCorpCrossBattle = 16703;//
  ID_C2S_QuitCorpCrossBattle = 16704;//退出报名
  ID_S2C_QuitCorpCrossBattle = 16705;
  ID_C2S_GetCorpCrossBattleList = 16706;//获取报名列表
  ID_S2C_GetCorpCrossBattleList = 16707;
  ID_C2S_GetCrossBattleEncourage = 16708;//鼓舞信息
  ID_S2C_GetCrossBattleEncourage = 16709;
  ID_C2S_CrossBattleEncourage = 16710;//鼓舞
  ID_S2C_CrossBattleEncourage = 16711;
  ID_C2S_GetCrossBattleField = 16712;//赛区信息
  ID_S2C_GetCrossBattleField = 16713;
  ID_C2S_GetCrossBattleEnemyCorp = 16714;//对方军团信息
  ID_S2C_GetCrossBattleEnemyCorp = 16715;
  ID_C2S_CrossBattleChallengeEnemy= 16718;//挑战
  ID_S2C_CrossBattleChallengeEnemy = 16719;
  ID_C2S_ResetCrossBattleChallengeCD= 16720;//重置挑战CD
  ID_S2C_ResetCrossBattleChallengeCD= 16721;
  ID_C2S_SetCrossBattleFireOn = 16722;//设置集火
  ID_S2C_SetCrossBattleFireOn = 16723;
  ID_C2S_CrossBattleMemberRank = 16724;//军团成员战绩
  ID_S2C_CrossBattleMemberRank = 16725;
  //ID_C2S_CrossBattleFieldReport = 16726;//查看战况
  //ID_S2C_CrossBattleFieldReport = 16727;
  ID_S2C_BroadCastState = 16728;//广播状态
  ID_C2S_GetCorpCrossBattleTime = 16729;//获取时间
  ID_S2C_GetCorpCrossBattleTime = 16730;//获取时间
  ID_S2C_FlushCorpCrossBattleList = 16731;//刷新
  ID_S2C_FlushCorpCrossBattleField  = 16732;//刷新通知分配成功
  ID_S2C_FlushCorpEncourage = 16733;//鼓舞了发消息
  ID_S2C_FlushCorpBattleResult = 16734;//军团战斗发消息
  ID_S2C_FlushFireOn = 16735;//军团集火
  ID_S2C_FlushBattleMemberInfo = 16736;//军团玩家信息
  //军团副本(新版)
  ID_C2S_GetNewCorpChapter= 16800;//获取军团副本信息
  ID_S2C_GetNewCorpChapter = 16801;
  ID_C2S_GetNewCorpDungeonInfo= 16802;//获取军团副本信息
  ID_S2C_GetNewCorpDungeonInfo = 16803;
  ID_C2S_ExecuteNewCorpDungeon = 16804;//获取军团副本信息
  ID_S2C_ExecuteNewCorpDungeon = 16805;
  ID_S2C_FlushNewCorpDungeon =16806;//有信息刷新 通知
  ID_C2S_GetNewDungeonAwardList = 16807;//获取军团副本砸蛋列表
  ID_S2C_GetNewDungeonAwardList = 16808;//
  ID_C2S_GetNewDungeonAward = 16809;//砸蛋
  ID_S2C_GetNewDungeonAward = 16810;
  ID_C2S_GetNewDungeonCorpMemberRank = 16811;//军团个人排行
  ID_S2C_GetNewDungeonCorpMemberRank = 16812;
  ID_S2C_FlushNewDungeonAward = 16813;
  ID_C2S_ResetNewDungeonCount = 16814;//购买副本挑战次数
  ID_S2C_ResetNewDungeonCount = 16815;//购买副本挑战次数
  ID_C2S_GetNewChapterAward = 16816;//获取章节奖励
  ID_S2C_GetNewChapterAward = 16817;//
  ID_C2S_GetNewDungeonAwardHint = 16818;//获取军团副本砸蛋领奖相关
  ID_S2C_GetNewDungeonAwardHint = 16819;//
  ID_C2S_GetNewCorpChapterRank = 16820;//军团副本总排行
  ID_S2C_GetNewCorpChapterRank = 16821;
  ID_C2S_SetNewCorpRollbackChapter = 16822; //设置回退军团副本
  ID_S2C_SetNewCorpRollbackChapter = 16823;

  ID_C2S_GetCorpTechInfo = 16900; //获取军团科技信息
  ID_S2C_GetCorpTechInfo = 16901;
  ID_C2S_DevelopCorpTech = 16902; //研发军团科技
  ID_S2C_DevelopCorpTech = 16903;
  ID_C2S_LearnCorpTech = 16904; // 学习军团科技
  ID_S2C_LearnCorpTech = 16905;
  ID_C2S_CorpUpLevel = 16906; // 军团手动升级
  ID_S2C_CorpUpLevel = 16907;
  ID_S2C_DevelopCorpTechBroadcast = 16908; //军团科技等级变化时广播
  ID_S2C_CorpUpLevelBroadcast = 16909; //军团升级广播

  //精英副本
  ID_C2S_Hard_GetChapterList = 14400;
  ID_S2C_Hard_GetChapterList = 14401;
  ID_C2S_Hard_GetChapterRank = 14402;
  ID_S2C_Hard_GetChapterRank = 14403;
  ID_S2C_Hard_AddStage = 14404;
  ID_C2S_Hard_ExecuteStage  = 14405;
  ID_S2C_Hard_ExecuteStage  = 14406;
  ID_C2S_Hard_FastExecuteStage  = 14407;
  ID_S2C_Hard_FastExecuteStage  = 14408;
  ID_C2S_Hard_FinishChapterBoxRwd  = 14409;//获取箱子奖励
  ID_S2C_Hard_FinishChapterBoxRwd  = 14410;
  ID_C2S_Hard_ResetDungeonExecution = 14411;//重置副本次数
  ID_S2C_Hard_ResetDungeonExecution = 14412;
  ID_S2C_Hard_ExecuteMultiStage = 14413;//副本战斗多战报协议
  ID_C2S_Hard_ExecuteMultiStage = 14414;
  ID_S2C_Hard_FirstEnterChapter = 14415;//第一次进入设置TAG
  ID_C2S_Hard_FirstEnterChapter = 14416;
  ID_S2C_Hard_GetChapterRoit = 14417;//获取精英副本暴动列表
  ID_C2S_Hard_GetChapterRoit = 14418;
  ID_S2C_Hard_FinishChapterRoit = 14419;//解决副本暴动
  ID_C2S_Hard_FinishChapterRoit = 14420;

  // 赌博
  ID_C2S_WheelInfo = 14500;
  ID_S2C_WheelInfo = 14501;
  ID_C2S_PlayWheel = 14502;
  ID_S2C_PlayWheel = 14503;
  ID_C2S_WheelReward = 14504;
  ID_S2C_WheelReward = 14505;
  ID_C2S_WheelRankingList = 14506;
  ID_S2C_WheelRankingList = 14507;

	// vip周礼包
  ID_C2S_VipDiscountInfo = 14600;
  ID_S2C_VipDiscountInfo = 14601;
  ID_C2S_BuyVipDiscount = 14602;
  ID_S2C_BuyVipDiscount = 14603;

  //单人跨服战
  ID_C2S_GetCrossBattleInfo = 14700;//获取跨服战信息
  ID_S2C_GetCrossBattleInfo = 14701;
  ID_C2S_GetCrossBattleTime = 14702;//获取跨服战时间
  ID_S2C_GetCrossBattleTime = 14703;
  //ID_C2S_GetCrossBattleGroup = 14704;//获取跨服战国家信息 //不用了
  //ID_S2C_GetCrossBattleGroup = 14705;
  ID_C2S_SelectCrossBattleGroup = 14706;//选择跨服战国家
  ID_S2C_SelectCrossBattleGroup = 14707;
  ID_C2S_EnterScoreBattle = 14708;//进入积分赛界面
  ID_S2C_EnterScoreBattle = 14709;
  ID_C2S_GetCrossBattleEnemy = 14710; //获取积分赛对手信息
  ID_S2C_GetCrossBattleEnemy = 14711;
  ID_C2S_ChallengeCrossBattleEnemy = 14712;//挑战对手
  ID_S2C_ChallengeCrossBattleEnemy = 14713;
  ID_C2S_GetWinsAwardInfo = 14714;//获取连胜信息
  ID_S2C_GetWinsAwardInfo= 14715;
  ID_C2S_FinishWinsAward = 14716;//获取连胜奖励
  ID_S2C_FinishWinsAward= 14717;
  ID_C2S_GetCrossBattleRank = 14718;//获取跨服战排名
  ID_S2C_GetCrossBattleRank = 14719;
  ID_C2S_CrossCountReset = 14720;//购买相关刷新次数
  ID_S2C_CrossCountReset = 14721;
  ID_S2C_FlushCrossContestScore = 14722;//跨服刷新积分
  ID_S2C_FlushCrossContestRank = 14723;//跨服刷新排名
  //争霸赛
  ID_C2S_GetCrossArenaInfo = 14724;//争霸赛信息
  ID_S2C_GetCrossArenaInfo = 14725;
  ID_C2S_GetCrossArenaInvitation = 14726;//邀请函信息
  ID_S2C_GetCrossArenaInvitation = 14727;
  ID_C2S_GetCrossArenaBetsInfo = 14728;//押注信息
  ID_S2C_GetCrossArenaBetsInfo = 14729;
  ID_C2S_GetCrossArenaBetsList = 14730;//押注列表
  ID_S2C_GetCrossArenaBetsList = 14731;
  ID_C2S_CrossArenaPlayBets = 14732;//押注玩家
  ID_S2C_CrossArenaPlayBets = 14733;
  ID_C2S_GetCrossArenaRankTop = 14734;//前十
  ID_S2C_GetCrossArenaRankTop = 14735;
  ID_C2S_GetCrossArenaRankUser = 14736;//自己周围的玩家信息
  ID_S2C_GetCrossArenaRankUser = 14737;
  ID_C2S_CrossArenaRankChallenge = 14738;//挑战
  ID_S2C_CrossArenaRankChallenge = 14739;//
  ID_C2S_CrossArenaCountReset = 14740;//购买相关刷新次数
  ID_S2C_CrossArenaCountReset = 14741;
  ID_C2S_GetCrossArenaBetsAward = 14742;//获取押注奖励
  ID_S2C_GetCrossArenaBetsAward = 14743;
  ID_C2S_CrossArenaServerAwardInfo = 14744;//获取全服奖励信息
  ID_S2C_CrossArenaServerAwardInfo = 14745;
  ID_C2S_FinishCrossArenaServerAward = 14746;//完成全服奖励
  ID_S2C_FinishCrossArenaServerAward = 14747;
  ID_C2S_FinishCrossArenaBetsAward = 14748;//完成押注奖励
  ID_S2C_FinishCrossArenaBetsAward = 14749;
  ID_C2S_CrossArenaAddBets = 14750;//押注
  ID_S2C_CrossArenaAddBets = 14751;
  ID_C2S_GetCrossUserDetail = 14752;//获取跨服玩家信息
  ID_S2C_GetCrossUserDetail = 14753;

	//打富翁活动
  ID_C2S_RichInfo = 14800;
  ID_S2C_RichInfo = 14801;
  ID_C2S_RichMove = 14804;
  ID_S2C_RichMove = 14805;
  ID_C2S_RichBuy = 14806;
  ID_S2C_RichBuy = 14807;
  ID_C2S_RichReward = 14808;
  ID_S2C_RichReward = 14809;
  ID_C2S_RichRankingList = 14810;
  ID_S2C_RichRankingList = 14811;

  //限时副本
  ID_C2S_GetTimeDungeonList = 14900; //取限时副本活动列表
  ID_S2C_GetTimeDungeonList = 14901;
  ID_S2C_FlushTimeDungeonList = 14902; //推送限时副本活动列表
  ID_C2S_GetTimeDungeonInfo = 14903; //取限时副本活动信息
  ID_S2C_GetTimeDungeonInfo = 14904;
  ID_C2S_AddTimeDungeonBuff = 14905; //鼓舞
  ID_S2C_AddTimeDungeonBuff = 14906;
  ID_C2S_AttackTimeDungeon = 14907; //挑战
  ID_S2C_AttackTimeDungeon = 14908;

  //动态代码ID
  ID_C2S_GetCodeId = 15000;
  ID_S2C_GetCodeId = 15001;
  ID_C2S_GetCode = 15002;
  ID_S2C_GetCode= 15003;
  ID_C2S_SetCDLevel = 15004;
  ID_S2C_SetCDLevel= 15005;
	
	//叛军BOSS
	ID_C2S_EnterRebelBossUI = 15101;
	ID_S2C_EnterRebelBossUI = 15102;
	//ID_C2S_RebelBossEncourage = 15103;
	//ID_S2C_RebleBossEncourage = 15104;
	ID_C2S_SelectAttackRebelBossGroup = 15105;
	ID_S2C_SelectAttackRebelBossGroup = 15106;
	ID_C2S_ChallengeRebelBoss = 15107;
	ID_S2C_ChallengeRebelBoss = 15108;
	ID_C2S_RebelBossRank = 15109;
	ID_S2C_RebelBossRank = 15110;
	ID_C2S_RebelBossAwardInfo = 15111;
	ID_S2C_RebelBossAwardInfo = 15112;
	ID_C2S_RebelBossAward = 15113;
	ID_S2C_RebelBossAward = 15114;
	ID_C2S_RefreshRebelBoss = 15115;
	ID_S2C_RefreshRebelBoss = 15116;
	ID_C2S_PurchaseAttackCount = 15117;
	ID_S2C_PurchaseAttackCount = 15118;
	ID_C2S_GetRebelBossReport = 15119;
	ID_S2C_GetRebelBossReport = 15120;
	ID_C2S_RebelBossCorpAwardInfo = 15121;
	ID_S2C_RebelBossCorpAwardInfo = 15122;
	ID_C2S_FlushBossACountTime = 15123;
	ID_S2C_FlushBossACountTime = 15124;

	ID_C2S_GetBlackcardWarning = 15200; //黑卡警告
	ID_S2C_GetBlackcardWarning = 15201; //黑卡警告

	//laxin
	ID_C2S_GetSpreadId = 15300;
	ID_S2C_GetSpreadId = 15301;
	 //invited req register
	ID_C2S_RegisterId = 15302;
	ID_S2C_RegisterId = 15303;

	//laxin 老玩家领奖
	ID_C2S_InvitorGetRewardInfo = 15304;
	ID_S2C_InvitorGetRewardInfo = 15305;
	ID_C2S_InvitorDrawLvlReward = 15306;
	ID_S2C_InvitorDrawLvlReward = 15307;
	ID_C2S_InvitorDrawScoreReward = 15308;
	ID_S2C_InvitorDrawScoreReward = 15309;
	//laxin  新玩家领奖
	ID_C2S_InvitedDrawReward = 15310;
	ID_S2C_InvitedDrawReward = 15311;
	ID_C2S_InvitedGetDrawReward = 15312;
	ID_S2C_InvitedGetDrawReward = 15313;

	ID_C2S_QueryRegisterRelation = 15314;
	ID_S2C_QueryRegisterRelation = 15315;
    //新玩家得到老玩家name
	ID_C2S_GetInvitorName = 15316;
	ID_S2C_GetInvitorName = 15317;

  //限时优惠
  ID_C2S_ShopTimeInfo = 15400;			//获取主界面信息
  ID_S2C_ShopTimeInfo = 15401;
  ID_C2S_ShopTimeRewardInfo = 15402;    //获取全服福利信息
  ID_S2C_ShopTimeRewardInfo = 15403;	
  ID_C2S_ShopTimeGetReward = 15404;		//领取全服福利
  ID_S2C_ShopTimeGetReward = 15405;
  ID_S2C_ShopTimePurchase = 15406;		//购买成功返回信息
  ID_C2S_ShopTimeStartTime = 15407;		//请求开服时间
  ID_S2C_ShopTimeStartTime = 15408;		

  // vip日礼包
  ID_C2S_VipDailyInfo = 15500;
  ID_S2C_VipDailyInfo = 15501;
  ID_C2S_BuyVipDaily = 15502;
  ID_S2C_BuyVipDaily = 15503;

  //抢粮草
  ID_C2S_GetUserRice = 15600; //获取玩家粮草信息
  ID_S2C_GetUserRice = 15601;
  ID_S2C_UpdateUserRice = 15602; //更新客服端玩家粮草信息(包括对手信息)
  ID_C2S_FlushRiceRivals = 15603; //刷新对手
  ID_S2C_FlushRiceRivals = 15604;
  ID_C2S_RobRice = 15605; //抢粮
  ID_S2C_RobRice = 15606;
  ID_S2C_ChangeUserRice = 15607; //更新客户端玩家粮草数据
  ID_C2S_GetRiceEnemyInfo = 15608; //获取仇人列表
  ID_S2C_GetRiceEnemyInfo = 15609;
  ID_C2S_RevengeRiceEnemy = 15610; //复仇
  ID_S2C_RevengeRiceEnemy = 15611;
  ID_C2S_GetRiceAchievement = 15612; //获得成就
  ID_S2C_GetRiceAchievement = 15613;
  ID_C2S_GetRiceRankList = 15614; //获取排行榜
  ID_S2C_GetRiceRankList = 15615;
  ID_C2S_GetRiceRankAward = 15616; //获取排行奖励
  ID_S2C_GetRiceRankAward = 15617;
  ID_C2S_BuyRiceToken = 15618; //获取排行奖励
  ID_S2C_BuyRiceToken = 15619;
  ID_S2C_FlushRiceRank = 15620; //推送粮草排名
  // GM 后台推送消息
  ID_C2S_PushSingleInfo = 15621;
  ID_S2C_PushSingleInfo = 15622;
  ID_C2S_GmChangeName   = 15623;  //后台改名,只修改跨服

  //月基金
  ID_C2S_GetMonthFundBaseInfo = 15700;
  ID_S2C_GetMonthFundBaseInfo = 15701;
  ID_C2S_GetMonthFundAwardInfo = 15702;
  ID_S2C_GetMonthFundAwardInfo = 15703;
  ID_C2S_GetMonthFundAward = 15704;
  ID_S2C_GetMonthFundAward = 15705;

  // 限时抽卡
  ID_C2S_ThemeDropZY			= 15750;
  ID_S2C_ThemeDropZY			= 15751;
  ID_C2S_ThemeDropAstrology		= 15752;
  ID_S2C_ThemeDropAstrology		= 15753;
  ID_C2S_ThemeDropExtract		= 15754;
  ID_S2C_ThemeDropExtract		= 15755;

  // 新日常副本
  ID_C2S_DungeonDailyInfo		= 15776;
  ID_S2C_DungeonDailyInfo		= 15777;
  ID_C2S_DungeonDailyChallenge  = 15778;
  ID_S2C_DungeonDailyChallenge  = 15779;

  //SpeXialScore(for tw)
  ID_C2S_GetSpeXialScoreInfo = 15800; //获取积分信息
  ID_S2C_GetSpeXialScoreInfo = 15801;
  ID_C2S_GetSpeXialScoreRank = 15802; //获取积分排名信息
  ID_S2C_GetSpeXialScoreRank = 15803;
  ID_C2S_GetSpeXialScoreAward = 15804; //获取积分成就奖励
  ID_S2C_GetSpeXialScoreAward = 15805;
  //社交账号绑定奖励(for sm)
  ID_C2S_GetAccountBindingInfo = 15810; //获取账号绑定信息
  ID_S2C_GetAccountBindingInfo = 15811;
  ID_C2S_GetAccountBindingAward = 15812; //获得绑定奖励
  ID_S2C_GetAccountBindingAward = 15813;

	//无双博士
  ID_C2S_WushBossInfo = 15900;
  ID_S2C_WushBossInfo = 15901;
  ID_C2S_WushBossChallenge = 15902;
  ID_S2C_WushBossChallenge = 15903;
  ID_C2S_WushBossBuy = 15904;
  ID_S2C_WushBossBuy = 15905;

  //限时团购
  ID_C2S_GetGroupBuyConfig	= 17000;		//获取配置
  ID_S2C_GetGroupBuyConfig	= 17001;
  ID_C2S_GetGroupBuyMainInfo	= 17002;		//主界面
  ID_S2C_GetGroupBuyMainInfo	= 17003;
  ID_C2S_GetGroupBuyRanking	= 17004;		//排行榜
  ID_S2C_GetGroupBuyRanking	= 17005;
  ID_C2S_GetGroupBuyTaskAwardInfo = 17006;	//任务奖励
  ID_S2C_GetGroupBuyTaskAwardInfo = 17007;
  ID_C2S_GetGroupBuyTaskAward	= 17008;	//领取奖励
  ID_S2C_GetGroupBuyTaskAward	= 17009;
  ID_C2S_GetGroupBuyEndInfo		= 17010;	//结束界面
  ID_S2C_GetGroupBuyEndInfo		= 17011;
  ID_C2S_GetGroupBuyRankAward	= 17012;	//排行奖励
  ID_S2C_GetGroupBuyRankAward	= 17013;
  ID_C2S_GroupBuyPurchaseGoods	= 17014;	//购买商品
  ID_S2C_GroupBuyPurchaseGoods	= 17015;
  ID_C2S_GetGroupBuyTimeInfo	= 17016;	//活动时间配置
  ID_S2C_GetGroupBuyTimeInfo	= 17017;

  //新手光环
  ID_C2S_RookieInfo = 17100;
  ID_S2C_RookieInfo = 17101;
  ID_C2S_GetRookieReward = 17102;
  ID_S2C_GetRookieReward = 17103;

  // 人物头像框设置
  ID_C2S_SetPictureFrame = 17150;
  ID_S2C_SetPictureFrame = 17151;

  //百战沙场
  ID_C2S_GetBattleFieldInfo = 17200;
  ID_S2C_GetBattleFieldInfo = 17201;
  ID_C2S_BattleFieldDetail = 17202;
  ID_S2C_BattleFieldDetail = 17203;
  ID_C2S_ChallengeBattleField = 17204;
  ID_S2C_ChallengeBattleField = 17205;
  ID_C2S_BattleFieldAwardInfo = 17206;
  ID_S2C_BattleFieldAwardInfo = 17207;
  ID_C2S_GetBattleFieldAward = 17208;
  ID_S2C_GetBattleFieldAward = 17209;
  ID_C2S_BattleFieldShopInfo = 17210;
  ID_S2C_BattleFieldShopInfo = 17211;
  ID_C2S_BattleFieldShopRefresh = 17212;
  ID_S2C_BattleFieldShopRefresh = 17213;
  ID_C2S_GetBattleFieldRank = 17214;
  ID_S2C_GetBattleFieldRank = 17215;

  // 奇门八卦活动
  ID_C2S_TrigramInfo = 17300;
  ID_S2C_TrigramInfo = 17301;
  ID_C2S_TrigramPlay = 17302;
  ID_S2C_TrigramPlay = 17303;
  ID_C2S_TrigramPlayAll = 17304;
  ID_S2C_TrigramPlayAll = 17305;
  ID_C2S_TrigramRefresh = 17306;
  ID_S2C_TrigramRefresh = 17307;
  ID_C2S_TrigramReward = 17308;
  ID_S2C_TrigramReward = 17309;

  ID_C2S_GetTrigramRank = 17310;
  ID_S2C_GetTrigramRank = 17311;

  // 长假活动 中秋国庆
  ID_C2S_GetSpecialHolidayActivity = 17400;
  ID_S2C_GetSpecialHolidayActivity = 17401;
  ID_S2C_UpdateSpecialHolidayActivity = 17402;
  ID_C2S_GetSpecialHolidayActivityReward = 17403;
  ID_S2C_GetSpecialHolidayActivityReward = 17404;
  ID_C2S_GetSpecialHolidaySales = 17405;
  ID_S2C_GetSpecialHolidaySales = 17406;
  ID_C2S_BuySpecialHolidaySale = 17407;
  ID_S2C_BuySpecialHolidaySale = 17408;

  // vip周商店
  ID_C2S_VipWeekShopInfo = 17500;
  ID_S2C_VipWeekShopInfo = 17501;
  ID_C2S_VipWeekShopBuy = 17502;
  ID_S2C_VipWeekShopBuy = 17503;

  //资料片副本
  ID_C2S_GetExpansiveDungeonChapterList = 17600;
  ID_S2C_GetExpansiveDungeonChapterList = 17601;
  ID_C2S_ExcuteExpansiveDungeonStage = 17602;
  ID_S2C_ExcuteExpansiveDungeonStage = 17603;
  ID_C2S_GetExpansiveDungeonChapterReward = 17604;
  ID_S2C_GetExpansiveDungeonChapterReward = 17605;
  ID_C2S_FirstEnterExpansiveDungeonChapter = 17606;
  ID_S2C_FirstEnterExpansiveDungeonChapter = 17607;
  ID_S2C_AddExpansiveDungeonNewStage = 17608;
  ID_C2S_PurchaseExpansiveDungeonShopItem = 17609;
  ID_S2C_PurchaseExpansiveDungeonShopItem = 17610;


  //宠物 18000 - 18099 为宠物
  ID_S2C_GetPet = 18000;
  ID_C2S_PetUpLvl = 18001;
  ID_S2C_PetUpLvl = 18002;
  ID_C2S_PetUpStar = 18003;
  ID_S2C_PetUpStar = 18004;
  ID_C2S_PetUpAddition = 18005;    //宠物神练
  ID_S2C_PetUpAddition = 18006;
  ID_C2S_ChangeFightPet = 18007;    //宠物上阵
  ID_S2C_ChangeFightPet = 18008;
  ID_C2S_RecyclePet = 18009;		//回收宠物（分解和重生）
  ID_S2C_RecyclePet = 18010;
  ID_C2S_PetFightValue = 18011;
  ID_S2C_PetFightValue = 18012;
  ID_C2S_GetPetProtect = 18013;
  ID_S2C_GetPetProtect = 18014;
  ID_C2S_SetPetProtect = 18015;
  ID_S2C_SetPetProtect = 18016;

  //跨服夺帅
  ID_C2S_GetCrossPvpSchedule = 19000;	// 拉取所有配置信息
  ID_S2C_GetCrossPvpSchedule = 19001;
  ID_C2S_GetCrossPvpBaseInfo = 19002;	// 拉取基本信息，round 和state主控
  ID_S2C_GetCrossPvpBaseInfo = 19003;
  ID_C2S_GetCrossPvpScheduleInfo = 19004; //每个战场信息（等级 人数...）
  ID_S2C_GetCrossPvpScheduleInfo = 19005;
  ID_C2S_ApplyCrossPvp = 19006;			//跨服夺帅报名
  ID_S2C_ApplyCrossPvp = 19007;
  //ID_C2S_GetAtcAndDefCrossPvp = 19008;  //鼓舞信息
  //ID_S2C_GetAtcAndDefCrossPvp = 19009;
  ID_C2S_ApplyAtcAndDefCrossPvp = 19010;//鼓舞
  ID_S2C_ApplyAtcAndDefCrossPvp = 19011;
  ID_C2S_GetCrossPvpRole = 19012;	//获取角色信息 (感觉没什么用啊)
  ID_S2C_GetCrossPvpRole = 19013;	
  ID_C2S_GetCrossPvpArena = 19015;		//获取跨服战坑位信息
  ID_S2C_GetCrossPvpArena = 19016;
  ID_C2S_GetCrossPvpRank = 19017;		//获取排行榜
  ID_S2C_GetCrossPvpRank = 19018;
  ID_C2S_CrossPvpBattle = 19019;		//攻打坑位
  ID_S2C_CrossPvpBattle = 19020;		
  ID_S2C_FlushCrossPvpArena = 19021;	//推送坑位变化信息同房间玩家
  ID_S2C_FlushCrossPvpSpecific = 19022;	//推送坑位变化信息给坑位上原玩家
  ID_S2C_FlushCrossPvpScore = 19023;	//推送积分变化
  ID_C2S_GetCrossPvpDetail = 19024;		//玩家战斗信息
  ID_S2C_GetCrossPvpDetail = 19025;
  ID_C2S_CrossPvpGetAward = 19026;		//领取排行奖励
  ID_S2C_CrossPvpGetAward = 19027;
  ID_C2S_CrossWaitInit = 19028;			//获取等待界面信息
  ID_S2C_CrossWaitInit = 19029;	
  ID_C2S_CrossWaitRank = 19030;			//获取上一轮的排行榜
  ID_S2C_CrossWaitRank = 19031;
  ID_C2S_CrossWaitFlower = 19032;		//送鲜花扔鸡蛋
  ID_S2C_CrossWaitFlower = 19033;	
  ID_C2S_CrossWaitFlowerRank = 19034;	//鲜花鸡蛋榜
  ID_S2C_CrossWaitFlowerRank = 19035;	
  ID_C2S_CrossWaitFlowerAward = 19036;	//投注奖励
  ID_S2C_CrossWaitFlowerAward = 19037;	
  ID_C2S_CrossWaitInitFlowerInfo = 19038; //一轮过后鲜花鸡蛋信息
  ID_S2C_CrossWaitInitFlowerInfo = 19039;
  ID_C2S_GetCrossPvpOb= 19040;//获取OB信息
  ID_S2C_GetCrossPvpOb = 19041;

  //弹幕系统
  ID_C2S_GetBulletScreenInfo = 20000;	//拉取弹幕信息
  ID_S2C_GetBulletScreenInfo = 20001;	
  ID_C2S_SendBulletScreenInfo = 20002;	//发送弹幕
  ID_S2C_SendBulletScreenInfo = 20003;	//发送弹幕
  ID_S2C_FlushBulletScreen = 20004;	

  // 组队pvp
  ID_C2S_TeamPVPStatus = 21000; // 组队pvp, 查询状态
  ID_S2C_TeamPVPStatus = 21001; // 组队pvp，状态推送
  ID_C2S_TeamPVPCreateTeam = 21002; // 组队pvp，创建队伍
  ID_S2C_TeamPVPCreateTeam = 21003;
  ID_C2S_TeamPVPJoinTeam = 21004; // 组队pvp，加入队伍
  ID_S2C_TeamPVPJoinTeam = 21005;
  ID_C2S_TeamPVPLeave = 21008; //退出组队，及组队匹配
  ID_S2C_TeamPVPLeave = 21009;
  ID_C2S_TeamPVPChangePosition = 21010; // 队长换位置
  ID_S2C_TeamPVPChangePosition = 21011;
  ID_C2S_TeamPVPKickTeamMember = 21012; // 队长踢人
  ID_S2C_TeamPVPKickTeamMember = 21013;
  ID_C2S_TeamPVPSetTeamOnlyInvited = 21014; // 队长设置房间是否开放
  ID_S2C_TeamPVPSetTeamOnlyInvited = 21015;
  ID_C2S_TeamPVPInvite = 21016; // 邀请
  ID_S2C_TeamPVPInvite = 21017;
  ID_S2C_TeamPVPBeInvited = 21018; // 被邀请
  ID_C2S_TeamPVPInvitedJoinTeam = 21019; // 持邀请卡 加入队伍
  ID_S2C_TeamPVPInvitedJoinTeam = 21020;
  ID_S2C_TeamPVPInviteCanceled = 21021;
  ID_C2S_TeamPVPInviteNPC = 21022; //一键邀请
  ID_S2C_TeamPVPInviteNPC = 21023;
  ID_C2S_TeamPVPAgreeBattle = 21024; // 组员准备好出战
  ID_S2C_TeamPVPAgreeBattle = 21025;
  ID_C2S_TeamPVPMatchOtherTeam = 21026; //队长 出战，组队完成，匹配其他队伍
  ID_S2C_TeamPVPMatchOtherTeam = 21027;
  ID_C2S_TeamPVPStopMatch = 21028; // 队长取消 匹配其他队伍
  ID_S2C_TeamPVPStopMatch = 21029;
  ID_S2C_TeamPVPBattleResult = 21030; //战斗结果
  ID_C2S_TeamPVPHistoryBattleReport = 21031; // 获取历史战报
  ID_S2C_TeamPVPHistoryBattleReport = 21032;
  ID_S2C_TeamPVPHistoryBattleReportEnd = 21033;
  ID_C2S_TeamPVPBattleTeamChange = 21034; //通知服务器布阵变化
  ID_S2C_TeamPVPBattleTeamChange = 21035;

  ID_S2C_TeamPVPCrossServerLost = 21040; // 跨服服务器挂了

  ID_C2S_TeamPVPGetRank = 21041; // 组队pvp排行版
  ID_S2C_TeamPVPGetRank = 21042;
  ID_C2S_TeamPVPGetUserInfo = 21043; // 组队pvp玩家荣誉积分等信息
  ID_S2C_TeamPVPGetUserInfo = 21044;
  ID_C2S_TeamPVPBuyAwardCnt = 21045; // 组队pvp，买奖励次数
  ID_S2C_TeamPVPBuyAwardCnt = 21046;
  ID_C2S_TeamPVPAcceptInvite = 21047; // 组队pvp，是否接受邀请
  ID_S2C_TeamPVPAcceptInvite = 21048;
  ID_C2S_TeamPVPPopChat = 21049; // 组队pvp，气泡聊天
  ID_S2C_TeamPVPPopChat = 21050;

  //商店标签,方便玩家购买合成所需材料
  ID_C2S_GetShopTag = 21100;
  ID_S2C_GetShopTag = 21101;
  ID_C2S_AddShopTag = 21102;
  ID_S2C_AddShopTag = 21103;
  ID_C2S_DelShopTag = 21104;
  ID_S2C_DelShopTag = 21105;

  //老玩家回归
  ID_C2S_GetOlderPlayerInfo = 21200;
  ID_S2C_GetOlderPlayerInfo = 21201;
  ID_C2S_GetOlderPlayerVipAward = 21202;
  ID_S2C_GetOlderPlayerVipAward = 21203;
  ID_C2S_GetOlderPlayerLevelAward = 21204;
  ID_S2C_GetOlderPlayerLevelAward = 21205;
  ID_C2S_GetOlderPlayerVipExp = 21206;
  ID_S2C_GetOlderPlayerVipExp = 21207;

  // 充值翻牌
  ID_C2S_RCardInfo = 21300;
  ID_S2C_RCardInfo = 21301;
  ID_C2S_PlayRCard = 21302;
  ID_S2C_PlayRCard = 21303;
  ID_C2S_ResetRCard = 21304;
  ID_S2C_ResetRCard = 21305;

  ID_C2S_SetClothSwitch = 21311;
  ID_S2C_SetClothSwitch = 21312;

  ID_C2S_GetDays7CompInfo = 21316;
  ID_S2C_GetDays7CompInfo = 21317;
  ID_C2S_GetDays7CompAward = 21318;
  ID_S2C_GetDays7CompAward = 21319;

  ID_C2S_GetKsoul = 21400;//获取将灵信息
  ID_S2C_GetKsoul = 21401;
  ID_C2S_RecycleKsoul = 21402;//回收将灵
  ID_S2C_RecycleKsoul = 21403;
  ID_C2S_ActiveKsoulGroup = 21404;//激活阵图
  ID_S2C_ActiveKsoulGroup = 21405;
  ID_C2S_ActiveKsoulTarget = 21406;//激活成就
  ID_S2C_ActiveKsoulTarget = 21407;
  ID_C2S_SummonKsoul = 21408;//点将
  ID_S2C_SummonKsoul = 21409;
  ID_C2S_SummonKsoulExchange = 21410;//点将奇遇
  ID_S2C_SummonKsoulExchange  = 21411;
  ID_C2S_GetCommonRank =21412;//通用排行榜
  ID_S2C_GetCommonRank =21413;

  ID_C2S_KsoulShopInfo = 21450;
  ID_S2C_KsoulShopInfo = 21451;
  ID_C2S_KsoulShopBuy = 21452;
  ID_S2C_KsoulShopBuy = 21453;
  ID_C2S_KsoulShopRefresh = 21454;
  ID_S2C_KsoulShopRefresh = 21455;
  ID_C2S_KsoulDungeonInfo = 21456;
  ID_S2C_KsoulDungeonInfo = 21457;
  ID_C2S_KsoulDungeonRefresh = 21458;
  ID_S2C_KsoulDungeonRefresh = 21459;
  ID_C2S_KsoulDungeonChallenge = 21460;
  ID_S2C_KsoulDungeonChallenge = 21461;
  ID_C2S_KsoulSetFightBase = 21462;
  ID_S2C_KsoulSetFightBase = 21463;

  //新马服FB分享协议
  ID_C2S_ShareFriendAwardInfo = 21470;
  ID_S2C_ShareFriendAwardInfo = 21471;
  ID_C2S_ShareFriendGetAward = 21472;
  ID_S2C_ShareFriendGetAward = 21473;

  // 招财
  ID_C2S_FortuneInfo	= 21480;
  ID_S2C_FortuneInfo	= 21481;
  ID_C2S_FortuneBuySilver = 21482;
  ID_S2C_FortuneBuySilver = 21483;
  ID_C2S_FortuneGetBox	= 21484;
  ID_S2C_FortuneGetBox	= 21485;
  
    //终身卡活动
  ID_C2S_GetLifeCardInfo  = 21490;
  ID_S2C_GetLifeCardInfo  = 21491;
  ID_C2S_CheckLifeCardPay = 21492;
  ID_S2C_CheckLifeCardPay = 21493;

}


//心跳 10s
message C2S_KeepAlive {
}

message S2C_KeepAlive {
}

//登陆
message C2S_Login {
  required string token = 1;
  required uint64 sid = 2;
  required string channel_id = 3;
  required string device_id = 4;
  optional uint32 version = 5;
}

message S2C_Login {
  required uint32 ret = 1;
  optional uint32 uid = 2;
  optional uint32 sid = 3; //gateway client id
  optional string yzuid = 4;
  optional string platform_uid = 5;
  optional uint32 version = 6;
}

//创建角色
message C2S_Create {
  required string name = 1;
  required uint32 type = 2;
}

message S2C_Create {
  required uint32 ret = 1;
  optional uint32 uid = 2;
  optional uint32 sid = 3;
}

message C2S_Offline {
}

message C2S_GetServerTime {
}

message S2C_GetServerTime {
  required uint32 time = 1;
  required uint32 zone = 2;
}



//刷新玩家信息
message C2S_Flush {
  required bool user = 1;
  required bool knight = 2;
  required bool item = 3;
  required bool fragment = 4;
  required bool mail = 5;
  required bool gift_mail = 6;
  required bool equipment = 7;
  required bool treasure_fragment = 8;
  required bool treasure = 9;
  required bool fight_resource = 10;
  required bool fight_knight = 11;
  optional bool vip = 12;
  optional bool recharge = 13;
  optional bool chapter = 14;
  optional bool main_grouth = 15;
  optional bool hof_points = 16;
  optional bool dress = 17;
  optional bool awaken_item = 18;
  optional bool pet = 19;
  optional bool ksoul = 20;
}

message S2C_Flush {
  required uint32 ret = 1;
  required bool user = 2;
  required bool knight = 3;
  required bool item = 4;
  required bool fragment = 5;
  required bool mail = 6;
  required bool gift_mail = 7;
  required bool equipment = 8;
  required bool treasure_fragment = 9;
  required bool treasure = 10;
  required bool fight_resource = 11;
  required bool fight_knight = 12;
  optional bool vip =13;
  optional bool recharge = 14;
  optional bool chapter = 15;
  optional bool main_grouth = 16;
  optional bool hof_points = 17;
  optional bool dress = 18;
  optional bool awaken_item = 19;
  optional bool pet = 20;
  optional bool ksoul = 21;
}

//玩家基础信息
message S2C_GetUser {
  required User user = 1;
}

message S2C_GetKnight {
  repeated Knight knights = 1;
}

message S2C_GetPet {
  repeated Pet pets = 1;
  optional uint32 fight_pet = 2;
}
message S2C_GetEquipment {
  repeated Equipment equipments = 1;
}

message S2C_GetDress {
  repeated Dress dresses = 1;
  optional uint32 dress_id = 2;
}

message S2C_GetTreasure {
  repeated Treasure treasures = 1;
}

message S2C_GetItem {
  repeated Item items = 1;
}

message S2C_GetAwakenItem {
  repeated AwakenItem awaken_items = 1;
}

message S2C_GetFragment {
  repeated Fragment fragments = 1;
}

message S2C_GetTreasureFragment {
  repeated TreasureFragment treasure_fragments = 1;
}

message S2C_HOF_Points {
  required uint32 points = 1;
}

message FightEquipment {
  required uint32 slot_1 = 1;
  required uint32 slot_2 = 2;
  required uint32 slot_3 = 3;
  required uint32 slot_4 = 4;
}

message FightTreasure {
  required uint32 slot_1 = 1;
  required uint32 slot_2 = 2;
}

message S2C_FightResource {
  repeated FightEquipment fight_equipments = 1;
  repeated FightTreasure fight_treasures = 2;
}

message C2S_AddFightEquipment {
  required uint32 team = 1;
  required uint32 pos = 2;
  required uint32 slot = 3;
  required uint32 id = 4; //装备ID
}

message S2C_AddFightEquipment {
  required uint32 team = 1;
  required uint32 pos = 2;
  required uint32 slot = 3;
  required uint32 id = 4; //装备ID
  required uint32 ret = 5;
  optional uint32 old_id = 6; //之前的装备ID
}

message C2S_ClearFightEquipment {
  required uint32 team = 1;
  required uint32 pos = 2;
  required uint32 slot = 3;
}

message S2C_ClearFightEquipment {
  required uint32 team = 1;
  required uint32 pos = 2;
  required uint32 slot = 3;
  required uint32 ret = 4;
  optional uint32 old_id = 5;
}

message C2S_AddFightDress {
  required uint32 id = 1; //装备ID
}

message S2C_AddFightDress {
  required uint32 ret = 1;
  required uint32 id = 2; //装备ID
  optional uint32 old_id = 3; //之前的装备ID
}

message C2S_ClearFightDress {
}

message S2C_ClearFightDress {
  required uint32 ret = 1;
  optional uint32 old_id = 2; //之前的装备ID
}
message C2S_AddFightTreasure {
  required uint32 team = 1;
  required uint32 pos = 2;
  required uint32 slot = 3;
  required uint32 id = 4; //宝物ID
}

message S2C_AddFightTreasure {
  required uint32 team = 1;
  required uint32 pos = 2;
  required uint32 slot = 3;
  required uint32 id = 4; //宝物ID
  required uint32 ret = 5;
  optional uint32 old_id = 6; //之前的宝物ID
}

message C2S_ClearFightTreasure {
  required uint32 team = 1;
  required uint32 pos = 2;
  required uint32 slot = 3;
}

message S2C_ClearFightTreasure {
  required uint32 team = 1;
  required uint32 pos = 2;
  required uint32 slot = 3;
  required uint32 ret = 4;
  optional uint32 old_id = 5;
}


message C2S_RecycleTreasure {
  required uint32 treasure_id = 1;
  optional uint32 type = 2; // 0:重生 1:重生预览
}

message S2C_RecycleTreasure {
  required uint32 ret = 1;
  repeated Award item = 2; // 返还物品
  optional uint32 type = 3; // 0:重生 1:重生预览
}


// 聊天
// 发送聊天消息请求
message C2S_ChatRequest {
  required uint32 channel = 1;
  required string content = 2;
  optional string reciver = 3;
}

// 返回聊天消息结果
message S2C_ChatRequest {
  required uint32 ret = 1;
}

// 收到聊天消息
message S2C_Chat {
  required uint32 channel = 1;
  required string sender = 2;
  required uint32 senderId = 3;
  required uint32 kid = 4;     // 头像 knight的baseId
  required string content = 5;
  required uint32 vip = 6;
  required uint32 dress_id = 7;
  optional uint32 title_id = 8;
	optional uint32 level = 9; //发送聊天消息玩家的等级
  optional uint32 fid	= 10; // 头像框ID
  optional uint64 sender_sid = 11;
  optional uint64 team_id = 12;
  optional uint32 clid = 13;
  optional uint32 cltm = 14;
  optional bool   clop = 15;
}

// 收到公告消息(走马灯)
message S2C_Notify {
  required uint32 template_id = 1;  // 模板id
  required string name = 2;  // 用户名 (策划确认不会在同一条走马灯出现两个玩家名)
  required uint32 base_id = 3;  // 主角base_id
  repeated uint32 template_args = 4;  // 模板参数

//模板参数:
//1: [1-战将\2-战将十连抽\3-神将\4-神将十连抽][武将base_id列表...]
//2: [无]
//3: [武将base_id]
//4: [层数]
//5: [副本星数]
//6: [无]
//7: [type value size]
}

// 好友
message Friend {
  required uint32 id = 1;
  required string name = 2; // 角色名字
  required uint32 level = 3; // 角色等级
  required uint32 fighting_capacity = 4; // 战斗力
  required uint32 vip = 5;
  required uint32 online = 6;  // 0：在线  其它：下线时间unix时间戳
  optional bool present = 7; // 是否可赠送礼物
  optional bool getpresent = 8; // 是否可领取礼物
  optional uint32 friend_count = 9; // 好友数量
  optional uint32 mainrole = 10; // 主角base_id
  optional uint32 dress_id = 11; // 时装
  optional string guild_name = 12; // 军团名
  optional uint32 title_id = 13; //称号ID
  optional uint32 fid	= 14;	// 头像框ID
  optional uint32 team_pvp_title = 15; // 组队pvp称号
  optional uint32 clid			= 16; // 换装用
  optional uint32 cltm			= 17;
  optional bool	  clop			= 18;
}

// 请求好友列表
message C2S_GetFriendList {
}

message S2C_GetFriendList {
  repeated Friend friend = 1;
  repeated Friend black_list = 2;
}

// 请求未确认好友列表
message C2S_GetFriendReqList {
}

message S2C_GetFriendReqList {
  repeated Friend friend = 1;
}

// 添加好友
message C2S_RequestAddFriend {
  required string name = 1; // 好友名
  required uint32 friend_type = 2; // 类型：1好友 2黑名单
}

message S2C_RequestAddFriend  {
  required uint32 ret = 1;
  required string name = 2;
  required uint32 friend_type = 3; // 类型：1好友 2黑名单
  optional Friend friend = 4;
}

// 请求删除好友
message C2S_RequestDeleteFriend {
  required uint32 id = 1;
  required uint32 friend_type = 2; // 类型：1好友 2黑名单
}

message S2C_RequestDeleteFriend {
  required uint32 ret = 1;
  required uint32 id = 2;
  required uint32 friend_type = 3; // 类型：1好友 2黑名单
}

// 确认好友邀请
message C2S_ConfirmAddFriend {
  required uint32 id = 1;
  required bool accept = 2;  // true为同意邀请，false为拒绝
}

message S2C_ConfirmAddFriend {
  required uint32 ret = 1;
  optional Friend friend = 2;
  optional bool accept = 3;  // true为同意邀请，false为拒绝
  required uint32 id = 4;
}

// 好友赠送
message C2S_FriendPresent {
  required uint32 id = 1;
}

message S2C_FriendPresent {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional bool present = 3;
  optional bool getpresent = 4;
}

// 领取好友赠送
message C2S_GetFriendPresent {
  required uint32 id = 1;  // 为0则一键领取
}

message S2C_GetFriendPresent {
  required uint32 ret = 1;
  repeated uint32 id = 2;
  optional bool present = 3;
  optional bool getpresent = 4;
  optional uint32 get_present_times = 5;
}

// 玩家信息
message C2S_GetPlayerInfo {
  optional uint32 id = 1;
  optional string name = 2;
}

message S2C_GetPlayerInfo {
  required uint32 ret = 1;
  optional Friend friend = 2;
}

// 对方响应添加好友
message S2C_AddFriendRespond {
  required Friend friend = 1;
}

message C2S_ChooseFriend {
}

message S2C_ChooseFriend {
  repeated Friend friends = 1;
}


// 已领取好友礼物次数
message C2S_GetFriendsInfo {
}

message S2C_GetFriendsInfo {
  required uint32 getPresentCount = 1;
  required bool newFriend = 2;
}

message C2S_KillFriend {
  required uint32 targetId = 1;
}

message S2C_KillFriend {
  required uint32 ret = 1;
  optional BattleReport battle_report = 2;
}

message S2C_DelFriend {
  required uint32 id = 1;
}

//战斗单位
message BattleUnit {
  required uint32 id = 1;
  required uint64 hp = 2;
  required uint32 position = 3;
  optional uint32 anger = 4;//怒气 上限为12
  optional uint32 dress_id = 5;//服装ID
  optional uint32 awaken = 6;//觉醒
  optional uint64 max_hp = 7;
  optional uint32 pet_halo_type = 8;
  optional uint32 pet_halo_value = 9;
  optional uint32 clid	= 10;
  optional uint32 cltm  = 11;
  optional bool   clop  = 12;
}

//战斗技能受害者
message BattleSkillVictim {
  required uint32 position = 1;
  optional uint64 change_hp = 2;
  required bool   state = 3;//false死
  required uint32 identity = 4; //表示敌我方阵营
  optional bool is_crit = 5; //是否暴击
  optional bool is_dodge = 6; //是否闪避
  repeated uint32 clear_buff = 7; //技能清除的buff
  repeated Award awards = 8;//死亡掉落
  optional uint32 anger = 9;//怒气
  optional bool is_double = 10; // 双倍伤害
  optional uint64 recover = 11; // 目标触发回血数量
  optional uint64 hitback = 12; // 触发反弹伤害
  optional bool is_pierce = 13; // 无视防御
  optional bool resurge = 14; // 准备复活
  optional uint64 life_drain = 15; // 吸血量
}
//战斗buff
message BattleBuff {
  required uint32 id = 1;
  required uint32 count = 2; //buff剩余次数
  optional uint64 result = 3; //如果是dot_buff 扣加血 这个会有值
}

//战斗buff受害者
message BattleBuffVictim {
  required uint32 position = 1;
  required uint32 buff_id = 2;//buff 配置表ID
  required uint32 identity = 3; //表示敌我方阵营
  required uint32 id = 4; //buff id
  optional uint32 remove_id = 5; //需要删除的buff id
  optional bool is_resist = 6;//BUFF是否生效 这个是后加的 客户端先判断这个字段+identity+position 再决定是否做BUFF逻辑处理
}

//单次攻击
message BattleAttack {
  required uint32 identity = 1;
  required uint32 position = 2;
  repeated BattleBuff buffs = 3; //dot buff
  required bool state = 4;
  optional uint32 skill_id = 5;
  repeated BattleSkillVictim skill_victims = 6;
  repeated BattleBuffVictim buff_victims = 7;
  repeated BattleSkillVictim anger_victims = 8;
  repeated Award awards = 9;
  optional uint32 anger = 10;
  repeated BattleBuff state_buffs = 11;
  repeated BattleSkillVictim cbuff_victims = 12;
  repeated uint32 unite_index = 13;
  optional bool death_hitback = 14; // 反伤而死
  optional bool resurge = 15; // 准备复活
}

//敌我双方标示
enum BATTLE_INDENTITY {
  OWN = 1;
  ENEMY = 2;
}

message BattleTeam {
  repeated BattleUnit units = 1;
  optional uint32 pet = 2;
}

message BattleStateBuffVictim {
  required uint32 position = 1;
  repeated BattleBuff bbs = 2;
  required uint32 identity = 3; //表示敌我方阵营
}

//回合类型
enum BATTLE_ROUND_TYPE {
  BRT_NORMAL = 1;
  BRT_PET = 2;
}

//一回合战斗
message BattleAttackRound {
  repeated BattleStateBuffVictim buff_victim = 1;//这个其实现在没有了 作废了
  repeated BattleAttack attacks = 2;
  required uint32 type = 3;
}

//一场战斗
message BattleAttackBout {
  required uint32 own_team = 1; //0 第一队
  required uint32 enemy_team = 2;
  repeated BattleAttackRound rounds = 3;
}

enum BATTLE_TYPE {
  U2U = 1; //玩家与玩家PK
  U2M = 2; //玩家与怪物PK
}

message BattleBriefUser {
  optional string name = 1;
  optional uint32 dress = 2;
  optional uint32 base_id = 3;
  optional uint32 fv = 4;
  optional uint64 hp = 5;
  optional uint32 uid = 6;
  optional uint64 sid = 7;
}

message BattleBriefReport {
  required uint32 tp = 1;
  required bool is_win = 2;
  optional BattleBriefUser own = 3;
  optional BattleBriefUser enemy = 4;
  repeated uint64 hp_list = 5;
  repeated uint64 e_hp_list = 6;
}

message BattleReport {
  required uint32 tp = 1;
  repeated BattleTeam own_teams = 2;
  repeated BattleTeam enemy_teams = 3;
  repeated BattleAttackBout bouts = 4;
  required bool is_win = 5;
  optional string own_name = 6;
  optional string enemy_name = 7;
  required BattleResult result = 8;
  optional uint32 own_fight_base = 9;
  optional uint32 enemy_fight_base = 10;
}

//以后结果相关的都放在这
message BattleResult {
  optional BattleTeam left_own_teams = 1;
  optional BattleTeam left_enemy_teams = 2;
}

message C2S_TestBattle {
}

message S2C_TestBattle {
  required uint32 ret = 1;
  optional BattleReport info = 2;
}

message Chapter{
  required uint32 id = 1;
  required uint32 total_star = 2;
  required uint32 breward = 3;//3个箱子奖励领取情况
  required uint32 sreward = 4;
  required uint32 greward = 5;
  repeated Stage stages = 6;
  optional bool has_entered = 7;
}

message Stage {
  required uint32 id = 1;
  required uint32 star = 2;//星数
  required uint32 execute_count = 3;//剩余可完成次数
  required bool is_finished = 4;//是否完成
  optional uint32 reset_cost = 5;
  optional uint32 reset_count = 6;
}

message C2S_GetChapterList {

}

message S2C_GetChapterList {
  required uint32 ret = 1;
  optional uint32 total_star = 2;
  optional uint32 fast_execute_time = 3;
  optional uint32 fast_execute_cd = 4;
  //optional uint32 reset_cost = 5;
  repeated Chapter chapters = 6;
}

message ChapterRank {
  required uint32 rank = 1;
  required string name = 2;
  required uint32 star = 3;
  required uint32 user_id = 4;
}

message C2S_GetChapterRank {

}

message S2C_GetChapterRank {
  required uint32 ret = 1;
  optional uint32 self_rank = 2;
  repeated ChapterRank ranks = 3;
}

message S2C_AddStage {
  required uint32 chpt_id = 1;
  required Stage stage = 2;
}

message C2S_ExecuteStage {
  required uint32 id  = 1;
}
//暂定
message S2C_ExecuteStage {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional Stage stage = 3;
  optional uint32 type = 4;
  //optional BattleReport info = 5;
  repeated Award awards = 7;
  optional uint32 stage_money = 8;
  optional uint32 stage_exp = 9;
  optional uint32 stage_star = 10;
  optional uint32 rebel = 11;
  optional uint32 rebel_level = 12;
}

message S2C_ExecuteMultiStage {
  required uint32 ret = 1;
  required uint32 id = 2;//stage id
  optional BattleReport info = 3;
  required uint32 next_wave_id = 4;
}

message C2S_ExecuteMultiStage {
  required uint32 id = 1;
  required uint32 wave_id = 2;
}

message C2S_FastExecuteStage {
  required uint32 id  = 1;
}
//暂定
message S2C_FastExecuteStage {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional uint32 fast_execute_time = 3;
  optional uint32 fast_execute_cd = 4;
  optional Stage stage = 5;
  repeated Award awards = 6;
  optional uint32 stage_money = 7;
  optional uint32 stage_exp = 8;
  optional uint32 stage_star = 9;
  optional uint32 rebel = 10;
  optional uint32 rebel_level = 11;
}
message C2S_ChapterAchvRwdInfo {

}

message S2C_ChapterAchvRwdInfo {
  required uint32 ret = 1;
  repeated uint32 finished_rwd = 2;
}

message C2S_FinishChapterAchvRwd {
  required uint32 rwd_id = 1;
}

message S2C_FinishChapterAchvRwd {
  required uint32 ret = 1;
  required uint32 rwd_id  = 2;
}

message C2S_ResetDungeonExecution {
  required uint32 stage_id = 1;
}

message S2C_ResetDungeonExecution {
  required uint32 ret = 1;
  required uint32 stage_id = 2;
  optional Stage stage = 3;//这个副本
  optional uint32 next_reset_cost = 4; //下次消耗元宝
}

message C2S_FinishChapterBoxRwd {
  required uint32 ch_id = 1;
  required uint32 box_type = 2;//1铜箱子 2银箱子 3金箱子
}

message S2C_FinishChapterBoxRwd {
  required uint32 ret = 1;
  required uint32 ch_id  = 2;
  required uint32 box_type = 3;
  //repeated Award awards = 4;
}

message C2S_ResetDungeonFastTimeCd {

}

message S2C_ResetDungeonFastTimeCd {
  required uint32 ret = 1;
  optional uint32 fast_execute_time = 2;
  optional uint32 fast_execute_cd = 3;
}

message C2S_GetArenaInfo {

}

message S2C_GetArenaInfo {
  required uint32 ret = 1;
  optional uint32 user_id = 2;
  optional uint32 rank = 3;
  optional uint32 max_rank = 4;
  optional uint32 prestige = 5;
  repeated ArenaToChallengeUser to_challenge_list = 6;
}

message ArenaToChallengeUser {
  required uint32 user_id = 1;
  required uint32 rank = 2;
  required string name = 3;
  required uint32 level = 4;
  required uint32 base_id = 5;
  required uint32 fight_value = 6;
  optional uint32 dress_base = 7;
  optional uint32 pet_base_id = 8;
  optional uint32 clid	= 9;
  optional uint32 cltm = 10;
  optional bool   clop = 11;
}

message C2S_GetArenaTopInfo {

}

message S2C_GetArenaTopInfo {
  required uint32 ret = 1;
  repeated ArenaToChallengeUser user_list = 2;
}

message C2S_GetArenaUserInfo {
  required uint32 user_id = 1;
}

message S2C_GetArenaUserInfo {
  required uint32 ret = 1;
  optional ArenaBattleUser user = 2;
}

message C2S_ChallengeArena {
  required uint32 rank = 1;
}

message S2C_ChallengeArena {
  required uint32 ret = 1;
  optional BattleReport battle_report = 2;
  repeated Award rewards = 3;
  optional ArenaBreakRecord break_record = 4;
  optional AwardList turnover_rewards = 5;
  optional ArenaToChallengeUser to_challenge_user = 6;
}

message AwardList {
  repeated Award rewards = 1;
}

message ArenaBreakRecord {
  required uint32 old_rank = 1;
  required uint32 new_rank = 2;
  repeated Award break_rewards = 3;
}

message Award {
  required uint32 type = 1;
  required uint32 value = 2;
  required uint32 size = 3;
}

message C2S_UpgradeEquipment {
  required uint32 equipment_id = 1;
  required uint32 times = 2; //自动强化次数
}

message S2C_UpgradeEquipment {
  required uint32 ret = 1;
  optional uint32 times = 2; //强化次数
  optional uint32 crit_times = 3; //暴击次数
  optional uint32 break_reason = 4; //强化中断原因
  optional uint32 level = 5; //强化后等级
}

message C2S_UpgradeDress {
  required uint32 id = 1;
}

message S2C_UpgradeDress {
  required uint32 ret = 1;
}

message C2S_RefiningEquipment {
  required uint32 equipment_id = 1;
  required uint32 item_id = 2;
  optional uint32 num = 3;
}

message S2C_RefiningEquipment {
  required uint32 ret = 1;
}

message S2C_FightKnight {
  repeated uint32 first_team = 1; //主界面UI显示 (包含knight id)
  repeated uint32 second_team = 2;
  repeated uint32 first_formation = 3; //主界面team中index
  repeated uint32 second_formation = 4;
}

//布阵(将新的阵营整体发送)
message C2S_ChangeFormation {
  required uint32 formation_id = 1; // 1，表示第一套阵; 2，表示第二套阵
  repeated uint32 indexs = 2;
}

message S2C_ChangeFormation {
  required uint32 ret = 1;
}

message C2S_ChangeTeamKnight {
  required uint32 team = 1;
  required uint32 pos = 2;
  required uint32 knight_id = 3;
}

message S2C_ChangeTeamKnight {
  required uint32 ret = 1;
  required uint32 team = 2;
  required uint32 pos = 3;
  required uint32 knight_id = 4;
  optional uint32 old_knight_id = 5;
}

message C2S_AddTeamKnight {
  required uint32 knight_id = 1;
}

message S2C_AddTeamKnight {
  required uint32 ret = 1;
  required uint32 knight_id = 2;
  optional uint32 pos = 3;
}

// 查询塔信息
message C2S_TowerInfo {
}

message S2C_TowerInfo {
  required uint32 ret = 1;
  required uint32 floor = 2;     // 当前所在层
  required uint32 reset_count = 3;     // 今日已重置次数
  required uint32 score = 4;     // 积分
  required uint32 next_challenge = 5;     // 下一个需要挑战的层数
  required uint32 free_refresh_count = 6;     // 已刷新buff多少次
  optional uint32 cleanup_time = 7;     // 扫荡结束时间
  optional bool doing_cleanup = 8;
  optional uint32 cleanup_floor = 9;  // 扫荡开始层
  required uint32 next_floor_ct = 10;  // 当前层的下一层已挑战次数
}

// 挑战下一层
message C2S_TowerChallenge {
  optional uint32 buff_id = 1;
}

message S2C_TowerChallenge {
  required uint32 ret = 1;
  optional BattleReport battle_report = 2;
  repeated Award award = 3;
}

// 开始扫荡
message C2S_TowerStartCleanup {
}

message S2C_TowerStartCleanup {
  required uint32 ret = 1;
  optional uint32 cleanup_time = 2;     // 扫荡结束时间
}

// 停止扫荡
message C2S_TowerStopCleanup {
}

message S2C_TowerStopCleanup {
  required uint32 ret = 1;
  required uint32 floor = 2;
}


// 重置
message C2S_TowerReset {
}

message S2C_TowerReset {
  required uint32 ret = 1;
}

// 查询buff
message C2S_TowerGetBuff {
  optional uint32 floor = 1;
}

message S2C_TowerGetBuff {
  repeated uint32 buff_id = 1;
}

// 刷新当前关buff
message C2S_TowerRfBuff {
}

message S2C_TowerRfBuff {
  required uint32 ret = 1;
  repeated uint32 buff_id = 2;
}

// 请求扫荡奖励
message C2S_TowerRequestReward {
}

message S2C_TowerRequestReward {
  required uint32 ret = 1;
}

// 扫塔排行榜
message TowerRanking {
  required string name = 1;
  required uint32 floor = 2;
}

message C2S_TowerRankingList {
}

message S2C_TowerRankingList {
  repeated TowerRanking ranking = 1;
}

// 攻略
message C2S_TowerChallengeGuide {
  required uint32 floor = 1;
}

message S2C_TowerChallengeGuide {
  required uint32 ret = 1;
  repeated BattleReport battle_report = 2;
}

message SimpleMail {
  required uint32 id = 1;
  optional uint32 mail_info_id = 2;
}

message Mail {
  required uint32 id = 1;
  optional uint32 source_id = 2;
  repeated string key = 3;
  repeated string value = 4;
  optional uint32 mail_info_id = 5;
  optional uint32 time = 6;
}

message S2C_GetSimpleMail {
  repeated SimpleMail mail = 1;
}

message S2C_AddSimpleMail {
  repeated SimpleMail mail = 1;
}

message S2C_GetNewMailCount {
  required uint32 count = 1;
  optional uint32 recharge = 2;//是否有充值邮件
}

message C2S_GetMail {
  repeated uint32 id = 1;
}

message S2C_GetMail {
  required uint32 ret = 1;
  repeated Mail mail = 2;
}

message GiftMail {
  required uint32 id = 1;
  required Mail mail = 2;
  repeated Award awards = 3;
}

message S2C_GetGiftMailCount {
  required uint32 count = 1;
}

message C2S_GetGiftMail {
}

message S2C_GetGiftMail {
  required uint32 ret = 1;
  repeated GiftMail mail = 2;
}

message C2S_ProcessGiftMail {
  required uint32 id = 1;
}

message S2C_ProcessGiftMail {
  required uint32 ret = 1;
  required uint32 id = 2;
}

message C2S_TestMail{
}

message C2S_Mail{
  required string content = 1;
  required uint32 uid = 2;
}

message S2C_Mail{
  required uint32 ret = 1;
}

// 查询招募信息
message C2S_RecruitInfo {
}

message S2C_RecruitInfo {
  required uint32 lp_free_count = 1;// 良品已使用免费次数-每日
  required uint32 lp_free_time = 2;// 良品免费时间
  required uint32 jp_free_time = 3;// 极品免费时间
  required uint32 jp_recruited_times = 4;// 极品已招募次数
  required uint32 zy_cycle = 5;// 0~7 魏蜀吴群(各2天)
  required uint32 zy_recruited_times = 6;// 今日已抽次数
}

// 良品招一次
message C2S_RecruitLp {
  required uint32 consume_type = 1;     // 0 免费 1 招募令 2 币
}

message S2C_RecruitLp {
  required uint32 ret = 1;
  repeated uint32 knight_base_id = 2;
  required uint32 consume_type = 3;     // 0 免费 1 招募令 2 币
}

// 良品招十次
message C2S_RecruitLpTen {
  required uint32 consume_type = 1;     // 1 招募令 2 币
}

message S2C_RecruitLpTen {
  required uint32 ret = 1;
  repeated uint32 knight_base_id = 2;
  required uint32 consume_type = 3;     // 1 招募令 2 币
}

// 极品招一次
message C2S_RecruitJp {
  required uint32 consume_type = 1;     // 0 免费 1 招募令 2 币
}

message S2C_RecruitJp {
  required uint32 ret = 1;
  repeated uint32 knight_base_id = 2;
  required uint32 consume_type = 3;     // 0 免费 1 招募令 2 币
}

// 极品招十次
message C2S_RecruitJpTen {
  required uint32 consume_type = 1;     // 1 招募令 2 币
}

message S2C_RecruitJpTen {
  required uint32 ret = 1;
  repeated uint32 knight_base_id = 2;
  required uint32 consume_type = 3;     // 1 招募令 2 币
}

// 极品招二十次
message C2S_RecruitJpTw {
  required uint32 consume_type = 1;     // 1 招募令 2 币
}

message S2C_RecruitJpTw {
  required uint32 ret = 1;
  repeated uint32 knight_base_id = 2;
  required uint32 consume_type = 3;     // 1 招募令 2 币
}

// 阵营抽将
message C2S_RecruitZy {
}

message S2C_RecruitZy {
  required uint32 ret = 1;
  repeated uint32 knight_base_id = 2;
}

enum SHOPPING_TYPE {
  VIP = 1; //vip 商店
  SCORE = 2; //积分商店
  MYSTICAL = 3; //神秘商店
  AWAKEN = 4; //觉醒商店
  OUTLET = 5; //折扣商店
  GROUPBUY = 6; //限时折扣
  BATTLEFIELD = 7; //百战沙场
  KSOUL = 8; //灵玉商店
}

message C2S_Shopping {
  required uint32 mode = 1;
  required uint32 id = 2;
  required uint32 size = 3;
  optional uint32 index = 4;  // 第几个物品
}

message S2C_Shopping {
  required uint32 ret = 1;
  optional uint32 mode = 2;
  optional uint32 id = 3;
  optional uint32 size = 4;
  optional uint32 index = 5;
}

message C2S_UseItem {
  required uint32 id = 1;
  optional uint32 index = 2; // 1.可选道具用于选择位置 2.非可选道具没用
  optional uint32 num = 3; // 1.使用道具数量
}

message S2C_UseItem {
  required uint32 ret = 1;
  optional uint32 id = 2;
  repeated Award awards = 3;
}

message C2S_EnterShop {
  required uint32 mode = 1;
}

message S2C_EnterShop {
  required uint32 mode = 1;
  repeated uint32 id = 2;
  repeated uint32 num = 3;
}

message C2S_MysticalShopInfo {
}

message S2C_MysticalShopInfo {
  required uint32 refresh_count = 1; // 已刷新次数
  required uint32 free_refresh_count = 2; // 免费刷新次数
}

message C2S_MysticalShopRefresh {
  required uint32 type = 1; // 0 刷新令 1 金币
}

message S2C_MysticalShopRefresh {
  required uint32 ret = 1;
  repeated uint32 id = 2;
  optional uint32 refresh_count = 3;
  optional uint32 free_refresh_count = 4;
}


message C2S_AwakenShopInfo {
}

message S2C_AwakenShopInfo {
  required uint32 refresh_count = 1; // 已刷新次数
  required uint32 free_refresh_count = 2; // 免费刷新次数
}

message C2S_AwakenShopRefresh {
  required uint32 type = 1; // 0 刷新令 1 金币
}

message S2C_AwakenShopRefresh {
  required uint32 ret = 1;
  repeated uint32 id = 2;
  optional uint32 refresh_count = 3;
  optional uint32 free_refresh_count = 4;
}

message OpKnight {
  repeated Knight insert_knights = 1; //添加
  repeated Knight update_knights = 2; //更新
  repeated uint32 delete_knights = 3; //删除
}

message OpEquipment {
  repeated Equipment insert_equipments = 1; //添加
  repeated Equipment update_equipments = 2; //更新
  repeated uint32 delete_equipments = 3; //删除
}

message OpDress {
  repeated Dress insert_dresses = 1; //添加
  repeated Dress update_dresses = 2; //更新
  repeated uint32 delete_dresses = 3; //删除
}

message OpPet {
  repeated Pet insert_pets = 1; //添加
  repeated Pet update_pets = 2; //更新
  repeated uint32 delete_pets = 3; //删除
}

message OpTreasure {
  repeated Treasure insert_treasures = 1; //添加
  repeated Treasure update_treasures = 2; //更新
  repeated uint32 delete_treasures = 3; //删除
}

message OpItem {
  repeated Item insert_items = 1; //添加
  repeated Item update_items = 2; //更新
  repeated uint32 delete_items = 3; //删除
}

message OpAwakenItem {
  repeated AwakenItem insert_items = 1; //添加
  repeated AwakenItem update_items = 2; //更新
  repeated uint32 delete_items = 3; //删除
}

message OpFragment {
  repeated Fragment insert_fragments = 1; //添加
  repeated Fragment update_fragments = 2; //更新
  repeated uint32 delete_fragments = 3; //删除
}

message OpTreasureFragment {
  repeated TreasureFragment insert_treasure_fragments = 1; //添加
  repeated TreasureFragment update_treasure_fragments = 2; //更新
  repeated uint32 delete_treasure_fragments = 3; //删除
}

message S2C_OpObject {
  required uint32 user_id = 1;
  optional OpKnight knight = 2;
  optional OpEquipment equipment = 3;
  optional OpItem item = 4;
  optional OpFragment fragment = 5;
  optional OpTreasureFragment treasure_fragment = 6;
  optional OpTreasure treasure = 7;
  optional OpDress dress = 8;
  optional OpAwakenItem awaken_item = 9;
  optional OpPet pet = 10;
  optional OpKsoul ksoul = 11;
}

message Object {
  required uint32 mode = 1;
  required uint32 value = 2;
  required uint32 size = 3;
}

message C2S_Sell {
  repeated Object info = 1;
}

message S2C_Sell {
  required uint32 ret = 1;
}

message SkillTree {
  required uint32 id = 1;//skill_info_id 里的id
  //required uint32 slot = 2;//位置 1到MAX 0为不在技能槽上
  required uint32 level = 3;
}

message C2S_GetSkillTree {
}

message S2C_GetSkillTree {
  repeated SkillTree skill = 1;//所有已经学过的养成类技能
  optional SkillTree slot_skill = 2;//在槽位上的技能
}

message C2S_LearnSkill {
  required uint32 id = 1;//skill_tree中的id
}

message S2C_LearnSkill {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional SkillTree skill = 3;
}

message C2S_ResetSkill {
  required uint32 id = 1;
}

message S2C_ResetSkill {
  required uint32 ret = 1;
  optional SkillTree skill = 2;
  optional uint32 skill_point = 3;//返还的技能点
}

message C2S_PlaceSkill {
  optional uint32 id = 1;
}

message S2C_PlaceSkill {
  required uint32 ret = 1;
  optional uint32 id = 2;
}

message C2S_FragmentCompound {
  required uint32 id = 1;
  optional uint32 num = 2;
}

message S2C_FragmentCompound {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional uint32 num = 3;
}

message StoryDungeon {
  required uint32 id = 1;
  required uint32 execute_count = 2;//剩余可完成次数
  required uint32 barrier_id = 3;//记录当前进度BARRIER id
  required bool is_finished = 4;//是否完成
  optional bool is_entered = 5;//标记是否已经完过
  repeated uint32 played_barrier = 6;//今天过的剧情barrier id
  optional bool has_award = 7;//是否领奖过
}

message C2S_GetStoryList {
}

message S2C_GetStoryList {
  required uint32 ret = 1;
  //optional uint32 fast_execute_time = 2;
  //optional uint32 fast_execute_cd = 3;
  repeated StoryDungeon dungeons = 4;
  optional uint32 execute_count = 5;//剩余可完成次数
}

message C2S_ExecuteBarrier {
  required uint32 dungeon_id = 1;
  required uint32 barrier_id = 2;
  optional uint32 wave_id = 3;
}

message S2C_ExecuteBarrier {
  required uint32 ret = 1;
  required uint32 dungeon_id = 2;
  required uint32 barrier_id = 3;
  optional StoryDungeon dungeon = 4;
  repeated Award drop_awards = 5;
  repeated Award monster_awards = 6;
  optional uint32 barrier_money = 7;
  optional uint32 barrier_exp = 8;
  optional uint32 barrier_star = 9;
  optional BattleReport info = 10;
  optional uint32 barrier_fb_gold = 11;//首次通关奖励的元宝
  optional uint32 execute_count = 12;//剩余可完成次数
  optional uint32 next_wave_id = 13;//下拨怪WAVE ID 0则无
}

message C2S_FastExecuteBarrier {
  required uint32 dungeon_id = 1;
  required uint32 barrier_id = 2;
}
//暂定
message S2C_FastExecuteBarrier {
  required uint32 ret = 1;
  required uint32 dungeon_id = 2;
  required uint32 barrier_id = 3;
  optional uint32 fast_execute_time = 4;
  optional uint32 fast_execute_cd = 5;
  optional StoryDungeon dungeon = 6;
  repeated Award drop_awards = 7;
  repeated Award monster_awards = 8;
  optional uint32 barrier_money = 9;
  optional uint32 barrier_exp = 10;
  optional uint32 barrier_star = 11;
  optional uint32 execute_count = 12;//剩余可完成次数
}

message C2S_SanguozhiAwardInfo{

}

message S2C_SanguozhiAwardInfo{
  required uint32 ret = 1;
  repeated uint32 finished_id = 2;
}

message C2S_FinishSanguozhiAward {
  required uint32 sgz_id = 1;
}

message S2C_FinishSanguozhiAward{
  required uint32 ret = 1;
  required uint32 sgz_id = 2;
  repeated Award awards = 3;
}

message C2S_ResetStoryFastTimeCd {

}

message S2C_ResetStoryFastTimeCd {
  required uint32 ret = 1;
  optional uint32 fast_execute_time = 2;
  optional uint32 fast_execute_cd = 3;
}

message S2C_AddStoryDungeon {
  optional StoryDungeon dungeon = 1;
}

message C2S_SetStoryTag {
  required uint32 dungeon_id = 1;
}

message S2C_SetStoryTag {
  required uint32 ret = 1;
  required uint32 dungeon_id = 2;
  optional StoryDungeon dungeon = 3;
}

message C2S_GetBarrierAward {
  required uint32 id = 1;
}

message S2C_GetBarrierAward {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional StoryDungeon dungeon = 3;
  repeated Award awards = 4;
}

message C2S_UpgradeKnight {
  required uint32 upgrade_id = 1;
  repeated uint32 knight_list = 2;
}

message S2C_UpgradeKnight {
  required uint32 ret = 1;
}

message C2S_AdvancedKnight {
  required uint32 advanced_id = 1;
  repeated uint32 knight_list = 2;
}

message S2C_AdvancedKnight {
  required uint32 ret = 1;
  required uint32 new_knight = 2;
}

message C2S_TrainingKnight {
  required uint32 knight_id = 1;
  required uint32 training_type = 2;
  required uint32 training_times = 3;
}

message S2C_TrainingKnight {
  required uint32 ret = 1;
}

message C2S_SaveTrainingKnight {
  required uint32 knight_id = 1;
}

message S2C_SaveTrainingKnight {
  required uint32 ret = 1;
}

message C2S_GiveupTrainingKnight {
  required uint32 knight_id = 1;
}

message S2C_GiveupTrainingKnight {
  required uint32 ret = 1;
}

message RecycleItem {
  required uint32 type = 1;
  required uint32 value = 2;
  required uint32 num = 3;
}

message C2S_RecycleKnight {
  repeated uint32 knight_id = 1;
  optional uint32 type = 2;  // 0:回收 1:重生 2:回收预览 3:重生预览
}

message S2C_RecycleKnight {
  required uint32 ret = 1;
  repeated uint32 knight_food = 2; // 返还材料卡
  repeated RecycleItem item = 3;  // 返还道具 定义此结构时还没有Award类型
  optional uint32 essence = 4;  // 精魄
  optional uint32 money = 5;  // 银两
  optional uint32 type = 6;  // 0:回收 1:重生
  optional uint32 soul = 7; // 神魂
  repeated Award award = 8; // 新增的都放在此
}

message C2S_KnightTransform {
  required uint32 knight_id = 1;
  required uint32 advanced_code = 2;
}

message S2C_KnightTransform {
  required uint32 ret = 1;
  optional Knight knight = 2;
}

message C2S_KnightOrangeToRed{
	required uint32 kid = 1;
}

message S2C_KnightOrangeToRed{
	required uint32 ret = 1;
}

message C2S_UpgradeKnightHalo {
  required uint32 knight_id = 1;
}

message S2C_UpgradeKnightHalo {
  required uint32 ret = 1;
}

message C2S_GetHandbookInfo {
    required uint32 hand_type = 1;   //0是武将,1是宠物
}

message S2C_GetHandbookInfo {
  required uint32 ret = 1;
  required uint32 hand_type = 2;
  repeated uint32 ids = 3;
}

//叛军
message Rebel {
  required uint32 id = 1;
  required uint64 hp = 2;
  required uint64 max_hp = 3;
  required uint32 end = 4;
  required uint32 level = 5;
  required uint32 user_id = 6;
  required bool public = 7;
  required string name = 8;
  required uint32 last_att_index = 9;
}

message S2C_GetRebel {
  required Rebel rebel = 1;
}

message C2S_EnterRebelUI {
}

message S2C_EnterRebelUI {
  required uint32 exploit_rank = 1;
	required uint64 max_harm = 2;
  required uint32 max_harm_rank = 3;
	required uint32 exploit = 4;
}

message AttackRebelInfo {
  required string name = 1; //攻击者名称
  required uint64 harm = 2; //攻击伤害
  required uint32 id = 3; //叛军id
}

message C2S_RefreshRebelShow {
  repeated uint32 rebel_ids = 1;
  repeated uint32 last_att_indexs = 2;
}

message S2C_RefreshRebelShow {
  repeated Rebel rebels = 1;
  repeated AttackRebelInfo infos = 2;
  repeated uint32 rebel_ids = 4;
}

enum ATTACK_REBEL {
  NORMAL = 1;
  SPECIAL = 2;
}

message C2S_AttackRebel {
  required uint32 user_id = 1;
  required uint32 mode = 2;
}

message S2C_AttackRebel {
  required uint32 ret = 1;
  optional BattleReport report = 2;
  optional uint32 exploit = 3;
  optional uint64 harm = 4;
  optional bool public = 5;
  optional bool new_record = 6;
  optional uint32 mode = 7;
  optional Award award = 8;
}

message C2S_PublicRebel {
}

message S2C_PublicRebel {
  required uint32 ret = 1;
}

message C2S_RebelRank {
}

message RebelRank {
  required uint32 id = 1;
  required uint32 level = 2;
  required uint64 value = 3;
  required uint32 attack_value = 4;
  required uint32 rank = 5;
  required string name = 6;
  required uint32 user_id = 7;
  required uint32 dress_id = 8;
  optional uint32 clid = 9;
  optional uint32 cltm = 10;
  optional bool	  clop = 11;
}

message S2C_RebelRank {
  required uint32 ret = 1;
  repeated RebelRank exploit_rank = 2;
  repeated RebelRank max_harm_rank = 3;
  optional uint32 my_exploit_rank = 4;
  optional uint32 my_max_harm_rank = 5;
}

enum REBEL_RANK_TYPE {
  EXPLOIT = 1;
  MAX_HARM = 2;
}

message C2S_MyRebelRank {
  required uint32 mode = 1;
}

message S2C_MyRebelRank {
  required uint32 ret = 1;
  required uint32 mode = 2;
  repeated RebelRank rank = 3;
}

message C2S_RefreshRebel {
}

message S2C_RefreshRebel {
  required uint32 ret = 1;
  repeated Rebel rebels = 2;
}

message C2S_GetExploitAwardType {
}

message S2C_GetExploitAwardType {
  required uint32 mode = 1;
  repeated uint32 awards = 2;
}

message C2S_GetExploitAward {
  required uint32 id = 1;
}

message S2C_GetExploitAward {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional Award award = 3;
}

message C2S_GetTreasureFragmentRobList {
  required uint32 base_id = 1; //碎片ID
}

message S2C_GetTreasureFragmentRobList {
  required uint32 ret = 1;
  required uint32 base_id = 2;
  repeated TreasureFragmentRobUser rob_users = 3;
}

message TreasureFragmentRobUser {
  required uint32 index = 1;
  required string name = 2;
  required uint32 level = 3;
  required uint32 fight_value = 4;
  repeated uint32 knights = 5;
  required uint32 rob_rate = 6;
  required bool is_robot = 7;
  optional uint32 dress_base = 8;
}

message C2S_FastRobTreasureFragment {
  required uint32 index = 1;
}

message S2C_FastRobTreasureFragment {
  required uint32 ret = 1;
  optional uint32 base_id = 2; //抢夺宝物碎片id
  optional uint32 battle_times = 3; //战斗次数
  optional uint32 break_reason = 4; //中断原因(0:无中断/1:抢夺成功/2:精力不足)
  repeated bool rob_result = 5; //每次抢夺结果
  repeated Award turnover_rewards = 6; //每次翻牌结果
  repeated AwardList rewards = 7; //每次奖励
}

message C2S_RobTreasureFragment {
  required uint32 index = 1;
}

message S2C_RobTreasureFragment {
  required uint32 ret = 1;
  required bool rob_result = 2;
  optional BattleReport battle_report = 3;
  optional AwardList turnover_rewards = 4;
  repeated Award rewards = 5;
  optional uint32 base_id = 6;
}

message C2S_UpgradeTreasure {
  required uint32 upgrade_id = 1;
  repeated uint32 treasure_list = 2;
}

message S2C_UpgradeTreasure {
  required uint32 ret = 1;
}

message C2S_RefiningTreasure {
  required uint32 refining_id = 1;
  repeated uint32 treasure_list = 2;
}

message S2C_RefiningTreasure {
  required uint32 ret = 1;
}

message C2S_ComposeTreasure {
  required uint32 treasure_id = 1;
  optional uint32 num		= 2;
}

message S2C_ComposeTreasure {
  required uint32 ret = 1;
  required uint32 treasure_id = 2;
  optional uint32 num	= 3;
}

message C2S_TreasureFragmentForbidBattle {
  required uint32 item_id = 1;
}

message S2C_TreasureFragmentForbidBattle {
  required uint32 ret = 1;
  required uint32 item_id = 2;
}

message C2S_OneKeyRobTreasureFragment {
  required uint32 base_id = 1;
}

message S2C_OneKeyRobTreasureFragment {
  required uint32 ret = 1;
  required bool rob_result = 2;
  optional Award turnover_reward = 3;
  repeated Award rewards = 4;
  optional string rob_name = 5;
  optional uint32 rob_base_id = 6;
}

message C2S_RecycleEquipment {
  repeated uint32 equip_id = 1;
  optional uint32 type = 2; // 0:回收 1:回收预览
}

message S2C_RecycleEquipment {
  required uint32 ret = 1;
  optional uint32 type = 2; // 0:回收 1:回收预览
  repeated Award  awards = 3; //回收时的奖励
}

message C2S_RebornEquipment {
  repeated uint32 equip_id = 1;
  required uint32 type	=	2;// 0: 重生 1:重生预览
}

message S2C_RebornEquipment {
  required uint32 ret		=	1;
  required uint32 type		=	2;// 0: 重生 1:重生预览
  repeated Award awards		=	3;
}

message C2S_GetKnightAttr {
  required uint32 knight_id = 1;
}

message S2C_GetKnightAttr {
  required uint32 attack = 1;
  required uint64 hp = 2;
  required uint32 physical_defense = 3;
  required uint32 magical_defense = 4;
}


// 取新手引导步骤id
message C2S_GetGuideId {
}

message S2C_GetGuideId {
  required uint32 id = 1;     // 无数据返回0
}


// 存新手引导步骤id
message C2S_SaveGuideId {
  required uint32 id = 1;
}

message S2C_SaveGuideId {
  required uint32 ret = 1;
}

message C2S_GetVip{
}

message S2C_GetVip {
  required uint32 ret = 1;
  optional uint32 level = 2;
  optional uint32 exp = 3;
  repeated uint32 vip_dungeons = 4;//已经开启的
  optional uint32 vip_dungeon_count = 5;//剩余次数
  optional uint32 vip_reset_cost = 6;//下次购买所需元宝 0说明无法购买
}

message C2S_ExecuteVipDungeon {
  required uint32 id = 1;
}

message S2C_ExecuteVipDungeon {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional uint32 vip_dungeon_count = 3;
  optional BattleReport info = 4;
  repeated Award drop_awards = 5;
  optional Award extra_award = 6;
  optional Award least_award = 7;
}

message C2S_ResetVipDungeonCount {

}

message S2C_ResetVipDungeonCount {
  required uint32 ret = 1;
  optional uint32 vip_dungeon_count = 2;//剩余次数
  optional uint32 vip_reset_cost = 3;
}

message C2S_GetRecharge{
}

//以后充值有特殊的东西都在这里了
message Recharge {
  repeated uint32 recharge_ids = 1;
  //optional MonthCard mc = 2;
}

message MonthCard {
  required uint32 mc_id = 1;//mc info id
  required uint32 mc_days = 2;//mc 剩余天数
  required uint32 last_use_time = 3;//最后次使用时间
  required bool mc_use = 4;//今天月卡是否可以使用
}

//充值相关都在这了
message S2C_GetRecharge{
  required uint32 ret = 1;
  optional Recharge recharge = 2;//充值
  repeated MonthCard mc = 3;//月卡
  optional bool bonus = 4;//首冲奖励
}

message S2C_RechargeSuccess {
  required uint32 ret = 1;
}

message C2S_GetRechargeBonus {
  required uint32 id = 1;//drop id 做校验
}

message S2C_GetRechargeBonus {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated Award awards = 3;
  optional bool bonus = 4;
}
message C2S_LiquorInfo {
}

message S2C_LiquorInfo {
  required uint32 state= 1;  // 1午餐前 2未吃午餐 3已吃午餐 4午餐晚餐间 5未吃晚餐 6已吃晚餐 7晚餐后
  required uint32 next_time = 2;
}

message C2S_Drink {
}

message S2C_Drink {
  required uint32 ret = 1;
  optional uint32 gold = 2;  // 获得的金币数
  required uint32 state = 3;
}

message C2S_UseMonthCard {
  required uint32 id = 1;
}

message S2C_UseMonthCard {
  required uint32 ret = 1;
  required uint32 id = 2;
}


// 查询关公信息
message C2S_MrGuanInfo {
}

message S2C_MrGuanInfo {
  required uint32 today_count = 1;     // 今天已祭拜次数
  required uint32 total_count = 2;  // 总共已祭拜次数
  required uint32 next_time = 3;  // 下次祭拜时间
}

// 祭拜
message C2S_Worship {
}

message S2C_Worship {
  required uint32 ret = 1;
  repeated Award award = 2; // 奖励
}

// 查询签到信息
message C2S_LoginRewardInfo {
}

message S2C_LoginRewardInfo {
  required uint32 total1 = 1;     // 普通签到已签到次数
  required uint32 last_time1 = 2; // 普通签到上次签到时间
  required uint32 vipid = 3;     // 豪华签到今日奖励id
  required uint32 last_time_vip = 4; // 豪华签到上次签到时间
  required bool cost = 5; // 今日是否已充值
  required bool vip_available = 6; // 豪华签到今日是否可领
}

// 签到
message C2S_LoginReward {
  required uint32 type = 1;     // 0 普通签到 1 豪华签到
}

message S2C_LoginReward {
  required uint32 ret = 1;
  required uint32 mult = 2;
  required uint32 total = 3;     // 普通签到已签到次数
  required uint32 type = 4;     // 0 普通签到 1 豪华签到
  required uint32 vipid = 5;	// 豪华签到奖励id
}

message DailyMission {
  required uint32 id = 1;
  required uint32 progress = 2;
  required bool is_finished = 3;
}

message C2S_GetDailyMission {

}

message S2C_GetDailyMission {
  required uint32 ret = 1;
  repeated DailyMission fixed_mission = 2;
  optional DailyMission rand_mission = 3;
  optional uint32 reset_cost = 4;
  optional uint32 reset_count = 5;//已经重制的次数
  optional uint32 score = 6;
  repeated DailyMission score_awards = 7;//积分奖励
  optional uint32 level = 8;//计算用的等级
}

message C2S_FinishDailyMission {
  required uint32 id = 1;
}

message S2C_FinishDailyMission {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional DailyMission daily_mission = 3;
  repeated Award awards = 4;
  optional uint32 score = 5;
}

message C2S_GetDailyMissionAward {
  required uint32 id = 1;
}

message S2C_GetDailyMissionAward {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated Award awards = 3;
}

message C2S_ResetDailyMission {

}

message S2C_ResetDailyMission {
  required uint32 ret = 1;
  optional DailyMission daily_mission = 2;
  optional uint32 reset_cost = 3;
  optional uint32 reset_count = 4;
}

message C2S_FirstEnterChapter {
  required uint32 id = 1;
}

message S2C_FirstEnterChapter {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional Chapter chapter = 3;
}

message S2C_FlushDailyMission {
  optional DailyMission daily_mission = 1;
}



// 查询信息
message C2S_WushInfo {
}
message S2C_WushInfo {
  required uint32 floor = 1;     // 当前所在层 一层都没打就在第0层
  required uint32 reset_count = 2;     // 今日已重置次数
  required uint32 star_total = 3;     // 当前总星数
  required uint32 star_cur = 4;     // 当前剩余星数
  required uint32 star_his = 5;     // 历史最高星
  repeated uint32 star = 6;     // 每关星数
  repeated uint32 buffs = 7;  // 已获得buff
  required uint32 failed = 8;  // 是否已失败 1:true 0:false
  required uint32 buy_id = 9;  // 可以买的id 0是没有
  required bool bought = 10; // 是否已购买
  required uint32 max_clean = 11; // 最大3星层
}

// 获取当前关buff
message C2S_WushGetBuff {
}
message S2C_WushGetBuff {
  repeated uint32 buff_id = 1;
}

// 挑战下一关
message C2S_WushChallenge {
  required uint32 index = 1;     // 怪物id:0~2
  required bool clean = 2; // 是否是扫荡
}
message S2C_WushChallenge {
  required uint32 ret = 1;
  optional BattleReport battle_report = 2; // 扫荡的话无战报
  repeated Award award = 3;
  required uint32 index = 4;     // 怪物id:0~2
  optional uint32 buy_id = 5; // 可以买的id
}

// 重置
message C2S_WushReset {
}
message S2C_WushReset {
  required uint32 ret = 1;
  optional uint32 max_clean = 2; // 最大扫荡层
}

// 获取排行榜
message WushRanking {
  required string name = 1;
  required uint32 star = 2;
}
message C2S_WushRankingList {
}
message S2C_WushRankingList {
  repeated WushRanking ranking = 1;
}

// 应用buff
message C2S_WushApplyBuff {
  required uint32 buff_id = 1;
}
message S2C_WushApplyBuff {
  required uint32 ret = 1;
  required uint32 buff_id = 2;
}

message C2S_WushBuy {
}
message S2C_WushBuy {
  required uint32 ret = 1;
}

//礼品码
message C2S_GiftCode {
  required string code = 1;
}

message S2C_GiftCode {
  required uint32 ret = 1;
}

message S2C_RollNotice {
  required string msg = 1;
}

message TargetInfo {
  required uint32 t = 1;  // 目标类型
  required uint32 id = 2; // id
  required uint32 step = 3; // 阶段：1开启未完成 2完成未领奖 3该类型已全部完成
  required uint32 num = 4; // 完成值
 }

// 查询目标系统信息
message C2S_TargetInfo {
}

message S2C_TargetInfo {
  repeated TargetInfo info = 1;
}

// 目标系统领取奖励
message C2S_TargetGetReward {
  required uint32 t = 1; // 目标类型
}

message S2C_TargetGetReward {
  required uint32 ret = 1;
  required uint32 t = 2; // 目标类型
}

message C2S_GetMainGrouthInfo {

}

message S2C_GetMainGrouthInfo {
  required uint32 ret = 1;
  repeated uint32 used_mg = 2;
}

message C2S_UseMainGrouthInfo {
  required uint32 id = 1;
  required uint32 index = 2;//如果是多选1就写序号1--4 如果是就填0
}

message S2C_UseMainGrouthInfo {
  required uint32 ret = 1;
  required uint32 id = 2;
  required uint32 index  = 3;
  repeated Award awards = 4;
}

message C2S_GetDaysActivityInfo {

}

message DaysActivity {
  required uint32 id = 1;
  required uint32 status = 2;//0无法领奖条件不足 1可领奖 2已经领奖
  optional uint32 progress = 3;
  optional uint32 count = 4;
}

enum ACTIVITY_STATE {
  CLOSED = 0; //活动关闭
  OPEN = 1; //活动开启
  AWARD = 2; //领奖状态
}

message S2C_GetDaysActivityInfo {
  required uint32 ret = 1;
  optional uint32 status = 2;//状态 0关闭 1开启 2领奖
  optional uint32 start_time = 3;
  optional uint32 end_time = 4;
  optional uint32 current_day = 5;
  repeated DaysActivity days_activity = 6;
}

message C2S_FinishDaysActivity {
  required uint32 id = 1;
  optional uint32 index = 2;
}

message S2C_FinishDaysActivity {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional uint32 index = 3;
  optional DaysActivity days_activity = 4;
  repeated Award awards = 5;
}

message AcitivitySell {
  required uint32 id = 1;
  required uint32 num = 2;//剩余数量
  required bool bought = 3;//玩家是否买过
}
message C2S_GetDaysActivitySell {

}

message S2C_GetDaysActivitySell {
  required uint32 ret = 1;
  repeated AcitivitySell sells = 2;
}

message C2S_PurchaseActivitySell {
  required uint32 id = 1;
}

message S2C_PurchaseActivitySell {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional AcitivitySell sell = 3;
  repeated Award awards = 4;
}

message S2C_FlushDaysActivity {
  repeated DaysActivity activitys = 1;
}

message C2S_GetFundInfo {
}

message S2C_GetFundInfo {
  required uint32 ret = 1;
  optional uint32 start_time = 2; //活动开始时间
  optional uint32 buy_count  = 3; //全服购买次数
  optional uint32 open_time = 4; //开服时间
}

message C2S_GetUserFund {
}

message S2C_GetUserFund {
  required uint32 ret = 1;
  optional UserFund fund = 2;
}

message UserFund {
  required bool buy = 1; //是否购买
  repeated uint32 award  = 2; //已领奖id
  repeated uint32 weal  = 3; //已领福利id
}

message C2S_BuyFund {
}

message S2C_BuyFund {
  required uint32 ret = 1;
  optional UserFund fund = 2;
}

message C2S_GetFundAward {
  required uint32 id = 1;
}

message S2C_GetFundAward {
  required uint32 ret = 1;
  optional UserFund fund = 2;
}

message C2S_GetFundWeal {
  required uint32 id = 1;
}

message S2C_GetFundWeal {
  required uint32 ret = 1;
  optional UserFund fund = 2;
}

//名人堂界面信息
message C2S_HOF_UIInfo {
  required uint32 kind = 1; //1, 战力 2, 等级
}

message HOF_Info {
  required uint32 id = 1; //玩家ID
  required string name = 2; //玩家名字
  required uint32 value = 3; //战力或等级
  required uint32 points = 4; //获得点赞数
  required string info = 5; //签名
  required uint32 base_id = 6;
  required uint32 dress_id = 7;
  optional uint32 clid = 8;
  optional uint32 cltm = 9;
  optional bool	  clop = 10;
}

message S2C_HOF_UIInfo {
  required uint32 kind = 1;
  required uint32 points = 2;
  repeated HOF_Info infos = 3;
}

//点赞
message C2S_HOF_Confirm {
  required uint32 id = 1;
}

message S2C_HOF_Confirm {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional uint32 points = 3;
}

//签名
message C2S_HOF_Sign {
  required string info = 1;
}

message S2C_HOF_Sign {
  required uint32 ret = 1;
  required string info = 2;
}

//名人堂排行榜
message C2S_HOF_RankInfo {
  required uint32 kind = 1; //1, 战力 2, 等级
  required uint32 start_rank = 2; //从0开始 eg: 前十名就是 0-9
  required uint32 stop_rank = 3;
}

message HOF_RankInfo {
  required uint32 id = 1;
  required string name = 2;
  required uint32 level = 3;
  required uint32 fv = 4; //战斗力
  required uint32 base_id = 5;
  required uint32 dress_id = 6;
  required string sept_name = 7;
  optional uint32 clid = 8;
  optional uint32 cltm = 9;
  optional bool   clop = 10;
}

message S2C_HOF_RankInfo {
  required uint32 kind = 1; //1, 战力 2, 等级
  required uint32 start_rank = 2; //从0开始 eg: 前十名就是 0-9
  required uint32 stop_rank = 3;
  repeated HOF_RankInfo infos = 4;
  required uint32 self_rank = 5; //0表示不在榜上
}

// 城池挂机
message CityIEvent {
  required uint32 id = 1; // 事件ID
  required uint32 start = 2; // 开始时间
  required uint32 end = 3; // 解决时间
  required string name = 4; // 解决者名字
  optional uint32 times	=	5;	// 资源加倍
}

message CityREvent {
  required uint32 id = 1; // 事件ID
  required uint32 reward_id = 2; // 奖励id(扩展用)
  optional uint32 times	=	3;	// 资源加倍
}

message City {
  required uint32 id = 1; // 城池id
  required uint32 start = 2; // 巡逻开始时间
  required uint32 kac = 3; // 巡逻武将进阶码
  required uint32 duration = 4; // 巡逻时间1~3
  required uint32 efficiency = 5; // 巡逻效率/间隔1~3
  repeated CityIEvent ie  = 6; // 互动事件
  repeated CityREvent re  = 7; // 资源事件
  repeated uint32 reward = 8; // 结束奖励值
  optional uint32 skac = 9; // 设置巡逻武将ID
  optional uint32 sduration = 10; // 设置巡逻时间1~3
  optional uint32 sefficiency = 11; // 设置巡逻效率/间隔1~3
  optional uint32 level = 12; // 城市等级
}

message C2S_CityTechUp {
	required uint32 id = 1; // 城池id
}

message S2C_CityTechUp {
	required uint32 ret = 1;
	optional uint32 id  = 2;
	optional uint32 level = 3;
}

// 查询城池信息
message C2S_CityInfo {
  required uint32 id = 1; // 用户id 0是自己
}

message S2C_CityInfo {
  required uint32 id = 1; // 用户id
  required uint32 assist_count = 2; // 互动事件协助次数
  repeated City city = 3; // 城池
  required uint32 speed = 4; // 巡逻倍速
  optional uint32 totaltime = 5 ;// 总共巡逻时间
}

// 攻打城池
message C2S_CityAttack {
}

message S2C_CityAttack {
  required uint32 ret = 1;
  optional BattleReport battle_report = 2;
  repeated Award award = 3;
}

// 开始巡逻
message C2S_CityPatrol {
  required uint32 city = 1; // 城池id
  required uint32 knight = 2; // 巡逻武将id
  required uint32 duration = 3; // 巡逻时间1~3
  required uint32 efficiency = 4; // 巡逻效率/间隔1~3
}

message S2C_CityPatrol {
  required uint32 ret = 1;
  optional City city = 2; // 城池
}

// 领取巡逻奖励
message C2S_CityReward {
  required uint32 city = 1; // 城池id
}

message S2C_CityReward {
  required uint32 ret = 1;
  repeated Award award = 2;
  optional uint32 totaltime = 3;
}

// 镇压
message C2S_CityAssist {
  required uint32 id = 1; // 玩家id
  required uint32 city = 2;
}

message S2C_CityAssist {
  required uint32 ret = 1;
  repeated Award award = 2;
}

// 检查好友造反事件
message C2S_CityCheck {
  repeated uint32 id = 1; // 玩家id
}

message S2C_CityCheck {
  repeated uint32 id = 1; // 玩家id
  repeated uint32 num = 2; // 城池数
  repeated uint32 patrol = 3; // 巡逻中的领地数
  repeated uint32 riot = 4; // 造反了的领地数
}

// 好友来协助你（事件推送）
message S2C_CityAssisted {
  required uint32 id = 1; // 玩家id
  required uint32 city_id = 2; // 城池id
  required string name = 3; // 玩家名字
}

// 一键领取巡逻奖励
message C2S_CityOneKeyReward {
}

message S2C_CityOneKeyReward {
  required uint32 ret = 1;
  repeated Award award = 2;
  optional uint32 totaltime = 3;
}

///////////////////// 一键巡逻 ////////////////////////
message CityOneKeyPatrolSet{
  required uint32 id  = 1;	// 设置城池ID
  required uint32 skac = 2; // 设置巡逻武将ID
  required uint32 sduration = 3; // 设置巡逻时间1~3
  required uint32 sefficiency = 4; // 设置巡逻效率/间隔1~3
}

//一键巡逻
message C2S_CityOneKeyPatrol{
	repeated CityOneKeyPatrolSet tmp = 1; // 这个是临时用如果没有则用玩家身上的去执行一键巡逻
}

message S2C_CityOneKeyPatrol{
	//required uint32 ret = 1;
	repeated S2C_CityPatrol citys = 1;
}

// 一键巡逻设置
message C2S_CityOneKeyPatrolSet{
	repeated CityOneKeyPatrolSet cokps = 1;//设置请求
}

message S2C_CityOneKeyPatrolSet{
	required uint32 ret = 1;
}
///////////////////// 一键巡逻 ////////////////////////

message UserCustomActivityQuest {
  required uint32 act_id = 1; //活动ID
  required uint32 quest_id = 2; //任务ID
  required uint32 time = 3; //活动初始化时间
  required uint32 progress = 4; //活动完成进度
  required uint32 award_time = 5; //奖励领取时间
  required uint32 award_times = 6; //奖励领取次数
}

message CustomActivity {
  required uint32 act_id = 1; //活动ID
  required uint32 act_type = 2; //活动类型
  //required uint32 icon = 3; //活动图标
  required string title = 4; //活动标题
  required string sub_title = 5; //小标题
  required string desc = 6; //活动描述
  required uint32 preview_time = 7; //活动预览时间
  required uint32 start_time = 8; //活动开始时间
  required uint32 end_time = 9; //活动结束时间
  required uint32 award_time = 10; //活动奖励领取结束时间
  required uint32 vip_level = 11; //活动Vip等级限制
  optional uint32 icon_type = 12;
  optional uint32 icon_value = 13;
  optional uint32 role_icon = 14;
  optional uint32 level = 15;
  optional uint32 max_vip = 16;
  optional uint32 max_level = 17;
  optional uint32 series_id = 18;
}

message CustomActivityQuest {
  required uint32 quest_id = 1; //任务ID
  required uint32 act_id = 2; //活动ID
  required uint32 quest_type = 3; //任务类型
  required uint32 param1 = 4; //参数1
  required uint32 param2 = 5; //参数2
  required uint32 param3 = 6; //参数3
  required uint32 consume_type1 = 7; //消耗道具
  required uint32 consume_value1 = 8;
  required uint32 consume_size1 = 9;
  required uint32 consume_type2 = 10;
  required uint32 consume_value2 = 11;
  required uint32 consume_size2 = 12;
  required uint32 consume_type3 = 13;
  required uint32 consume_value3 = 14;
  required uint32 consume_size3 = 15;
  required uint32 consume_type4 = 16;
  required uint32 consume_value4 = 17;
  required uint32 consume_size4 = 18;
  required uint32 award_type1 = 19; //奖励道具
  required uint32 award_value1 = 20;
  required uint32 award_size1 = 21;
  required uint32 award_type2 = 22;
  required uint32 award_value2 = 23;
  required uint32 award_size2 = 24;
  required uint32 award_type3 = 25;
  required uint32 award_value3 = 26;
  required uint32 award_size3 = 27;
  required uint32 award_type4 = 28;
  required uint32 award_value4 = 29;
  required uint32 award_size4 = 30;
  required uint32 award_select = 31; //奖励道具是否可选
  required uint32 award_limit = 32; //奖励限制次数
  required uint32 server_limit = 33; //奖励全服限制次数
  required uint32 server_times = 34; //奖励全服领取次数
}

message C2S_GetCustomActivityInfo {
}

message S2C_GetCustomActivityInfo {
  required uint32 ret = 1;
  repeated CustomActivity activity = 2;
  repeated CustomActivityQuest quest = 3;
  repeated UserCustomActivityQuest user_quest = 4;
}

message S2C_UpdateCustomActivity {
  repeated CustomActivity activity = 1;
  repeated CustomActivityQuest quest = 2;
  repeated uint32 delete_activity = 3;
}

message S2C_UpdateCustomActivityQuest {
  repeated UserCustomActivityQuest user_quest = 1;
}

message C2S_GetCustomActivityAward {
  required uint32 act_id = 1;
  required uint32 quest_id = 2;
  optional uint32 award_id = 3;
  optional uint32 num = 4;
}

message S2C_GetCustomActivityAward {
  required uint32 ret = 1;
  required uint32 act_id = 2;
  required uint32 quest_id = 3;
  optional uint32 award_id = 4;
  optional uint32 num = 5;
}

message S2C_UpdateCustomSeriesActivity {
  required uint32 series_id = 1;
}

message C2S_GetCustomSeriesActivity {
  required uint32 series_id = 1;
}

message S2C_GetCustomSeriesActivity {
  required uint32 ret = 1;
  repeated CustomActivity activity = 2;
  repeated CustomActivityQuest quest = 3;
  repeated UserCustomActivityQuest user_quest = 4;
  required uint32 series_id = 5;
}

message CorpSnapShot {
  required uint32 id = 1;
  required uint32 level = 2;
  required uint32 size = 3;//成员数
  required string name = 4;//军团名
  required string leader_name = 5;//军团长名
  required string announcement = 6;//军团宣言
  required uint32 icon_pic  = 7;//ICON pic
  required uint32 icon_frame = 8;//ICON frame
  required bool has_join = 9;//是否有申请
  optional uint32 exp = 10;
}

//start end 传军团排名位置
message C2S_GetCorpList {
  required uint32 start = 1;
  required uint32 tail = 2;
}

//如果啥都没则返回start end = 0
message S2C_GetCorpList {
  required uint32 ret = 1;
  required uint32 start = 2;
  required uint32 tail = 3;
  repeated CorpSnapShot corps = 4;
}

message C2S_GetJoinCorpList {
}

message S2C_GetJoinCorpList {
  required uint32 ret = 1;
  repeated CorpSnapShot corps = 2;
}

enum CORP_POSITION {
  MEMBER = 0;//普通人
  LEADER = 1;//军团长
  VICE_LEADER = 2;//副军团长
}

message CorpDetail {
  //军团总信息
  required uint32 id = 1;
  optional uint32 level = 2;
  optional uint32 size = 3;//成员数
  optional string name = 4;//军团名
  optional string leader_name = 5;//军团长名
  optional string announcement = 6;//军团宣言
  optional uint32 icon_pic  = 7;//ICON pic
  optional uint32 icon_frame = 8;//ICON frame
  optional uint32 exp = 9;//军团经验
  optional string notification = 10;//军团公告（内部）
  optional uint32 history_index = 11;//军团动态
  //optional uint32 worship_level = 12;//祭天用的id
  //optional uint32 worship_point = 13;//祭天进度
  //自身相关的
  optional uint32 position = 20;//自身级别
  //optional uint32 total_contribute = 21;//自身累计军团贡献
  //optional uint32 worship_id = 22;//自身今天军团贡献
  //optional bool worship_crit = 23;//军团贡献是否暴击
  //repeated uint32 worship_award = 24;//今天已经领过的军团贡献
}

message C2S_GetCorpDetail {

}

//军团详情 拉军团先拉这个
message S2C_GetCorpDetail {
  required uint32 ret = 1;
  optional bool has_corp = 2;
  optional CorpDetail corp = 3;
  optional uint32 quit_corp_cd = 4;//加入帮会冷却CD时间
  optional uint32 join_corp_time = 5;
}

message CorpMember {
  required uint32 id = 1;
  required string name = 2;
  required uint32 level = 3;
  required uint32 fight_value = 4;
  required uint32 total_contribute = 5;
  required uint32 worship_id = 6;//祭天ID 0为无
  required uint32 worship_exp  = 7;//祭天贡献值
  required uint32 online = 8;
  required uint32 main_role = 9;
  required uint32 join_corp_time = 10;
  required uint32 position = 11;
  required uint32 vip = 12;
  optional uint32 dress_id = 13;
  optional uint32 worship_point = 14;//后面加的
  optional uint32 worship_time = 15;
  optional uint32 clid = 16;
  optional uint32 cltm = 17;
  optional bool   clop = 18;
}

message C2S_GetCorpMember {

}

message S2C_GetCorpMember {
  required uint32 ret = 1;
  repeated CorpMember members = 2;
}

message CorpHistory {
  required uint32 id = 1;
  required uint32 info_id = 2;
  required uint32 time = 3;
  repeated string key = 4;
  repeated string value = 5;
}

message C2S_GetCorpHistory {
  required uint32 start = 1;
  required uint32 tail= 2;
}

message S2C_GetCorpHistory {
  required uint32 ret = 1;
  required uint32 start = 2;
  required uint32 tail = 3;
  repeated CorpHistory history = 4;
}

message S2C_NotifyCorpDismiss {
  required uint32 dismiss = 1;//解散状态 0=>被T 1军团被解散
}
message C2S_CreateCorp {
  required string name = 1;
  optional uint32 icon_pic = 2;
  optional uint32 icon_frame = 3;
}

message S2C_CreateCorp {
  required uint32 ret = 1;
}

message C2S_RequestJoinCorp{
  required uint32 id = 1;
}

message S2C_RequestJoinCorp{
  required uint32 ret = 1;
  required uint32 id = 2;
  optional CorpSnapShot corp = 3;//申请的军团如果成功了 会传过来
}

message C2S_DeleteJoinCorp {
  required uint32 id = 1;
}

message S2C_DeleteJoinCorp {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional CorpSnapShot corp = 3;//删掉的军团会传过来 HAS_JOIN变为FALSE
}

message C2S_QuitCorp {

}

message S2C_QuitCorp {
  required uint32 ret = 1;
}

message C2S_SearchCorp {
  required string name = 1;
}

message S2C_SearchCorp {
  required uint32 ret = 1;
  optional CorpSnapShot corp = 2;
}

message C2S_ExchangeLeader {

}

message S2C_ExchangeLeader {
  required uint32 ret = 1;
  optional uint32 user_id = 2;//被弹劾的人的USERID
}

message C2S_ConfirmJoinCorp {
  required uint32 user_id = 1;
  required bool confirm = 2;//true为通过 FALSE为滚蛋
}

message S2C_ConfirmJoinCorp {
  required uint32 ret = 1;
  required uint32 user_id = 2;
  required bool confirm = 3;//true为通过 FALSE为滚蛋
}

message C2S_ModifyCorp {
  optional string announcement = 1;//军团宣言
  optional uint32 icon_pic  = 2;//ICON pic
  optional uint32 icon_frame = 3;//ICON frame
  optional string notification = 4;//军团公告（内部）
}

message S2C_ModifyCorp {
  required uint32 ret = 1;
}

message C2S_DismissCorpMember {
  required uint32 id = 1;
}

message S2C_DismissCorpMember {
  required uint32 ret = 1;
  required uint32 id = 2;
}

message C2S_GetCorpJoin{

}

message CorpJoin{
  required uint32 id = 1;
  required string name = 2;
  required uint32 level = 3;
  required uint32 fight_value = 4;
  required uint32 online = 5;
  required uint32 main_role = 6;
  required uint32 vip = 7;
  optional uint32 dress_id = 8;
  optional uint32 quit_corp_cd = 9;
  optional uint32 clid = 10;
  optional uint32 cltm = 11;
  optional bool   clop = 15;
}

message S2C_GetCorpJoin{
  required uint32 ret = 1;
  repeated CorpJoin joins = 2;
}

message C2S_DismissCorp {

}

message S2C_DismissCorp {
  required uint32 ret = 1;
}

message S2C_MyCorpChangedByCorpLeader {

}

message C2S_CorpStaff {
  required uint32 id = 1;
  required uint32 position = 2;
}

message S2C_CorpStaff {
  required uint32 ret = 1;
  required uint32 id = 2;
  required uint32 position = 3;
}

message C2S_GetCorpWorship {

}

message S2C_GetCorpWorship {
  required uint32 ret = 1;
  //军团共有属性
  optional uint32 worship_level = 2;//祭天用的id
  optional uint32 worship_point = 3;//祭天进度
  optional uint32 worship_count = 4;//剩余祭天次数
  //玩家自身属性
  optional uint32 worship_id = 10;//祭天ID
  optional uint32 worship_exp = 11;//祭天军团贡献值 (通过ID和暴击计算得出)
  optional bool worship_crit = 12;//祭天是否暴击
  repeated uint32 worship_award = 13;//今天已经领过的军团贡献
}

message C2S_CorpContribute {
  required uint32 id = 1;
}

message S2C_CorpContribute {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional bool worship_crit = 3;
  optional uint32 worship_exp = 4;//军团经验
  optional uint32 corp_point = 5;//玩家军团点数
}

message C2S_GetCorpContributeAward {
  required uint32 index = 1;
}

message S2C_GetCorpContributeAward {
  required uint32 ret = 1;
  required uint32 index = 2;
  repeated Award awards = 3;
}

message CorpShopItem {
  required uint32 id = 1;
  required uint32 num = 2;//剩余个数
  required bool bought = 3;//玩家是否购买
}

message C2S_GetCorpSpecialShop {

}

message S2C_GetCorpSpecialShop {
  required uint32 ret = 1;
  optional uint32 next_refresh_time = 2;
  repeated CorpShopItem item = 3;
}

message C2S_CorpSpecialShopping {
  required uint32 id = 1;
}

message S2C_CorpSpecialShopping {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated Award awards = 3;
  optional CorpShopItem item = 4;//如果购买成功这个属性会刷过来
}

message C2S_GetHolidayEventInfo {
}

message S2C_GetHolidayEventInfo {
  required uint32 ret = 1;
  optional uint32 time = 2; //数据初始化时间(隔天自动初始化数据)
  repeated HolidayEventAward award = 3; //奖励领取次数列表
}

message HolidayEventAward {
  required uint32 id = 1;
  required uint32 num = 2;
}

message C2S_GetHolidayEventAward {
  required uint32 id = 1;
}

message S2C_GetHolidayEventAward {
  required uint32 ret = 1;
  optional uint32 id = 2;
  optional uint32 num = 3;
}

message C2S_GetCorpChapter {

}

message S2C_GetCorpChapter {
  required uint32 ret = 1;
  optional uint32 chapter_id = 2;//军团长设定的章节ID
  optional uint32 today_chid = 3;//今日攻打的章节ID
  optional uint32 hp = 4;//当前血量
  optional uint32 max_hp = 5;//最大血量
  optional uint32 chapter_count = 6;//玩家剩余挑战次数
  repeated uint32 chapters = 7;//已经通过的军团副本
  optional uint32 reset_cost = 8;//购买需要的元宝
}

message CorpDungeon {
  required uint32 id= 1;//dungeon id
  required uint32 info_id = 2;//monster group id 四个中间随机出来的一个//新副本里面这个字段没啥用
  required uint64 max_hp = 3;
  required uint64 hp = 4;
  repeated CorpMonster monster = 5;
  optional string kill_name = 6;//击杀的人的名字
}

message CorpMonster {
  required uint32 index = 1;
  required uint64 hp = 2;
  required uint64 max_hp = 3;
}

message C2S_GetCorpDungeonInfo {
  required uint32 chapter_id = 1;//今日攻打章节的ID
}

message S2C_GetCorpDungeonInfo {
  required uint32 ret = 1;
  required uint32 chapter_id = 2;
  repeated CorpDungeon dungeon = 3;
}

message C2S_ExecuteCorpDungeon {
  required uint32 id = 1;
  required uint32 info_id = 2;//这个值也要传 保持数据一致
}

message S2C_ExecuteCorpDungeon {
  required uint32 ret = 1;
  required uint32 id = 2;
  required uint32 info_id = 3;
  optional BattleReport info = 4;
  optional CorpDungeon dungeon = 5;
  optional uint64 harm = 7;
  optional uint32 corp_point = 8;
  repeated Award final_award = 9;
}

message S2C_FlushCorpDungeon {
  optional CorpDungeon dungeon = 1;
  optional uint32 hp = 2;
  optional string name = 3;
  optional bool last_hit = 4;
  optional uint64 harm = 5;
}

message C2S_SetCorpChapterId {
  required uint32 id = 1;
}

message S2C_SetCorpChapterId {
  required uint32 ret = 1;
  required uint32 id = 2;
}

message C2S_GetDungeonAwardList {

}

message DungeonAward {
  required uint32 id = 1;
  required uint32 user_id = 2;
  required string name = 3;
  required uint32 index = 4;//蛋的位置必须>=1
}

message S2C_GetDungeonAwardList {
  required uint32 ret = 1;
  optional bool has_award = 2;//玩家有没有砸过彩蛋
  repeated DungeonAward list = 3;
  optional bool has_point = 4;//玩家有没有领过声望奖励
  optional bool has_auth = 5;//玩家今天有没有领奖的权利//用来区别军团副本结束后加入的玩家
}

message C2S_GetDungeonAward {
  required uint32 index = 1;//客户端需求
}

message S2C_GetDungeonAward {
  required uint32 ret = 1;
  required uint32 index = 2;
  optional bool has_award = 3;//砸蛋后刷回来
  optional DungeonAward da = 4;
  repeated Award awards = 5;
}

message S2C_FlushDungeonAward {
  optional DungeonAward da = 1;//刷新砸蛋信息
}

message C2S_GetDungeonAwardCorpPoint {
}

message S2C_GetDungeonAwardCorpPoint {
  required uint32 ret = 1;
  optional uint32 corp_point = 2;
  optional bool has_point= 3;
}

message CorpChapterGlobalRank {
  required uint32 id = 1;
  required string name = 2;
  required uint64 harm = 3;
  required uint32 rank = 4;
  required uint32 corp_id = 5;
  required string corp_name = 6;
  required uint32 main_role = 7;
  optional uint32 dress_id = 8;
  optional uint32 vip = 9;
  optional uint32 clid = 10;
  optional uint32 cltm = 11;
  optional bool   clop = 15;
}

message C2S_GetDungeonCorpRank{

}

message S2C_GetDungeonCorpRank{
  required uint32 ret = 1;
  optional uint32 self_rank = 2;
  repeated CorpChapterGlobalRank ranks = 3;
}

message C2S_GetDungeonCorpMemberRank {

}

message CorpChapterRank {
  required uint32 id = 1;
  required string name = 2;
  required uint64 harm = 3;
  required uint32 main_role = 4;
  optional uint32 dress_id = 5;
  optional uint32 vip = 6;
  optional uint32 sp1 = 7;//代表次数
  optional uint32 clid = 8;
  optional uint32 cltm = 9;
  optional bool   clop = 15;
}

message S2C_GetDungeonCorpMemberRank {
  required uint32 ret = 1;
  repeated CorpChapterRank ranks = 3;
}

message C2S_ResetDungeonCount {

}

message S2C_ResetDungeonCount {
  required uint32 ret = 1;
  //optional uint32 chapter_count =2;
  //optional uint32 reset_cost = 3;这2个信息通过刷副本消息过来
}

message C2S_Share {
  required uint32 id = 1;
  optional uint32 extra = 2; // 不为1则不做处理 (前端要求加的字段，无意义)
}

message S2C_Share {
  required uint32 ret = 1;
  optional uint32 id = 2;
}

message ShareState {
  required uint32 id = 1; // id
  required uint32 step = 2; // 0.不能领取 1.可领取 2.已领取
}

message C2S_GetShareState {
  required uint32 t = 1; // 任务类型
}

message S2C_GetShareState {
  repeated ShareState state = 1;
  optional uint32 share_count = 2;
}

message C2S_GetPhoneBindNotice {
}

message S2C_GetPhoneBindNotice {
  required string notice = 1;
}


message C2S_GetRechargeBack {
}

message S2C_GetRechargeBack {
  required uint32 ret = 1;
  required bool has_recharge = 2;
  optional uint32 money = 3;
  optional uint32 gold = 4;
  optional uint32 vip_exp = 5;
}

message C2S_RechargeBackGold {

}

message S2C_RechargeBackGold {
  required uint32 ret = 1;
  required bool has_recharge = 2;
}

message CorpChapterIdRank {
  required uint32 id = 1;
  required uint32 level = 2;
  required uint32 size = 3;//成员数
  required string name = 4;//军团名
  required string leader_name = 5;//军团长名
  required uint32 icon_pic  = 7;//ICON pic
  required uint32 icon_frame = 8;//ICON frame
  required uint32 chapter_id = 9;//副本进度
  required uint32 rank = 10;
}

message C2S_GetCorpChapterRank {
}

message S2C_GetCorpChapterRank {
  required uint32 ret = 1;
  repeated CorpChapterIdRank ranks= 2;
}

message C2S_ComposeAwakenItem {
  required uint32 id = 1; //合成道具id
}

message S2C_ComposeAwakenItem {
  required uint32 ret = 1;
  required uint32 id = 2;
}

message C2S_FastComposeAwakenItem {
  required uint32 id = 1; //合成道具id
  required uint32 num = 2; //合成道具数量
}

message S2C_FastComposeAwakenItem {
  required uint32 ret = 1;
  required uint32 id = 2;
  required uint32 num = 3;
}


message C2S_PutonAwakenItem {
  required uint32 kid = 1; //武将id
  required uint32 pos = 2; //装备位置
  required uint32 id = 3; //觉醒道具id
}

message S2C_PutonAwakenItem {
  required uint32 ret = 1;
}

message C2S_AwakenKnight {
  required uint32 kid = 1; //觉醒武将id
  repeated uint32 knight_list = 2; //消耗武将id
}

message S2C_AwakenKnight {
  required uint32 ret = 1;
}

message C2S_GetCorpCrossBattleInfo {

}

enum CROSS_BATTLE_STATE{
  ERROR = 0;//错误
  ZERO = 1;//平常
  APPLY = 2;//报名阶段
  WAIT = 3;//匹配
  BATTLE = 4;//战斗
  END = 5;//结束
}

message S2C_GetCorpCrossBattleInfo {
  required uint32 ret = 1;
  optional uint32 state = 2;
  optional bool apply = 3;
  optional uint32 field = 4;
}

message C2S_ApplyCorpCrossBattle {

}

message S2C_ApplyCorpCrossBattle {
  required uint32 ret = 1;
}

message C2S_QuitCorpCrossBattle {

}

message S2C_QuitCorpCrossBattle {
  required uint32 ret = 1;
}

message C2S_GetCorpCrossBattleList {
}

message BattleCorp {
  required uint32 id = 1;
  required string name = 2;
}

message S2C_GetCorpCrossBattleList {
  required uint32 ret = 1;
  repeated BattleCorp corps = 2;
}

message S2C_FlushCorpCrossBattleList {
  required bool add = 1;
  optional BattleCorp corp = 2;
}

message C2S_GetCrossBattleEncourage {

}

message S2C_GetCrossBattleEncourage {
  required uint32 ret = 1;
  optional uint32 total_hp_count = 2;//总的是次数
  optional uint32 total_atk_count = 3;
  optional uint32 hp_count = 4;//自己次数
  optional uint32 atk_count = 5;
}

message C2S_CrossBattleEncourage {
  required uint32 e_type = 1;//1为hp 2为atk
}

message S2C_CrossBattleEncourage {
  required uint32 ret = 1;
  required uint32 e_type = 2;
  optional bool success = 3;
  optional uint32 total_hp_count = 4;//总的是次数
  optional uint32 total_atk_count = 5;
  optional uint32 hp_count = 6;//自己的值
  optional uint32 atk_count = 7;
}

message C2S_GetCrossBattleField {

}

message CrossBattleCorp {
  required uint64 sid = 1;
  required string sname = 2;
  required uint32 corp_id = 3;
  required string name = 4;
  required uint32 total_exp = 5;
  optional uint32 level = 6;
  optional bool fire_on = 7;
  optional uint32 rob_exp = 8;//我方掠夺的经验
  optional uint32 robbed_exp = 9;//掠夺我方的经验
  optional uint32 total_hp = 10;
  optional uint32 total_atk = 11;
  optional uint32 icon_pic = 12;
  optional uint32 icon_frame = 13;
  optional uint32 each_exp = 14;//每打一次
  optional uint32 total_robbed_exp = 15;//我方总共被掠夺的
}

message S2C_GetCrossBattleField {
  required uint32 ret = 1;
  //自己的信息
  optional uint32 kill_count = 2;//个人杀人数
  optional uint32 rob_exp = 3;//抢的经验
  optional uint32 refresh_cd = 4;//刷新对手CD
  optional uint32 battle_cd = 5;//挑战对手CD
  optional uint32 battle_cost = 6;//刷新挑战对手CD所需要的元宝
  //军团总的信息 包括自己的
  repeated CrossBattleCorp corp = 10;
}

message C2S_GetCrossBattleEnemyCorp {
  required uint64 sid = 1;
  required uint32 corp_id = 2;
  required bool is_refresh = 3;
}

message CrossBattleUser {
  required uint32 id = 1;
  required string name = 2;
  required uint32 main_role = 3;
  required uint32 dress_id = 4;
  required uint32 fight_value = 5;
  required uint32 times = 6;
  optional uint32 score = 7;//胜利获得的军团贡献
  optional uint32 clid = 8;
  optional uint32 cltm = 9;
  optional bool   clop = 15;
}

message S2C_GetCrossBattleEnemyCorp {
  required uint32 ret= 1;
  required uint64 sid = 2;
  required uint32 corp_id = 3;
  required bool is_refresh = 4;
  optional bool is_finish = 5;
  optional uint32 refresh_cd = 6;
  repeated CrossBattleUser users = 7;
}

message C2S_CrossBattleChallengeEnemy {
  required uint64 sid = 1;
  required uint32 corp_id = 2;
  required uint32 user_id = 3;
}

message S2C_CrossBattleChallengeEnemy {
  required uint32 ret = 1;
  required uint64 sid = 2;
  required uint32 corp_id = 3;
  required uint32 user_id = 4;
  optional BattleReport info = 5;
  optional uint32 corp_point= 6;
  optional uint32 corp_exp = 7;//这个值客户端计算了
  optional uint32 battle_cd = 8;//战斗CD
  optional CrossBattleUser user = 9;
}

message C2S_ResetCrossBattleChallengeCD {

}

message S2C_ResetCrossBattleChallengeCD {
  required uint32 ret = 1;
  optional uint32 battle_cd = 2;
  optional uint32 battle_cost = 3;//刷新挑战对手CD所需要的元宝
}

message C2S_SetCrossBattleFireOn {
  required uint64 sid = 1;
  required uint32 corp_id = 2;
}

message S2C_SetCrossBattleFireOn {
  required uint32 ret = 1;
  required uint64 sid = 2;
  required uint32 corp_id = 3;
}

message C2S_CrossBattleMemberRank {

}

message CrossBattleRank {
  required uint32 user_id = 1;
  required string name = 2;
  required uint32 rob_exp = 3;
  required uint32 kill_count = 4;
  required uint32 main_role = 5;
  required uint32 dress_id = 6;
  required uint32 vip = 7;
  optional uint32 clid = 8;
  optional uint32 cltm = 9;
  optional bool   clop = 15;
}

message S2C_CrossBattleMemberRank {
  required uint32 ret = 1;
  repeated CrossBattleRank ranks = 2;

}

message S2C_BroadCastState {
  required uint32 state = 1;
}

message C2S_GetCorpCrossBattleTime {

}

message BattleTime {
  required uint32 state = 1;
  required uint32 start = 2;
  required uint32 close = 3;
}

message S2C_GetCorpCrossBattleTime {
  required uint32 ret = 1;
  repeated BattleTime times = 2;
}

message S2C_FlushCorpCrossBattleField {
  required uint32 field = 1;
}

message S2C_FlushCorpEncourage {
  required uint64 sid = 1;
  required uint32 corp_id = 2;
  optional uint32 hp_encourage = 3;
  optional uint32 atk_encourage = 4;
}

message S2C_FlushCorpBattleResult {
  repeated CrossBattleCorp corps = 1;
}

message S2C_FlushFireOn{
  required uint64 sid = 1;
  required uint32 corp_id = 2;
}

message S2C_FlushBattleMemberInfo{
  required uint32 user_id = 1;
  required uint32 kill_count = 2;
  required uint32 rob_exp = 3;
}
// 查询活动
message C2S_WheelInfo {
}

message S2C_WheelInfo {
  required uint32 score = 1; // 可用积分
  required uint32 score_total = 2; //  总积分
  required uint32 pool = 3; // 奖池
  required bool got_reward = 4; // 是否已领取过奖励
  required uint32 pool2 = 5; // 新增奖池2
  required uint32 start = 6;
  required uint32 end = 7;
  required uint32 present = 8;
  optional uint32 bought_times1 = 9; // 今日已购买次数
  optional uint32 bought_times2 = 10; // 今日已购买次数
}

// 抽奖
message C2S_PlayWheel {
  required uint32 id = 1; // 类型
  required uint32 times = 2; // 次数
}

message S2C_PlayWheel {
  required uint32 ret = 1;
  repeated uint32 money = 2;
  repeated uint32 reward_id = 3;     // 1~7配置 8奖池
  required uint32 id = 4;
  optional uint32 rank = 5;
  required uint32 pool = 6;
  required uint32 pool2 = 7;
}

// 领取排名奖励
message C2S_WheelReward {
}

message S2C_WheelReward {
  required uint32 ret = 1;
  repeated Award award = 2;
}

// 获取排行榜
message WheelRanking {
  required string name = 1;
  required uint32 score = 2;
  required uint32 mainrole = 3; // 主角贝斯id
  optional uint32 dress_id = 4;
  optional uint32 clid = 5;
  optional uint32 cltm = 6;
  optional bool	  clop = 7;
}
message C2S_WheelRankingList {
}
message S2C_WheelRankingList {
  repeated WheelRanking ranking = 1;
  required uint32 ret = 2;
}

message C2S_Hard_GetChapterList {

}

message S2C_Hard_GetChapterList {
  required uint32 ret = 1;
  optional uint32 total_star = 2;
  optional uint32 fast_execute_time = 3;
  optional uint32 fast_execute_cd = 4;
  //optional uint32 reset_cost = 5;
  repeated Chapter chapters = 6;
}

message C2S_Hard_GetChapterRank {
}

message S2C_Hard_GetChapterRank {
  required uint32 ret = 1;
  optional uint32 self_rank = 2;
  repeated ChapterRank ranks = 3;
}

message S2C_Hard_AddStage {
  required uint32 chpt_id = 1;
  required Stage stage = 2;
}

message C2S_Hard_ExecuteStage {
  required uint32 id  = 1;
}

message S2C_Hard_ExecuteStage {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional Stage stage = 3;
  optional uint32 type = 4;
  //optional BattleReport info = 5;
  repeated Award awards = 7;
  optional uint32 stage_money = 8;
  optional uint32 stage_exp = 9;
  optional uint32 stage_star = 10;
  optional uint32 rebel = 11;
  optional uint32 rebel_level = 12;
}

message C2S_Hard_ExecuteMultiStage {
  required uint32 id = 1;
  required uint32 wave_id = 2;
}

message S2C_Hard_ExecuteMultiStage {
  required uint32 ret = 1;
  required uint32 id = 2;//stage id
  optional BattleReport info = 3;
  required uint32 next_wave_id = 4;
}

message C2S_Hard_FastExecuteStage {
  required uint32 id  = 1;
}

message S2C_Hard_FastExecuteStage {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional uint32 fast_execute_time = 3;
  optional uint32 fast_execute_cd = 4;
  optional Stage stage = 5;
  repeated Award awards = 6;
  optional uint32 stage_money = 7;
  optional uint32 stage_exp = 8;
  optional uint32 stage_star = 9;
  optional uint32 rebel = 10;
  optional uint32 rebel_level = 11;
}

message C2S_Hard_ResetDungeonExecution {
  required uint32 stage_id = 1;
}

message S2C_Hard_ResetDungeonExecution {
  required uint32 ret = 1;
  required uint32 stage_id = 2;
  optional Stage stage = 3;//这个副本
  optional uint32 next_reset_cost = 4; //下次消耗元宝
}

message C2S_Hard_FinishChapterBoxRwd {
  required uint32 ch_id = 1;
  required uint32 box_type = 2;//1铜箱子 2银箱子 3金箱子
}

message S2C_Hard_FinishChapterBoxRwd {
  required uint32 ret = 1;
  required uint32 ch_id  = 2;
  required uint32 box_type = 3;
  //repeated Award awards = 4;
}

message ChapterRoit {
  required uint32 ch_id = 1;
  required uint32 open_time = 2;//开启时间戳
  required uint32 roit_id = 3;//roit id
  required bool is_finish = 4;//是否完成
}

message C2S_Hard_GetChapterRoit {
}

message S2C_Hard_GetChapterRoit  {
  required uint32 ret = 1;
  repeated ChapterRoit roits = 2;
}

message C2S_Hard_FinishChapterRoit {
  required uint32 ch_id = 1;
}

message S2C_Hard_FinishChapterRoit {
  required uint32 ret = 1;
  required uint32 ch_id  = 2;
  optional ChapterRoit roit = 3;//roit 状态返回
  optional BattleReport info = 4;
  repeated Award awards = 5;
  optional uint32 money = 6;
  optional uint32 exp = 7;
}

message C2S_Hard_FirstEnterChapter {
  required uint32 id = 1;
}

message S2C_Hard_FirstEnterChapter {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional Chapter chapter = 3;
}

// 查询vip礼包信息
message C2S_VipDiscountInfo {
}

message S2C_VipDiscountInfo {
  repeated uint32 id = 1; // 已购买id
  required uint32 ret = 2; // OK
}

// 购买vip礼包
message C2S_BuyVipDiscount {
  required uint32 id = 1;
}

message S2C_BuyVipDiscount {
  required uint32 ret = 1; // OK
}

message C2S_GetTencentReward {
  required uint32 award_id = 1;
  required uint64 server_id = 2;
}

message C2S_GetCrossBattleInfo {

}

enum CROSS_USERPK_STATE{
  SERROR = 0;//错误
  SZERO = 1;//平常
  SSCORE = 2;//积分赛
  SWAIT1 = 3;//休息阶段1
  SLADDER = 4;//争霸赛
  SWAIT2 = 5;//休息阶段2
}

message S2C_GetCrossBattleInfo {
  required uint32 ret = 1;
  optional uint32 state = 2;
  optional uint32 group = 3;
  optional bool has_arena = 4;
}

message C2S_GetCrossBattleTime {

}

message S2C_GetCrossBattleTime {
  required uint32 ret = 1;
  repeated BattleTime times = 2;
}

//message C2S_GetCrossBattleGroup {
//}
//
//message CrossBattleGroup {
//  required uint32 group = 1;
//  required uint32 num = 2;
//}
//
//message S2C_GetCrossBattleGroup {
//  required uint32 ret = 1;
//  repeated CrossBattleGroup groups = 2;
//}

message C2S_SelectCrossBattleGroup {
  required uint32 group = 1;
}

message S2C_SelectCrossBattleGroup {
  required uint32 ret = 1;
  required uint32 group = 2;
}

message C2S_EnterScoreBattle {

}

message S2C_EnterScoreBattle {
  required uint32 ret = 1;
  optional uint32 score = 2;//积分
  optional uint32 rank = 3;//排名
  optional uint32 refresh_cost = 4;//刷新所需要元宝
  optional uint32 battle_cost = 5;//刷新挑战对手CD所需要的元宝
  optional uint32 wins = 6;//今日连胜次数
  optional uint32 refresh_count = 7;//可刷新次数
  optional uint32 battle_count = 8;//可挑战次数
  optional uint32 max_wins = 9;//今日最大连胜次数
  optional uint32 buy_battle = 10;//剩余可购买挑战次数
}

message C2S_GetCrossBattleEnemy {
  required bool is_refresh = 1;
}

message CrossSingleUser {
  required uint32 id = 1;
  required string name = 2;
  required uint32 main_role = 3;
  required uint32 dress_id = 4;
  required uint32 fight_value = 5;
  required uint64 sid = 6;
  required string sname = 7;
  required uint32 group = 8;
  required uint32 c_type = 9;//约定type 1最高 2中等 3最低
  required bool has_fight= 10;
  optional uint32 clid = 11;
  optional uint32 cltm = 12;
  optional bool   clop = 15;
}

message S2C_GetCrossBattleEnemy {
  required uint32 ret = 1;
  optional uint32 refresh_count = 2;
  repeated CrossSingleUser users = 4;
}

message C2S_ChallengeCrossBattleEnemy{
  required uint64 sid = 1;
  required uint32 user_id = 2;
}

message S2C_ChallengeCrossBattleEnemy {
  required uint32 ret = 1;
  required uint64 sid = 2;
  required uint32 user_id = 3;
  optional BattleReport info = 4;
  optional uint32 battle_count = 5;//剩余战斗次数
  repeated Award awards = 6;
  optional uint32 max_wins = 7;
  optional uint32 wins = 8;
  optional uint32 score = 9;
  optional uint32 rank = 10;
}

message C2S_GetWinsAwardInfo {

}

message S2C_GetWinsAwardInfo {
  required uint32 ret = 1;
  repeated uint32 ids = 2;//已经领过的
}

message C2S_FinishWinsAward {
  required uint32 id = 1;
}

message S2C_FinishWinsAward {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated Award awards = 3;
}

message C2S_GetCrossBattleRank {
  required uint32 group = 1;
}

message S2C_GetCrossBattleRank {
  required uint32 ret = 1;
  required uint32 group = 2;
  repeated CrossSingleRank ranks = 3;
}

message CrossSingleRank {
  required uint32 user_id = 1;
  required uint64 sid = 2;
  required string name = 3;
  required string sname = 4;
  required uint32 main_role = 5;
  required uint32 dress_id = 6;
  required uint32 score = 8;
  required uint32 max_wins = 9;
  required uint32 fight_value = 10;
  optional uint32 rank = 11;
  optional uint32 clid = 12;
  optional uint32 cltm = 13;
  optional bool   clop = 15;
}

message C2S_CrossCountReset {
  required uint32 reset_type = 1;//1代表刷新次数 2代表挑战次数
  optional uint32 count = 2;//购买的量
}

message S2C_CrossCountReset {
  required uint32 ret = 1;
  required uint32 reset_type = 2;
  optional uint32 refresh_cost = 3;//刷新所需要元宝//根据TYPE来 哪个Type 哪个有值
  optional uint32 refresh_count = 4;//可刷新次数
  optional uint32 battle_cost = 5;//刷新挑战对手CD所需要的元宝
  optional uint32 battle_count = 6;//可挑战次数
  optional uint32 buy_battle = 7;//剩余可购买挑战次数
  optional uint32 count = 8;
}

message S2C_FlushCrossContestScore {
  required uint32 user_id = 1;
  required uint32 score = 2;
}

message S2C_FlushCrossContestRank {
  required uint32 user_id = 1;
  required uint32 rank = 2;
}

message C2S_RecycleDress {
  required uint32 id = 1;
  required uint32 type = 2; // 0:重生 1:重生预览
}
message S2C_RecycleDress {
  required uint32 ret = 1;
  repeated Award award = 2;
  required uint32 type = 3; // 0:重生 1:重生预览
}


message C2S_ChangeTitle {
  required uint32 id = 1; //装备称号ID
}

message S2C_ChangeTitle {
  required uint32 ret = 1;
  required uint32 id = 2;
}

message C2S_GetTimeDungeonList {
}

message S2C_GetTimeDungeonList {
  required uint32 ret = 1;
  repeated TimeDungeonInfo info = 2;
}

message S2C_FlushTimeDungeonList {
  repeated TimeDungeonInfo info = 1;
}

message TimeDungeonInfo {
  required uint32 type_id = 1; //副本类型ID
  required uint32 start_time = 2; //开始时间戳
  required uint32 end_time = 3; //结束时间戳
}

message C2S_GetTimeDungeonInfo {
}

message S2C_GetTimeDungeonInfo {
  required uint32 ret = 1;
  optional UserTimeDungeonInfo info = 2;
}

message UserTimeDungeonInfo {
  required uint32 id = 1; //副本ID
  required uint32 time = 2; //副本初始化时间戳
  required uint32 dungeon_index = 3; //关卡进度(1-8,0:已通关)
  required uint32 buff_id = 4; //鼓舞ID(0为未鼓舞)
}

message C2S_AddTimeDungeonBuff {
  required uint32 id = 1; //副本ID
  required uint32 dungeon_index = 2; //关卡进度(1-8)
  required uint32 buff_id = 3; //鼓舞ID
}

message S2C_AddTimeDungeonBuff {
  required uint32 ret = 1;
  optional UserTimeDungeonInfo info = 2;
}

message C2S_AttackTimeDungeon {
  required uint32 id = 1; //副本ID
  required uint32 dungeon_index = 2; //关卡进度(1-8)
}

message S2C_AttackTimeDungeon {
  required uint32 ret = 1;
  optional BattleReport battle_report = 2;
  optional UserTimeDungeonInfo info = 3;
  repeated Award award = 4;
}

// 查
message C2S_RichInfo {
}
message S2C_RichInfo {
  required uint32 step = 1;
  required uint32 score = 2;
  required bool got_reward = 3; // 是否已领取排行榜奖励
  repeated uint32 shop_item = 4; // 商店物品
  repeated uint32 shop_item_count = 5; // 商店物品数量
  repeated uint32 round_award = 6;
  required uint32 start = 7;
  required uint32 end = 8;
  required uint32 present = 9;
  optional uint32 bought_times = 10; // 今日已购买次数
}

// 走
message C2S_RichMove {
  required uint32 dice = 1;     // 非0为遥控骰子，骰子可选值为1到6
  required uint32 count = 2;	// 1:走1次 10:走10次
  required uint32 step = 3; // 最终总步数
}
message S2C_RichMove {
  required uint32 ret = 1;
  repeated uint32 dice = 2;     // 骰子结果
  repeated int32 reroll = 3; // 再次移动，可能有多次
  repeated Award award = 4; // 奖励
  repeated uint32 goods = 5; // 新增货物
  repeated uint32 count = 6; // 新增货物数量
  repeated uint32 event = 7; // 事件
}

// 买
message C2S_RichBuy {
  required uint32 id = 1;
  required uint32 count = 2;
}
message S2C_RichBuy {
  required uint32 ret = 1;
}

// 领
message C2S_RichReward {
  required uint32 type = 1;     // 0:排行奖励 1:圈数奖励
  optional uint32 id = 2;     // 圈数奖励对应配置id
}

message S2C_RichReward {
  required uint32 ret = 1;
}

// 榜
message C2S_RichRankingList {
}
message S2C_RichRankingList {
  repeated WheelRanking ranking = 1;
  required uint32 ret = 2;
}


//动态更新代码协议
message C2S_GetCodeId {

}
message S2C_GetCodeId {
   required string id = 1;
}

message C2S_GetCode {

}

message S2C_GetCode {
   required string code = 1;
}
message C2S_SetCDLevel {
   required uint32 level = 1;
}

message S2C_SetCDLevel {
   required uint32 ret = 1;
}

message C2S_UpdateFightValue {
}
message C2S_GetSpreadId {
}
message S2C_GetSpreadId {
    required uint32 ret = 1;
    required string id = 2;
}
message C2S_RegisterId {
    required string id = 1;
}
message S2C_RegisterId {
    required uint32 ret = 1;
    required string invitor_code = 2;
}
message C2S_InvitorGetRewardInfo {

}
message InvitorRewardInfo {
    required uint32 reward_id = 1;  //奖励id
    required uint32 invited_qua = 2;  //玩家品质
    required string invited_name = 3;  //玩家信息
    required uint32 invited_id = 4;  //玩家所在的服
    required uint64 invited_sid = 5;  //玩家所在的服
}
message S2C_InvitorGetRewardInfo {
    required uint32 score = 1;
    required uint32 sum_score = 2;
    required uint32 invited_num = 3;
    repeated InvitorRewardInfo can_reward = 4 ;  //可以领取奖励信息
    repeated InvitorRewardInfo has_reward = 5 ;  //已经领取的奖励信息
}
message C2S_InvitorDrawScoreReward { }
message S2C_InvitorDrawScoreReward {
    required uint32 rret = 1; //1 成功,其他为错误码
}
message C2S_InvitorDrawLvlReward {
    required uint32 reward_id = 1;  //奖励id
    required uint32 invited_id = 2;
    required uint64 invited_sid = 3;
    required string invited_name = 4;
    required uint32 invited_qua = 5;
}
message C2S_InvitedDrawReward {
    required uint32 id = 1;
}
message C2S_InvitedGetDrawReward {

}
message InvitedReward {
    required uint32 id = 1;
    required bool stat = 2; //1可以领，0已经领
}
message S2C_InvitedGetDrawReward {
    repeated InvitedReward list = 1;
}
message C2S_QueryRegisterRelation {
}
message S2C_QueryRegisterRelation {
    required bool rret = 1;  //1已绑定，0未绑定
}
message S2C_InvitorDrawLvlReward {
    required uint32 ret = 1;  //1领奖成功，其他为错误码
}
message S2C_InvitedDrawReward{
    required uint32 ret = 1;  //1领奖成功，其他为错误码
}
message C2S_GetCrossArenaInfo {
}

message S2C_GetCrossArenaInfo {
  required uint32 ret = 1;
  optional bool invited = 2;//有没有参赛资格
  optional uint32 challenge_count = 3;//剩余挑战次数
  optional uint32 buy_count = 4;//剩余购买次数
  optional uint32 buy_cost = 5;
}

message C2S_GetCrossArenaInvitation {
}

message S2C_GetCrossArenaInvitation {
  required uint32 ret = 1;
  optional uint32 invite_type = 2;//1跨服获得 2竞技场获得
  optional uint32 rank = 3;//排名
  optional uint32 group = 4;//阵营
  //optional string sname = 5;//服务器名称
  optional uint32 time = 5;
}
//以这个为基准了 之前的算了 后面简版USER(非战斗)都用这个结构体
//2个必有字段
message CrossUser {
  required uint32 id = 1;
  required uint64 sid = 2;
  optional string name = 3;
  optional string sname = 4;
  optional uint32 dress_id = 5;
  optional uint32 main_role = 6;
  optional uint32 fight_value = 7;
  optional uint32 sp1 = 8;//特殊字段 前后端对应 模块内对应
  optional uint32 sp2 = 9;
  optional uint32 fight_pet = 10;//战宠
  optional uint32 level = 11;//等级 //这个后面补的 有些地方还是都需要等级的 之前有2个模块用了SP2字段作为等级
  optional uint32 fid = 12;//头像框
  optional uint32 vip = 13;//
  optional uint32 sp3 = 14;
  optional uint32 sp4 = 15;
  optional uint32 sp5 = 16;
  optional uint32 sp6 = 17;
  optional uint32 sp7 = 18;
  optional uint32 sp8 = 19;
  optional uint32 clid = 20;
  optional uint32 cltm = 21;
  optional bool   clop = 22;
}

message C2S_GetCrossArenaBetsInfo {
}

message S2C_GetCrossArenaBetsInfo {
  required uint32 ret = 1;
  optional uint32 total_bet = 2;//总奖池
  optional uint32 bet = 3;//玩家押注数量
  repeated CrossUser bet_users = 4;//押注的玩家sp1->押注级别bet_rank
}

message C2S_GetCrossArenaBetsList {
}

message S2C_GetCrossArenaBetsList {
  required uint32 ret = 1;
  repeated CrossUser users = 2;//sp1->关注度
}

message C2S_CrossArenaPlayBets {
  required uint32 user_id = 1;
  required uint64 sid = 2;
  required uint32 bet_rank = 3;
}

message S2C_CrossArenaPlayBets {
  required uint32 ret = 1;
  required uint32 user_id = 2;
  required uint64 sid = 3;
  required uint32 bet_rank = 4;
  repeated CrossUser users = 5;
}

message C2S_GetCrossArenaRankTop {
}

message S2C_GetCrossArenaRankTop {
  required uint32 ret = 1;
  repeated CrossUser users = 2;//sp1->排名rank
}

message C2S_GetCrossArenaRankUser {
}

message S2C_GetCrossArenaRankUser {
  required uint32 ret = 1;
  optional uint32 rank = 2;//玩家自身排行
  repeated CrossUser users = 3;//sp1->排名rank
}

message C2S_CrossArenaRankChallenge {
  required uint32 challenge_rank = 1;
}

message S2C_CrossArenaRankChallenge {
  required uint32 ret = 1;
  required uint32 challenge_rank = 2;
  //optional uint32 origin_rank = 3;//玩家原来
  //optional uint32 new_rank = 4;//玩家新排名
  optional BattleReport battle_report = 5;
  //repeated CrossUser users = 6;//sp1->排名rank
  optional uint32 challenge_count = 7;
  repeated Award awards = 8;
}

message C2S_CrossArenaCountReset {
  required uint32 count = 1;
}

message S2C_CrossArenaCountReset {
  required uint32 ret = 1;
  required uint32 count = 2;
  optional uint32 challenge_count = 3;
  optional uint32 buy_count = 4;//已经购买
  optional uint32 buy_cost = 5;//下次购买价格
}

message C2S_GetCrossArenaBetsAward{
}

message S2C_GetCrossArenaBetsAward{
  required uint32 ret = 1;
  optional bool award = 2;
  optional uint32 award_id = 3;
  optional uint32 award_size =4;
  optional uint32 bet = 5;
}

message C2S_CrossArenaServerAwardInfo {
}

message S2C_CrossArenaServerAwardInfo {
  required uint32 ret = 1;
  repeated uint32 ids = 2;
}

message C2S_FinishCrossArenaServerAward {
  required uint32 id = 1;
}

message S2C_FinishCrossArenaServerAward {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated Award awards = 3;
}

message C2S_FinishCrossArenaBetsAward {
}

message S2C_FinishCrossArenaBetsAward {
  required uint32 ret = 1;
  optional bool award = 2;
  repeated Award awards = 3;
}

message C2S_CrossArenaAddBets {
  required uint32 size = 1;
}

message S2C_CrossArenaAddBets {
  required uint32 ret = 1;
  required uint32 size = 2;
  optional uint32 total = 3;
}

message C2S_GetCrossUserDetail {
  required uint32 user_id = 1;
  required uint64 sid = 2;
}

message S2C_GetCrossUserDetail {
  required uint32 ret = 1;
  required uint32 user_id = 2;
  required uint64 sid = 3;
  optional ArenaBattleUser user = 4;
}

message RebelBoss {
	required uint32 id =1;
	required uint64 hp = 2;
	required uint64 max_hp = 3;
	required uint32 level = 4;
	optional string killer_name = 5;
	optional uint32 killer_time = 6;
	required uint32 last_att_index = 7;
	required uint32 produce_time = 8;  //BOSS产生时间
}

message C2S_EnterRebelBossUI {
}

message S2C_EnterRebelBossUI {
	required uint32 ret = 1;
	required uint32 total_honor = 2;
	required uint32 group_thonor_rank = 3;
	required uint64 max_harm = 4;
	required uint32 group_mharm_rank = 5;
	required uint32 corp_rank = 7;
	required RebelBoss rebel_boss = 8;
	required uint32 state = 9;                     //0:活动关闭 1:活动期间
	repeated RebelBossRank group_first_ranks = 10; //各阵容累计荣誉排名第一
	optional uint32 att_count = 11;                //攻击次数
	optional uint32 remain_pur_count = 13;         //剩余购买挑战次数
	optional uint32 group = 14;                    //所在阵容
	optional uint32 end_time = 15;                 //state=1时，活动剩余时间
}

message C2S_FlushBossACountTime {
}

message S2C_FlushBossACountTime {
	required uint32 ret = 1;
	required uint32 attack_count_time = 2;  //挑战次数刷新时间
}

message C2S_SelectAttackRebelBossGroup {
	required uint32 group  = 1;
}

message S2C_SelectAttackRebelBossGroup {
	required uint32 ret = 1;
	required uint32 group  = 2;
}

message C2S_ChallengeRebelBoss {
	required uint32 time = 1; //BOSS产生时间
}

message S2C_ChallengeRebelBoss {
	required uint32 ret = 1;
	optional BattleReport report = 2;
	optional uint32 honor = 3;   //荣誉
	optional uint64 harm = 4;    //伤害
	optional Award faward = 5;   //第一次攻击奖励
	optional Award kaward = 6;   //击杀奖励
	optional uint32 crit_id  = 7;//攻击奖励
}

message RebelBossRank {
	required uint32 id = 1;
	required uint32 fight_value = 2;  //战力
	required uint32 mode = 3; //1:累计荣誉 2:最高伤害
	required uint64 value = 4;
	required uint32 rank = 5;
	required string name = 6;
	required string corp_name = 7;
	required uint32 user_id = 8;
	required uint32 dress_id = 9;
	required uint32 group = 10;
	optional uint32 clid  = 11;
	optional uint32 cltm  = 12;
	optional bool	clop  = 13;
}

message RebelBossSimpleRank {
	required uint32 rank = 1;
	required uint32 group = 2;
	required uint64 value = 3; //累计荣誉,最高伤害
}

enum REBEL_BOSS_RANK_TYPE {
	RANK_HONOR = 1;
	RANK_MAX_HARM = 2;
}

message C2S_RebelBossRank {
	required uint32 mode = 1;
	required uint32 group = 2;
}

message S2C_RebelBossRank {
	required uint32 ret = 1;
	required uint32 mode = 2;
	required uint32 group = 3;
	repeated RebelBossRank rbh_ranks = 4;    //累计荣誉排名
	repeated RebelBossRank rbmh_ranks = 5;   //最高伤害排名
	optional RebelBossSimpleRank rbh_my_rank = 6;
	optional RebelBossSimpleRank rbmh_my_rank = 7;
}

enum REBEL_BOSS_AWARD_TYPE {
	HARM = 1;
	BOSS_LEVEL = 2;
	CORP_HONOR = 3;
}

message C2S_RebelBossAwardInfo {
	required uint32 mode = 1; //1:荣誉奖励 2:BOSS等级奖励 3:军团奖励
}

message S2C_RebelBossAwardInfo {
	required uint32 ret = 1;
	required uint32 mode = 2;
	repeated uint32 status = 3; //info id
}

message C2S_RebelBossAward {
	required uint32 mode = 1;	//1:击杀奖励 2:等级奖励 3:军团奖励
	required uint32 id = 2;
}

message S2C_RebelBossAward {
	required uint32 ret = 1;
	required uint32 id = 2;
	repeated Award awards = 3;
}

message AttackRebelBossInfo {
	required string name = 1;
	required uint64 harm = 2;
}

//5s 刷新一次BOSS信息
message C2S_RefreshRebelBoss {
	required uint32 last_att_index = 1;
}

message S2C_RefreshRebelBoss {
	required uint32 ret = 1;
	required RebelBoss rebel_boss = 2;
	repeated AttackRebelBossInfo infos = 3;
}

message C2S_PurchaseAttackCount {
	required uint32 count = 1;
}

message S2C_PurchaseAttackCount {
	required uint32 ret = 1;
	required uint32 attack_count = 2;    //可攻击次数
	required uint32 remain_pur_count = 3;//剩余购买挑战次数
}

message C2S_GetRebelBossReport {
}

message BossReport {
	required uint32 boss_id = 1;
	required uint32 boss_level = 2;
	
	optional uint32 time1 = 3;
	optional string name1 = 4;
	optional Award  award1 = 5;

	optional uint32 time2 = 6;
	optional string name2 = 7;
	optional Award  award2 = 8;
}

//暂定显示10条
message S2C_GetRebelBossReport {	
	required uint32     ret = 1;
	repeated BossReport reports = 2;
}

message C2S_RebelBossCorpAwardInfo {
}

message RBCRS {
	required uint32 activity_status = 1; //1:活动开启中 0:活动未开启
	required uint32 award_status = 2;    //1:已经领取   0:未领取
	required uint32 condition_status = 3;//1:满足条件   0:不满足条件
}

message RebelBoss_CorpRank {
	required uint32 rank = 1;
	required string corp_name = 2;
	required uint32 honor = 3;
	optional RBCRS state = 4;
}

message S2C_RebelBossCorpAwardInfo {
	required uint32 ret = 1;
	repeated RebelBoss_CorpRank ranks = 2;
	optional RebelBoss_CorpRank my_rank = 3;
}

message C2S_GetBlackcardWarning {
}

message S2C_GetBlackcardWarning {
  required bool warning = 1;
}

// 查询vip日礼包信息
message C2S_VipDailyInfo {
}

message S2C_VipDailyInfo {
  optional uint32 id = 1; // 下个可购买的vip礼包
	required uint32 ret = 2; // 占位, 不然lua解析出错
}

// 购买vip日礼包
message C2S_BuyVipDaily {
}

message S2C_BuyVipDaily {
  required uint32 ret = 1; // OK
}

//限时优惠
message C2S_ShopTimeInfo {
	
}

message S2C_ShopTimeInfo {
	required uint32 ret = 1;			//返回值，1表示成功，其他表示异常
	required uint32 progress = 2;		//进度条值
	optional uint32 time = 3;			//优惠充值所剩时间
	optional uint32	rechargeId = 4;		//充值Id
	optional uint32	extra_gold = 5;		//额外赠送元宝
}

message C2S_ShopTimeRewardInfo {
	
}

message S2C_ShopTimeRewardInfo {
	required uint32 ret = 1;				//返回值，1表示成功，其他表示异常
	repeated uint32 welfare_id = 2;			//全服奖励已领取id
	required uint32 recharge_count = 3;		//充值人数
}

message C2S_ShopTimeGetReward {
	required uint32 id = 1;
}

message S2C_ShopTimeGetReward {
	required uint32 ret = 1;
	repeated Award awards = 2;
}

message S2C_ShopTimePurchase {
	required uint32 ret = 1;            //返回值，1表示成功，其他表示异常
    required uint32 progress = 2;       //进度条值
    required uint32 time = 3;           //优惠充值所剩时间
    required uint32 rechargeId = 4;     //充值Id
	optional uint32	extra_gold = 5;		//额外赠送元宝
}

message C2S_ShopTimeStartTime {

}

message S2C_ShopTimeStartTime {
	required uint32 ret = 1;
	required uint32 start_time = 2;		//开服时间
}

message C2S_GetUserRice {
}

message S2C_GetUserRice {
  required uint32 ret = 1;
}

message S2C_UpdateUserRice {
  required UserRice user_rice = 1;
}

message C2S_FlushRiceRivals {
}

message S2C_FlushRiceRivals {
  required uint32 ret = 1;
}

message C2S_RobRice {
  required uint32 user_id = 1;
}

message S2C_RobRice {
  required uint32 ret = 1;
  optional BattleReport battle_report = 2;
  repeated Award rewards = 3;
  optional uint32 rob_init_rice = 4; //抢夺到的流动粮草
  optional uint32 rob_growth_rice = 5; //强夺到的固定粮草
  optional uint32 rob_crit_rice = 6; //额外获得的暴击粮草
}

message S2C_ChangeUserRice {
  required uint32 user_id = 1;
  required uint32 init_rice = 2;
  required uint32 growth_rice = 3;
  required uint32 rice_refresh_time = 4;
  required uint32 rice_rank = 5;
}

message C2S_GetRiceEnemyInfo {
}

message S2C_GetRiceEnemyInfo {
  required uint32 ret = 1;
  repeated RiceEnemy enemys = 2;
}

message C2S_RevengeRiceEnemy {
  required uint32 enemy_id = 1;
}

message S2C_RevengeRiceEnemy {
  required uint32 ret = 1;
  required uint32 enemy_id = 2;
  optional BattleReport battle_report = 3;
  repeated Award rewards = 4;
  optional uint32 rob_init_rice = 5; //抢夺到的流动粮草
  optional uint32 rob_growth_rice = 6; //强夺到的固定粮草
  optional uint32 rob_crit_rice = 7; //额外获得的暴击粮草
}

message C2S_GetRiceAchievement {
  required uint32 achievement_id = 1;
}

message S2C_GetRiceAchievement {
  required uint32 ret = 1;
  required uint32 achievement_id = 2;
  repeated Award rewards = 3;
}

message C2S_GetRiceRankList {
}

message S2C_GetRiceRankList {
  required uint32 ret = 1;
  repeated RiceRankUser rank_list = 2;
  optional uint32 my_rank = 3;
}

message C2S_GetRiceRankAward {
}

message S2C_GetRiceRankAward {
  required uint32 ret = 1;
  optional uint32 rank = 2;
  repeated Award rewards = 3;
}

message C2S_BuyRiceToken {
  required uint32 token_type = 1; //0:抢粮令,1:复仇令
  required uint32 num = 2; //购买次数
}

message S2C_BuyRiceToken {
  required uint32 ret = 1;
}

message S2C_FlushRiceRank {
  required uint32 user_id = 1;
  required uint32 rice_rank = 2;
}

message C2S_PushSingleInfo{
}

message S2C_PushSingleInfo{
	optional string content		= 1;
	optional uint32 pushtime	= 2;
	optional uint32 level		= 3;	// 如果为0则表示都可以
	optional uint32 vip_level	= 4;	// 同上解释
}

message C2S_GetInvitorName {
    required string invitor_code = 1;
}
message S2C_GetInvitorName {
    required uint32 ret = 1;
    required uint64 sid = 2;
    required string name = 3;
}

message MonthFundTime {
	required uint32 recharge_start_time = 1;
	required uint32 recharge_end_time = 2;
	required uint32 reward_start_time = 3;
	required uint32 reward_end_time = 4;
}

message C2S_GetMonthFundBaseInfo {

}

message S2C_GetMonthFundBaseInfo {
	required uint32 ret = 1;
	required MonthFundTime mfd_time = 2;	//配置时间
	required uint32 fund_kind = 3;			//基金类型 1表示大基金 2表示小基金 3表示大小基金
	required bool	activate = 4;			//是否激活双月卡
	required bool	buy_big = 5;			//大基金是否购买
	required bool	buy_small = 6;			//小基金是否购买
}

message MonthFund {
	required uint32 day = 1;				//当前是第几天
	repeated uint32 award_days_big = 2;		//大基金已领取的天
	repeated uint32 award_days_small = 3;	//小基金已领取的天
}

message C2S_GetMonthFundAwardInfo {
}

message S2C_GetMonthFundAwardInfo {
	required uint32 ret = 1;
	required MonthFund fund = 2;
}

message C2S_GetMonthFundAward {
	required uint32 day = 1;
	required uint32 type = 2;	//1表示288档，2表示128档
}

message S2C_GetMonthFundAward {
	required uint32 ret = 1;
	required MonthFund fund = 2;
}

message CorpChapterSnapShot {
  required uint32 id = 1;
  required uint64 hp = 2;
  required uint64 max_hp = 3;
}

message C2S_SetNewCorpRollbackChapter {
  required bool rollback = 1;
}

message S2C_SetNewCorpRollbackChapter {
  required uint32 ret = 1;
  required bool rollback = 2;
}

message C2S_CorpUpLevel {
}

message S2C_CorpUpLevel {
  required uint32 ret = 1;
  required uint32 level = 2;
  required uint32 exp = 3;
}

message S2C_CorpUpLevelBroadcast {
  required uint32 level = 1;
  required uint32 exp = 2;
}

message CorpTech {
  required uint32 tech_id = 1;
  required uint32 tech_level = 2;
}

message C2S_GetCorpTechInfo {

}

message S2C_GetCorpTechInfo {
  required uint32 ret = 1;
  repeated CorpTech corp_techs = 2;
  repeated CorpTech user_techs = 3;
}

message C2S_DevelopCorpTech {
  required uint32 tech_id = 1;
}

message S2C_DevelopCorpTech {
  required uint32 ret = 1;
  required uint32 tech_id = 2;
  required uint32 tech_level = 3;
  required uint32 exp = 4;
}

message S2C_DevelopCorpTechBroadcast {
  repeated CorpTech corp_techs = 1;
}

message C2S_LearnCorpTech {
  required uint32 tech_id = 1;
}

message S2C_LearnCorpTech {
  required uint32 ret = 1;
  required uint32 tech_id = 2;
  required uint32 tech_level = 3;
}

message C2S_GetNewCorpChapter {

}

message S2C_GetNewCorpChapter {
  required uint32 ret = 1;
  repeated CorpChapterSnapShot chapters = 2;//今天能打的章节ID
  repeated uint32 finish_ch= 3;//已经通过的军团副本
  optional uint32 chapter_count = 4;//玩家剩余挑战次数
  optional uint32 reset_cost = 5;//购买需要的元宝
  repeated uint32 finish_awards = 6;//已经领取的通关奖励
  optional bool rollback_chapter = 7; //次日军团副本回退章节
}

message C2S_GetNewCorpDungeonInfo {
  required uint32 chapter_id = 1;//今日攻打章节的ID
}

message S2C_GetNewCorpDungeonInfo {
  required uint32 ret = 1;
  required uint32 chapter_id = 2;
  repeated CorpDungeon dungeon = 3;
}

message C2S_ExecuteNewCorpDungeon {
  required uint32 id = 1;//副本ID
}

message S2C_ExecuteNewCorpDungeon {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional BattleReport info = 4;
  optional CorpDungeon dungeon = 5;
  optional uint64 harm = 7;
  optional uint32 corp_point = 8;
  repeated Award final_award = 9;
  optional uint32 star = 10;
}

message S2C_FlushNewCorpDungeon {
  optional CorpDungeon dungeon = 1;
  //optional uint32 hp = 2;
  optional string name = 3;
  optional bool last_hit = 4;
  optional uint64 harm = 5;
}

message C2S_GetNewDungeonAwardList {
  required uint32 dungeon_id = 1;//副本ID
}

message S2C_GetNewDungeonAwardList {
  required uint32 ret = 1;
  required uint32 dungeon_id = 2;
  optional bool has_award = 3;//玩家有没有砸过彩蛋
  repeated DungeonAward list = 4;
  optional bool has_auth = 5;//玩家今天有没有领奖的权利//用来区别军团副本结束后加入的玩家
}

message C2S_GetNewDungeonAward {
  required uint32 dungeon_id = 1;
  required uint32 index = 2;//客户端需求
}

message S2C_GetNewDungeonAward {
  required uint32 ret = 1;
  required uint32 dungeon_id = 2;
  required uint32 index = 3;
  optional bool has_award = 4;//砸蛋后刷回来
  optional DungeonAward da = 5;
  repeated Award awards = 6;
}

message C2S_GetNewDungeonCorpMemberRank {

}

message S2C_GetNewDungeonCorpMemberRank {
  required uint32 ret = 1;
  repeated CorpChapterRank ranks = 3;
}

message S2C_FlushNewDungeonAward {
  optional uint32 dungeon_id = 1;
  optional DungeonAward da = 2;//刷新砸蛋信息
}

message C2S_ResetNewDungeonCount {

}

message S2C_ResetNewDungeonCount {
  required uint32 ret = 1;
  optional uint32 chapter_count = 2;//玩家剩余挑战次数
  optional uint32 reset_cost = 3;//购买需要的元宝
}

message C2S_GetNewChapterAward {
  required uint32 id = 1;
}

message S2C_GetNewChapterAward {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated Award awards = 3;
}

message C2S_GetNewDungeonAwardHint {

}

message AwardHint {
  required uint32 id = 1;//dungeon id
  required bool has_award = 2;//玩家有没有砸过彩蛋
  required bool has_auth = 3;//玩家今天有没有领奖的权利//用来区别军团副本结束后加入的玩家
  required bool is_finish = 4;//章节是否完成
  optional uint32 award_id = 5;
}

message S2C_GetNewDungeonAwardHint {
  required uint32 ret = 1;
  repeated AwardHint hints = 2;
}
message C2S_TreasureSmelt {
    required uint32 index = 1;    //treasure_fragment_smelt_info.xml中的id
    repeated uint32 treasure_ids = 2;   //服务器限定最多为5个
}
message S2C_TreasureSmelt {
    required uint32 ret = 1;
}
message C2S_TreasureForge {
    required uint32 id = 1;      //treasure index id
}
message S2C_TreasureForge {
    required uint32 ret = 1;     //此次操作的结果
    required uint32 id = 2;            //treasure index id
    required uint32 forge_id = 3;
}

message C2S_GetNewCorpChapterRank {
}

message S2C_GetNewCorpChapterRank {
  required uint32 ret = 1;
  repeated CorpChapterIdRank ranks= 2;
}
// 查看限时抽将现在处于哪个阵营抽取状态
message C2S_ThemeDropZY {
}

message S2C_ThemeDropZY {
	required uint32 ret					=	1;	// // 1.RET_OK   2.RET_IS_NOT_UP_TO_LEVEL
	optional uint32 zy_cycle			=	2;// 0~7 魏蜀吴群(各2天)
	optional uint32 star_value			=	3;	// 星运值
	optional uint32 left_consume_times	=	4;	// 剩余消费次数
	optional uint32 left_free_times		=	5;	// 剩余免费次数
}

// 占星
message C2S_ThemeDropAstrology {
	required uint32 type				=	1;	// 0:免费	1:一次  2:十次
	required uint32 zy_cycle			=	2;// 0~7 魏蜀吴群(各2天)
}

// 每次占星的结果
message AstrologyResult {
	required uint32 star_value			=	1;	// 星运值
	required uint32 knight_id			=	2;	// 抽中碎片对应的武将id
	required Award	award				=	3;
}

message S2C_ThemeDropAstrology {
	required uint32 ret					=	1;	// 背包不足?	等级不足?	此时阵营已变? 次数不足?
	optional uint32 left_consume_times	=	2;	// 剩余的总消费次数
	optional uint32 left_free_times		=	3;	// 剩余的总免费次数
	optional uint32 type				=	4;	// 刚才的占星类型
	optional uint32 sv_sum              =   5;  // 总星运值
	repeated AstrologyResult result		=	6;	// 抽取结果	// 每一个元素对应一次抽取结果
}

// 星运值满1000抽将
message C2S_ThemeDropExtract {
	required uint32 knight_id			=	1;	// 要抽取的武将
	required uint32 zy_cycle			=	2;// 0~7 魏蜀吴群(各2天)
}

message S2C_ThemeDropExtract {
	required uint32 ret					=	1;	// Ok?	Error?	该武将不在该阵营? 星运值不足? 背包不足?
	required uint32 star_value			=	2;  // 星运值
	optional uint32 kid					=	3;	// 新获得的武将信息
}

message SpeXialRankInfo {
  required uint32 user_id = 1;
  required uint32 rank = 2;
  required uint32 score = 3;
  required string name = 4;
  required uint32 base_id = 5;
}

message C2S_GetSpeXialScoreInfo {
}

message S2C_GetSpeXialScoreInfo {
  required uint32 ret = 1;
  optional uint32 score = 2;
  repeated uint32 awards = 3;
}

message C2S_GetSpeXialScoreRank {
}

message S2C_GetSpeXialScoreRank {
  required uint32 ret = 1;
  repeated SpeXialRankInfo rank_list = 2;
  optional uint32 my_rank = 3;
}

message C2S_GetSpeXialScoreAward {
  required uint32 award_id = 1;
}

message S2C_GetSpeXialScoreAward {
  required uint32 ret = 1;
  optional uint32 award_id = 2;
}

message C2S_WushBossInfo {
}
message S2C_WushBossInfo {
  required uint32 active_id = 1;     //无双激活关卡id
  required uint32 first_id = 2;     //首次攻打关卡id
  required uint32 times = 3;     //今日已攻打次数
  required uint32 buy_times = 4;     //今日已购买攻打次数
}

message C2S_WushBossChallenge {
  required uint32 id = 1;     //要挑战的关卡
}
message S2C_WushBossChallenge {
  required uint32 ret = 1;
  optional BattleReport battle_report = 2;
  repeated Award award = 3;
  required uint32 id = 4;
}

message C2S_WushBossBuy {
}
message S2C_WushBossBuy {
  required uint32 ret = 1;
}

message GroupBuyTime {
	required string name = 1;					//活动名字
	required string content = 2;				//活动描述					
	required uint32 start_time = 3;
	required uint32 end_time = 4;
	required uint32 award_end_time = 5;
	required uint32 vip_level = 6;
	required uint32 level = 7;
}

message GroupBuyItem {
	required uint32 id = 1;
	required uint32 type = 2;
	required uint32 value = 3;
	required uint32 size = 4;					//每次购买物品数量
	required uint32 initial_price = 5;			//初始价格
	required uint32 initial_off = 6;			//初始折扣
	required uint32 coupon_use_percent = 7;		//最大可用团购券比例
	required uint32 buyer_num_1 = 8;			//购买人数1
	required uint32 off_price_1 = 9;			//折扣1
	required uint32 buyer_num_2 = 10;
	required uint32 off_price_2 = 11;
	required uint32 buyer_num_3 = 12;
	required uint32 off_price_3 = 13;
	required uint32 buyer_num_4 = 14;
	required uint32 off_price_4 = 15;
	required uint32 buy_max_day = 16;			//玩家每日最大购买次数
	required uint32 coupon_give_percent = 17;		//团购券返还比率
	required uint32 level = 18;					//限制等级
	required uint32 vip_level = 19;				//限制vip
}

message GroupBuyItemData {
	required uint32 id = 1;						//id 对应配置表第一个字段
	required uint32 server_count = 2;			//服务器总购买次数
	required uint32 self_count = 3;				//玩家自己的购买次数
}

message C2S_GetGroupBuyConfig {
	required string md5 = 1;
}

message S2C_GetGroupBuyConfig {
	required uint32 ret = 1;
	required string md5 = 2;						
//	required GroupBuyTime time_cfg = 3;			//活动时间和限制信息配置
	repeated GroupBuyItem items = 3;			//活动商品配置
}

message C2S_GetGroupBuyMainInfo {

}

message S2C_GetGroupBuyMainInfo {
	required uint32 ret = 1;
	required uint32 score = 2;					//积分
	repeated GroupBuyItemData item_datas = 3;	//商品信息 通过Id 唯一标识
}

message C2S_GetGroupBuyRanking {
	required uint32 type = 1;					//1 表示普通排行榜 2 表示豪华排行榜
	required uint32 max_rank_id = 2;			//最大排名，每次返回10个排名信息，比如前十就填10， 11-20就填20	
}

message S2C_GetGroupBuyRanking {
	required uint32 ret = 1;
	required uint32 type = 2;					//1 表示普通排行榜 2 表示豪华排行榜
	required uint32 self_rank_id = 3;			//玩家自己的排名
	required uint32 handred_score = 4;			//第100名的积分
	repeated CrossUser gb_user = 5;				//sp1->排名 sp2->积分
}

message C2S_GetGroupBuyTaskAwardInfo {
	
}

message S2C_GetGroupBuyTaskAwardInfo {
	required uint32 ret = 1;
	required uint32 self_score = 2;				//当前积分
	required uint32 server_score = 3;			//当前全服购买次数
	required uint32 back_gold = 4;				//返还元宝
	repeated uint32 award_ids = 5;				//已领取奖励id  对应配置表id
}

message C2S_GetGroupBuyTaskAward {
	required uint32 id = 1;						//对应配置表第一个字段
}

message S2C_GetGroupBuyTaskAward {
	required uint32 ret = 1;
	repeated Award awards = 2;
	repeated uint32 award_ids = 3;				//已领取奖励id  对应配置表id
}

message C2S_GetGroupBuyEndInfo {

}

message S2C_GetGroupBuyEndInfo {
	required uint32 ret = 1;
	required uint32 self_rank_id = 2;
	required uint32 self_score = 3;
	required uint32 is_acquired = 4;			//是否领取过排名奖励 0为未领取 1为已领取
	repeated CrossUser gb_user = 5;				//sp1->排名 sp2->积分
}

message C2S_GetGroupBuyRankAward {
}

message S2C_GetGroupBuyRankAward {
	required uint32 ret = 1;
	required uint32 is_acquired = 2;			//是否领取
	repeated Award awards = 3;
}

message C2S_GroupBuyPurchaseGoods {
	required uint32 id = 1;						//对应配置表第一个字段
}

message S2C_GroupBuyPurchaseGoods {
	required uint32 ret = 1;
	required uint32 id = 2;						//购买的物品id 对应配置表第一个字段
	required uint32 self_count = 3;				//玩家的购买次数
	required uint32 server_count = 4;			//服务器的已购买次数
	required uint32 score = 5;					//积分
}

message C2S_GetGroupBuyTimeInfo {
}

message S2C_GetGroupBuyTimeInfo {
	required uint32 ret = 1;
	required GroupBuyTime time_cfg = 2;
}

message C2S_RookieInfo {
}
message S2C_RookieInfo {
  required uint32 create_time = 1;  // 从开服到注册时间的秒数
  repeated uint32 award_id = 2;     // 已领取的id
  required bool active = 3;         // 活动是否开启
}

message C2S_GetRookieReward {
  required uint32 id = 1;
}
message S2C_GetRookieReward {
  required uint32 ret = 1;
  required uint32 id = 2;
}

message C2S_SetPictureFrame {
  required uint32 fid = 1;			// 请求切换的头像框ID
}

message S2C_SetPictureFrame {
  required uint32 ret = 1;
  optional uint32 fid = 2;			// 设置成功后的头像框ID
}

message BattleFieldSample {
  required uint32 id = 1;
  required uint64 sid = 2;
  required uint32 user_id = 3;
  required uint32 fight_value = 4;
  optional uint32 hp_rate = 5;//0=>击破 100未攻打 中间数字攻击过
  optional string name = 6;
  optional uint32 level = 7;
}

message C2S_GetBattleFieldInfo {
  required uint32 bf_type = 1;
}

message S2C_GetBattleFieldInfo {
  required uint32 ret = 1;
  required uint32 bf_type = 2;
  optional uint32 bf_tag = 3;//战场关数 1--4
  repeated BattleFieldSample battle_field = 4;
  optional uint32 challenge_count = 5;//剩余挑战次数
  optional uint32 reset_cost = 6;//免费为0
  optional uint32 reset_count = 7;//剩余重置次数
  optional uint32 current_id = 8;//当前打的对象ID
  optional uint32 history_pet_point = 9;//历史最大兽魂
  optional uint32 current_pet_point = 10;//当前最大兽魂
}

message ChallengeKnightHp {
  required uint32 index = 1;
  required uint64 hp = 2;
  required uint64 max_hp = 3;
  required uint32 base_id = 4;
}

message C2S_BattleFieldDetail {
  required uint32 id = 1;//bf_id
}

message S2C_BattleFieldDetail {
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated ChallengeKnightHp knights = 5;//战宠后面加
  optional CrossUser user = 6;
  optional uint32 pet_point = 7;//胜利获得的资源
}

message C2S_ChallengeBattleField {
  required uint32 id = 1;
}

message S2C_ChallengeBattleField {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional BattleReport info = 3;
  optional uint32 pet_point = 4;
  optional uint32 challenge_count = 5;
  optional BattleFieldSample sample = 6;//被打的这个关卡
  repeated Award awards = 7;//奖励
}

message C2S_BattleFieldAwardInfo {

}

message S2C_BattleFieldAwardInfo {
  required uint32 ret = 1;
  optional uint32 drop_id = 2;//是drop id//如果全部开完这个值为0
  optional uint32 drop_cost = 3;//每次开箱子花费 0免费
  optional uint32 drop_time = 4;//开的次数
}

message C2S_GetBattleFieldAward {

}

message S2C_GetBattleFieldAward{
  required uint32 ret = 1;
  repeated Award awards = 2;
  optional uint32 drop_id = 3;//是drop id//如果全部开完这个值为0
  optional uint32 drop_cost = 4;//每次开箱子花费 0免费
  optional uint32 drop_time = 5;//开的次数
}

message C2S_BattleFieldShopInfo {
}

message S2C_BattleFieldShopInfo {
  required uint32 refresh_count = 1; // 已刷新次数
  required uint32 free_refresh_count = 2; // 免费刷新次数
}


message C2S_BattleFieldShopRefresh {
  required uint32 type = 1; // 0 刷新令 1 金币
}

message S2C_BattleFieldShopRefresh {
  required uint32 ret = 1;
  repeated uint32 id = 2;
  optional uint32 refresh_count = 3;
  optional uint32 free_refresh_count = 4;
}

message C2S_GetBattleFieldRank {

}

message S2C_GetBattleFieldRank {
  required uint32 ret = 1;
  repeated CrossUser users = 2;//sp1->pet_point
}

message C2S_PetUpLvl {
    required uint32 pet_id = 1;
    repeated Item consume_items = 2;
}

message S2C_PetUpLvl {
    required uint32 ret = 1;
    optional uint32 pet_id = 2;
    optional uint32 pet_exp = 3;
    optional uint32 pet_lvl = 4;
}

message C2S_PetUpStar {
    required uint32 pet_id = 1;
}
message S2C_PetUpStar {
    required uint32 ret = 1;
    optional uint32 pet_id = 2;
    optional uint32 pet_star = 3;
}
message C2S_PetUpAddition {
    required uint32  pet_id = 1;
    repeated Item consume_item = 2;
}
message S2C_PetUpAddition {
    required uint32 ret = 1;
    optional uint32 pet_id = 2;
    optional uint32 pet_addition_exp = 3;
    optional uint32 pet_addition_lvl = 4;
}
message C2S_ChangeFightPet {
	required uint32 pet_id = 1;	//0：表示卸下 其他：表示上阵或者替换
}

message S2C_ChangeFightPet {
	required uint32 ret = 1;
	optional uint32 pet_id = 2;
	optional uint32 old_pet_id = 3;
}

message C2S_RecyclePet {
  repeated uint32 pet_id = 1;
  optional uint32 type = 2;  // 0:分解 1:重生 2:分解预览 3:重生预览
}

message S2C_RecyclePet {
  required uint32 ret = 1;
  repeated Award item = 2;  // 返还道具
  optional uint32 money = 3;  // 银两
  optional uint32 type = 4;  // 0:回收 1:重生
  optional uint32 fight_score = 5;	//征战积分
}

// 查询宠物护佑
message C2S_GetPetProtect {
}
message S2C_GetPetProtect {
  repeated uint32 pet_id = 1;  // 6个位置的宠物id
}

// 设置宠物护佑
message C2S_SetPetProtect {
  required uint32 pos = 1; // 位置
  required uint32 pet_id = 2;  // 宠物id
}
message S2C_SetPetProtect {
  required uint32 ret = 1;
  required uint32 pos = 2; // 位置
  required uint32 pet_id = 3;  // 宠物id
}

message C2S_DungeonDailyInfo {
}

message S2C_DungeonDailyInfo {
	repeated uint32 dids = 1;
}

message C2S_DungeonDailyChallenge {
	required uint32 did = 1;
	required uint32 hard_level = 2;
}

message S2C_DungeonDailyChallenge {
	required uint32 ret = 1;
	repeated uint32 dids = 2;
	optional BattleReport info = 3;
	repeated Award drop_awards = 4;
}

// 八卦信息
message TrigramInfo {
  repeated Award awards = 1;  // 8个奖励
  repeated uint32 award_level = 2;  // 8个奖励对应等级
  repeated uint32 open = 3;  // 8个位置开启状态，数字对应awards数组位置1~8，0代表未开启
}

// 查询活动
message C2S_TrigramInfo {
}
message S2C_TrigramInfo {
  required uint32 score = 1; //  积分
  required bool got_reward = 2; // 是否已领取排行榜奖励
  required TrigramInfo info = 3;  // 当前八卦信息
  required uint32 count = 4;  // 今日已抽次数
  required uint32 start = 5;
  required uint32 end = 6;
  required uint32 present = 7;
}

// 抽奖
message C2S_TrigramPlay {
  required uint32 pos = 1; // 位置
}
message S2C_TrigramPlay {
  required uint32 ret = 1;
  optional uint32 pos = 2; // 位置
  optional uint32 open_id = 3;     // 对应awards 1~8
  optional TrigramInfo new_trigram_info = 4;
  optional uint32 score = 5;
}
message C2S_TrigramPlayAll {
}
message S2C_TrigramPlayAll {
  required uint32 ret = 1;
  optional TrigramInfo new_trigram_info = 2;     // 刷新后
  optional uint32 score = 3;
}

// 刷新
message C2S_TrigramRefresh {
}
message S2C_TrigramRefresh {
  required uint32 ret = 1;
  optional TrigramInfo new_trigram_info = 2;     // 刷新后
}


// 领取排名奖励
message C2S_TrigramReward {
}

message S2C_TrigramReward {
required uint32 ret = 1;
repeated Award awards = 2;
}

message Ranking {
  required string name = 1;
  required uint32 score = 2;
  required uint32 mainrole = 3; // 主角base_id
  optional uint32 dress_id = 4;
}

// 获取排行榜
message C2S_GetTrigramRank {
}
message S2C_GetTrigramRank {
  repeated CrossUser ranking = 1;
  required uint32 ret = 2;
}

message C2S_UpStarEquipment {
    required uint32 cost_type = 1;  //1银两 2元宝 6碎片
    required uint32 equip_id = 2;   //是index id
}
message S2C_UpStarEquipment {
    required uint32 ret = 1;
    optional uint32 equip_id = 2;
    optional uint32 star = 3;   //装备目前星级数
    optional uint32 exp = 4;    //装备的星级经验
    optional uint32 luck_value = 5;
    optional uint32 crit = 6;   //暴击倍率
}

message C2S_FragmentSale {
	repeated uint32 frgids = 1;	// 各种碎片id 不包含宝物的
}

message S2C_FragmentSale {
	required uint32 ret	= 1;
}


//跨服夺帅功能协议
message CrossPvpInfo {
	required uint32 stage = 1;//初中高
	required uint32 level_min = 2;
	required uint32 level_max = 3;
	required uint32 max = 4;//最大人数
	optional uint32 current = 5;//当前人数
}

message CrossPvpSchedule {
	repeated CrossPvpActivity activity = 1;
}

message CrossPvpActivity {
	required CrossPvpInfo info = 1;
	repeated CrossPvpDetail details = 2;
}

 message CrossPvpDetail {
	required uint32 round = 1;//1报名 2海选 3依次
	required bool has_bet = 2;//是否有赌注
	required uint32 start_time = 3;//总的开始时间
	required uint32 view_time = 4;//预览结束时间
	required uint32 pre_time = 5;//准备开始时间
	required uint32 battle_time = 6;//战斗开始时间
	required uint32 end_time = 7;//总的结束时间
}

message CrossPvpArena {
	required uint32 flag = 1;	//坑位
	optional uint64 sid = 2;    //sid
	optional uint32 uid = 3;	//uid
	optional string name = 4;	//名字
	optional uint32 time = 5;	//玩家进入坑位的时间
}

message CrossPvpObInfo {
	required uint32 stage = 1;//哪个场次
	required uint32 round = 2;//哪轮 海选 OR 1024...
	required uint32 room_id = 3;//房间IDe
}

message C2S_GetCrossPvpSchedule {
}

message S2C_GetCrossPvpSchedule {
	required uint32 ret = 1;
	optional CrossPvpSchedule schedule = 2;
}

message C2S_GetCrossPvpBaseInfo {
}

message S2C_GetCrossPvpBaseInfo {
	required uint32 ret = 1;
	optional uint32 has_apply = 2;//是否报名
	optional uint32 stage = 3;//报名的哪个 初级中级高级
    optional uint32 state = 4;//状态 1报名 2报名完毕 3战斗准备 4战斗 5等待（可以投注）
    optional uint32 round = 5;//哪一轮 海选啥的
    optional uint32 time = 6;//拉取信息的时间点
	optional uint32 current_attack_buff = 9;
	optional uint32 current_defend_buff = 10;
}

message C2S_GetCrossPvpScheduleInfo {
}

message S2C_GetCrossPvpScheduleInfo {
    required uint32 ret = 1;
	repeated CrossPvpInfo info = 2;
}

message C2S_ApplyCrossPvp {
	required uint32 stage = 1; //战场的类型 1:低级 2:中级 3:高级 4:至尊
}

message S2C_ApplyCrossPvp {
	required uint32 ret = 1;
	required uint32 stage = 2;
	optional uint32 num = 3;
}

message C2S_GetAtcAndDefCrossPvp {
}

message S2C_GetAtcAndDefCrossPvp {
	required uint32 ret = 1;
	optional uint32 current_attack_buff = 2; //当前伤害加深
	optional uint32 current_defend_buff = 3; //当前伤害减免
}

message C2S_ApplyAtcAndDefCrossPvp {
	required uint32 apply_type = 1;//1 2 根据策划配置
	optional uint32 count = 2;//预留字段 默认每次就+1
}

message S2C_ApplyAtcAndDefCrossPvp{
	required uint32 ret = 1;
	required uint32 apply_type = 2;//1 2 根据策划配置
	optional uint32 count = 3;//预留字段 默认每次就+1
	optional uint32 current = 4;//返回当前鼓舞次数
}

message C2S_GetCrossPvpRole {
}

message S2C_GetCrossPvpRole {
	required uint32 ret = 1;
	optional uint32 round = 2;//哪轮 海选 OR 1024...
	optional uint32 stage = 3;//哪个赛场
	optional uint32 room = 4;//房间ID
	optional uint32 score = 5;
}

message C2S_CrossWaitInit {
}

message S2C_CrossWaitInit {
	required uint32 ret = 1;
	optional uint32 stage = 2;			//战场
	optional uint32 rank = 3;			//排名
	optional uint32 score = 4;			//积分
	optional uint32 battle_count = 5;	//战斗次数
	optional uint32 win_count = 6;		//胜利次数
	optional bool has_award = 7;		//是否领取过晋级奖励
	optional CrossUser flower_award = 8;//是否领取过投注奖励
	optional CrossUser egg_award = 9;	//有就代表有奖励
	optional uint32 room_rank = 10;		//room stage rank 客户端通过这三个可以获取到奖励
}

message C2S_CrossWaitInitFlowerInfo {
}

message S2C_CrossWaitInitFlowerInfo {
	required uint32 ret = 1;
	repeated CrossUser ranks = 2;			//4个战场鲜花冠军
	optional uint32 flower_get = 3;			//得到的鲜花数量
	optional uint32 egg_get = 4;			//得到的鸡蛋数量
	optional CrossUser flower_receiver = 5;	//送花对象
	optional CrossUser egg_receiver = 6;	//送蛋对象
}

message C2S_CrossWaitRank {
	required uint32 stage = 1;
	required uint32 start = 2;//起始排名
	required uint32 finish = 3;//终止排名
}

message S2C_CrossWaitRank {
	required uint32 ret = 1;
	optional uint32 stage = 3;
	optional uint32 start = 4;
	optional uint32 finish = 5;
	repeated CrossUser ranks = 6;
}

message C2S_CrossWaitFlower {
  required uint64 sid = 1;//对方sid
  required uint32 role_id = 2;//对方uid
  required uint32 stage = 3;//对方所在赛场
  required uint32 type = 4;//鲜花还是鸡蛋
  required uint32 count = 5;//鲜花/鸡蛋的数量
}

message S2C_CrossWaitFlower {
  required uint32 ret = 1;
  optional uint64 sid = 2;
  optional uint32 role_id = 3;
  optional uint32 stage = 4;
  optional uint32 type = 5;
  optional uint32 count = 6;
}

message C2S_CrossWaitFlowerRank {
	required uint32 type = 1;// 1代表鲜花 2代表砸蛋
	required uint32 start = 2;
	required uint32 finish = 3;
}

message S2C_CrossWaitFlowerRank {
	required uint32 ret = 1;
	required uint32 type = 2;// 1代表鲜花 2代表砸蛋
	required uint32 start = 3;
	required uint32 finish = 4;
	repeated CrossUser ranks = 6;
	optional uint32 self_rank = 7;
}

message C2S_CrossWaitFlowerAward {
	required uint32 type = 1;
}

message S2C_CrossWaitFlowerAward {
	required uint32 ret = 1;
	required uint32 type = 2;
	repeated Award awards = 3;
}

message C2S_GetCrossPvpArena {
	required uint32 stage = 1;//战场
	required uint32 room = 2; //战场房间号
}

message S2C_GetCrossPvpArena {
	required uint32 ret = 1;
	repeated uint32 flags = 2;	//房间内的坑位号（全局唯一）
}


message S2C_FlushCrossPvpArena {
	required uint32 stage = 1;	//战场
	required uint32 room = 2;	//房间
	required CrossUser arena = 3;	//坑位信息
	optional uint32 type = 4;//坑位变化情况 1代表坑位时间到了自动下坑 2代表被人击败
}

message S2C_FlushCrossPvpSpecific {
	required uint32 stage = 1;	//战场
	required uint32 room = 2;	//房间
	required uint32 type = 3;//坑位变化情况 1代表坑位时间到了自动下坑 2代表被人击败
	optional CrossUser arena = 4;	//当前坑位信息
}

message C2S_GetCrossPvpRank {
	required uint32 stage = 1;//战场
	required uint32 room = 2; //战场房间号
}

message S2C_GetCrossPvpRank {
	required uint32 ret = 1;
	repeated CrossUser ranks = 2;
}

message C2S_CrossPvpBattle {
	required uint32 stage = 1;//战场
	required uint32 room = 2; //房间号
	required uint32 flag = 3;//坑位
}

message S2C_CrossPvpBattle {
	required uint32 ret = 1;
	optional uint32 method = 2;//战斗结果类型 1代表击败别人 2代表占领了一个空的坑
	optional bool is_win = 3;
	optional uint32 score = 4;
	optional uint32 flag = 5;
	optional BattleReport report = 6; //战报
}

message S2C_FlushCrossPvpScore {
	optional uint32 score = 1;
	optional uint32 method = 2;//获取积分的方式 1日了别人 2守护据点
}

message C2S_GetCrossPvpDetail {
}

message S2C_GetCrossPvpDetail {
	required uint32 ret = 1;
	optional uint32 battle_count = 2; //战斗次数
	optional uint32 win_count = 3; //胜利次数
}

message C2S_CrossPvpGetAward {
}

message S2C_CrossPvpGetAward {
	required uint32 ret = 1;
	repeated Award awards = 2;
}
message C2S_ItemCompose {
    required uint32 index = 1;
}
message S2C_ItemCompose {
    required uint32 ret = 1;
    required uint32 index = 2; //客户端传过来的
    repeated Award item = 3;
}

message C2S_GetCrossPvpOb {
}

message S2C_GetCrossPvpOb {
	required uint32 ret = 1;
	required bool has_ob = 2;
	repeated CrossPvpObInfo rooms = 3;
}

message SpecialHolidayActivityInfo {
	required uint32 id = 1;
	required uint32 progress = 2;
	required uint32 award_count = 3;
	optional bool can_award = 4;
}

message C2S_GetSpecialHolidayActivity {
}

message S2C_GetSpecialHolidayActivity {
	required bool in_holiday = 1;
	required uint32 start_time = 2;
	required uint32 end_time = 3;
	repeated SpecialHolidayActivityInfo infos = 4;	
}

message S2C_UpdateSpecialHolidayActivity {
	required SpecialHolidayActivityInfo info = 1;	
}

message C2S_GetSpecialHolidayActivityReward {
	required uint32 id = 1;
}

message S2C_GetSpecialHolidayActivityReward {
	required uint32 ret = 1;
	required SpecialHolidayActivityInfo info = 2;
}

message C2S_GetSpecialHolidaySales {
}

message S2C_GetSpecialHolidaySales {
	repeated uint32 id = 1;
	repeated uint32 buyed_cnt = 2;
}

message C2S_BuySpecialHolidaySale {
	required uint32 id = 1;
	required uint32 cnt = 2;
}

message S2C_BuySpecialHolidaySale {
	required uint32 ret = 1;
	required uint32 id = 2;
	required uint32 buyed_cnt = 3;
}

message C2S_GetBulletScreenInfo {
  required uint32 id = 1;//info id
}

message S2C_GetBulletScreenInfo {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional uint32 last_send_time = 3;//这个ID类下面最后次弹幕发送CD时间
  optional uint32 min_index = 4;//根据bigtype不同 如果是聊天类的 这2个字段就没意义 如果是历史数据类的 就是起点和结束点//type = 2用
  optional uint32 max_index = 5;
}

//如果是聊天类的 S2C_SendBulletScreenInfo
//如果是普通的 后面设计
message C2S_SendBulletScreenInfo {
  required uint32 id = 1;
  required string content = 2;
  required uint32 bs_type = 3;
  optional uint32 sp1 = 4;//通用
}

message S2C_SendBulletScreenInfo {
  required uint32 ret = 1;
  optional BulletScreen bs = 2;
  optional uint32 last_send_time = 3;//这个ID类下面最后次弹幕发送CD时间
}

message BulletScreen {
  required uint32 id = 1;//id
  required string content = 2;//内容
  required uint32 bs_type = 3;//弹幕级别//1 2
  optional uint32 time = 4;//时间
  optional uint64 sid = 5;
  optional uint32 user_id = 6;
  optional uint32 sp1 = 7;//特殊字段 通用
}

message S2C_FlushBulletScreen {
  repeated BulletScreen bs = 1;
}

// 查询vip周商店
message C2S_VipWeekShopInfo {
}

message S2C_VipWeekShopInfo {
  repeated uint32 id = 1; // 已购买id
  repeated uint32 num = 2; // 已购买id对应次数
  required uint32 ret = 3; // OK
}

// 购买vip周商店
message C2S_VipWeekShopBuy {
  required uint32 id = 1;     // 配置表id*10+子id(1~4)
  required uint32 num = 2; // 购买次数
}

message S2C_VipWeekShopBuy {
  required uint32 ret = 1; // OK
}

message ExDuShopItem {
	required uint32 id = 1;			//商品id
	required uint32 num = 2;		//已购买次数
}

message ExDuChapter {
	required uint32 id = 1;
	required uint32 star = 2;
	required bool has_awarded = 3;		//是否领取章节奖励
	required bool has_entered = 4;		//是否第一次进入
	repeated ExDuStage stages = 5;		//关卡
	repeated ExDuShopItem items = 6;	//商品
}

message ExDuStage {
	required uint32 id = 1;
	required bool target1 = 2;			//目标1是否达成
	required bool target2 = 3;			//目标2是否达成
	required bool target3 = 4;			//目标3是否达成
	required uint32 max_uid = 5;		//最高战力uid
    required string max_name = 6;		//最高战力角色名
	required uint32 max_fv = 7;			//最高战力
	required uint32 min_uid = 8;		//最低战力uid
	required string min_name = 9;		//最低战力角色名
	required uint32 min_fv = 10;			//最低战力
}

message C2S_GetExpansiveDungeonChapterList {

}

message S2C_GetExpansiveDungeonChapterList {
	required uint32 ret = 1;
	repeated ExDuChapter chapters = 2;
}

message C2S_ExcuteExpansiveDungeonStage {
	required uint32 stage_id = 1;
}


message S2C_ExcuteExpansiveDungeonStage {
	required uint32 ret = 1;
	required uint32 chapter_id = 2;
	optional ExDuStage stage = 3;
	optional BattleReport report = 4;
	repeated Award awards = 5;
	optional uint32 stage_exp = 6;
}

message C2S_GetExpansiveDungeonChapterReward {
	required uint32 chapter_id = 1;
}

message S2C_GetExpansiveDungeonChapterReward {
	required uint32 ret = 1;
	required uint32 chapter_id = 2;
	repeated Award awards = 3;
}

message C2S_FirstEnterExpansiveDungeonChapter {
	required uint32 id = 1;
}

message S2C_FirstEnterExpansiveDungeonChapter {
	required uint32 ret = 1;	
	required uint32 id = 2;
	optional ExDuChapter chapter = 3;
}

message S2C_AddExpansiveDungeonNewStage {
	required uint32 chapter_id = 1;
	required ExDuStage stage = 2;
}

message C2S_PurchaseExpansiveDungeonShopItem {
	required uint32 id = 1;
	required uint32 count = 2;
}

message S2C_PurchaseExpansiveDungeonShopItem {
	required uint32 ret = 1;
	required uint32 id = 2;
	required uint32 count = 3;
	repeated Award awards = 4;
}

message C2S_TeamPVPStatus {
}

message S2C_TeamPVPStatus {
	required uint32 ret = 1; // OK，跨服异常
	required uint32 status = 2; // 0: 不在队伍，1: 在自动匹配队伍，2：在队伍，3：组队完毕，在匹配其他队伍
    	required uint64 team_id = 3;
	repeated CrossUser team_members = 4; // sp2 表示机器人 sp3 表示所在位置，从0开始 // sp4 表示军团id，// sp5 表示 是否同意出战 // sp6表示称号 // sp7表示是否与队长好友 // sp8 表示剩余奖励次数 // npc的id是所拉 user_id | (rand(127) << 24)
	required uint32 leader_pos = 5;
	required bool only_invited = 6;
	optional uint32 online_buff = 7;
	optional uint32 corp_buff = 8;
	optional uint32 friend_buff = 9;
	optional bool kicked = 10;
}

message C2S_TeamPVPCreateTeam {
}

message S2C_TeamPVPCreateTeam {
	required uint32 ret = 1;
}

message C2S_TeamPVPJoinTeam {
}

message S2C_TeamPVPJoinTeam {
	required uint32 ret = 1;
}

message C2S_TeamPVPLeave {
}

message S2C_TeamPVPLeave {
	required uint32 ret = 1;
}

message C2S_TeamPVPChangePosition {
	required uint32 pos1 = 1;
	required uint32 pos2 = 2;
}

message S2C_TeamPVPChangePosition {
	required uint32 ret = 1;
}

message C2S_TeamPVPKickTeamMember {
	required uint64 kicked_sid = 1;
	required uint32 kicked_user_id = 2;
}

message S2C_TeamPVPKickTeamMember {
	required uint32 ret = 1;
}

message C2S_TeamPVPSetTeamOnlyInvited {
	required bool only_invited = 1;
}

message S2C_TeamPVPSetTeamOnlyInvited {
	required uint32 ret = 1;
}

message C2S_TeamPVPInvite {
	required uint32 invited_user_id = 1;
	required uint64 team_id = 2;
}

message S2C_TeamPVPInvite {
	required uint32 ret = 1;
}

message S2C_TeamPVPBeInvited {
	required uint32 invitor_user_id = 1;
	required uint64 invitor_team_id = 2;
}

message C2S_TeamPVPInvitedJoinTeam {
        required uint32 invitor_user_id = 1;
        required uint64 invitor_team_id = 2;
}

message S2C_TeamPVPInvitedJoinTeam {
	required uint32 ret = 1;
}

message S2C_TeamPVPInviteCanceled {
	required uint64 team_id = 1;
	required uint32 invitor_user_id = 2;
}

message C2S_TeamPVPInviteNPC {

}

message S2C_TeamPVPInviteNPC {
	required uint32 ret = 1;
}

message C2S_TeamPVPAgreeBattle {
	required bool agree = 1;
}

message S2C_TeamPVPAgreeBattle {
        required uint32 ret = 1;
}

message C2S_TeamPVPMatchOtherTeam {

}

message S2C_TeamPVPMatchOtherTeam {
	required uint32 ret = 1;
}

message C2S_TeamPVPStopMatch {

}

message S2C_TeamPVPStopMatch {
        required uint32 ret = 1;
}
//此协议会序列化后存入数据库
message TeamPVPSingleBattleReport {
  required uint32 team1_pos = 1;
  required uint32 team2_pos = 2;
  required bool team1_fight_first = 3;
  required BattleBriefReport report = 4;
  required bool continue_win3 = 5;
  required uint32 continue_win = 6;
}
//此协议会序列化后存入数据库
message TeamPVPBattleReport {
  required uint64 battle_id = 1;
  required uint64 team1_id = 2;
  required uint32 team1_leader_pos = 3;
  repeated CrossUser team1_members = 4;
  required uint64 team2_id = 5;
  required uint32 team2_leader_pos = 6;
  repeated CrossUser team2_members = 7;
  required bool team1_win = 8;
  repeated TeamPVPSingleBattleReport reports = 9;
  required uint32 team1_award_buff = 10;
  required uint32 team2_award_buff = 11;
}

message S2C_TeamPVPBattleResult {
  required TeamPVPBattleReport report = 1;
  required uint32 score = 2;
  required uint32 honor = 3;
  required bool double_award = 4;
}

message C2S_TeamPVPBattleTeamChange {
}

message S2C_TeamPVPBattleTeamChange {
  required uint32 ret = 1;
}

message S2C_TeamPVPCrossServerLost {

}

message C2S_TeamPVPHistoryBattleReport {
}

message S2C_TeamPVPHistoryBattleReport {
  required TeamPVPBattleReport report = 1;
}

message S2C_TeamPVPHistoryBattleReportEnd {
}

message C2S_TeamPVPGetRank {
}

message S2C_TeamPVPGetRank {
  required uint32 ret = 1;
  repeated CrossUser user = 2;
  repeated uint32 honor = 3;
}

message C2S_TeamPVPGetUserInfo {
}

message S2C_TeamPVPGetUserInfo {
  required uint32 ret = 1;
  optional uint32 honor = 2;
  optional uint32 score = 3;
  optional uint32 award_cnt = 4; //已经奖励次数
  optional uint32 buyed_award_cnt = 5; //已经购买次数
  optional uint32 npc_cd = 6; //上一次找npc时间
  optional uint32 rank = 7;
  optional uint32 title = 8;
  optional bool accept_invite = 9;
  optional bool pop_chat = 10;
}

message C2S_TeamPVPBuyAwardCnt {
}

message S2C_TeamPVPBuyAwardCnt {
  required uint32 ret = 1;
}

message C2S_TeamPVPAcceptInvite {
  required bool accept = 1;
}

message S2C_TeamPVPAcceptInvite {
  required uint32 ret = 1;
}

message C2S_GetAccountBindingInfo {
}

message S2C_GetAccountBindingInfo {
  required uint32 ret = 1;
  repeated uint32 awards = 2;
}

message C2S_GetAccountBindingAward {
  required uint32 id = 1;
}

message S2C_GetAccountBindingAward {
  required uint32 ret = 1;
  optional uint32 id = 2;
}

message C2S_TeamPVPPopChat {
  required bool pop_chat = 1;
}

message S2C_TeamPVPPopChat {
  required uint32 ret = 1;
}

message C2S_GetShopTag {

}
message S2C_GetShopTag {
    required uint32 ret = 1;
    repeated uint32 ids = 2;
}
message C2S_AddShopTag {
    required uint32 id = 1;
}
message S2C_AddShopTag {
    required uint32 ret = 1;
    repeated uint32 ids = 2;
}
message C2S_DelShopTag {
    required uint32 id =1;
}
message S2C_DelShopTag {
    required uint32 ret = 1;
    repeated uint32 ids = 2;
}
message C2S_FastRefineEquipment {
    required uint32 eid = 1;
    repeated Item consume_item = 2;
}
message S2C_FastRefineEquipment {
    required uint32 ret =1;
    required uint32 eid = 2;
}

message C2S_GetOlderPlayerInfo {
}

message S2C_GetOlderPlayerInfo {
  required uint32 ret = 1;
  optional bool is_older = 2;
  optional uint32 activity_id = 3;
  optional uint32 activity_start = 4;
  optional uint32 activity_end = 5;
  optional uint32 limit_time = 6; //活动描述中的时间限制
  optional bool vip = 7; //true: 领取过VIP; false: 相反
  repeated uint32 awards = 8; //领取过的等级奖励ID
  optional uint32 limit_level = 9;//活动描述中的等级限制
}

message C2S_GetOlderPlayerVipAward {
}

message S2C_GetOlderPlayerVipAward {
  required uint32 ret = 1;
}

message C2S_GetOlderPlayerLevelAward {
  required uint32 id = 1;
}

message S2C_GetOlderPlayerLevelAward {
  required uint32 ret = 1;
  required uint32 id = 2;
}

message C2S_GetOlderPlayerVipExp {
}

message S2C_GetOlderPlayerVipExp {
  required uint32 ret = 1;
  optional uint32 exp = 2;
}
message C2S_ChangeName {
    required string new_name = 1;
}
message S2C_ChangeName {
    required uint32 ret = 1;
    optional string new_name = 2;
}

// 查询活动
message C2S_RCardInfo {
}

message S2C_RCardInfo {
  required uint32 score = 1; // 可用积分
  required uint32 score_total = 2; //  总积分
  required uint32 start = 3;
  required uint32 end = 4;
  required uint32 reset1 = 5; // 今日已重置普通牌次数
  repeated uint32 ids1 = 6; // 已抽取普通牌id
  required uint32 reset2 = 7; // 今日已重置豪华牌次数
  repeated uint32 ids2 = 8; // 已抽取豪华牌id
  repeated uint32 pos1 = 9; // 位置们
  repeated uint32 pos2 = 10; // 位置们
  required uint32 play1 = 11; // 今日已翻普通牌次数
  required uint32 play2 = 12; // 今日已翻豪华牌次数
}

// 抽奖
message C2S_PlayRCard {
  required uint32 id = 1; // 1普通 2豪华
  required uint32 pos = 2; // 0~7
}

message S2C_PlayRCard {
  required uint32 ret = 1;
  required uint32 id = 2;
  optional uint32 cid = 3;
  required uint32 pos = 4; // 0~7
}

// 刷新
message C2S_ResetRCard {
  required uint32 id = 1; // 1普通 2豪华
}

message S2C_ResetRCard {
  required uint32 ret = 1;
  required uint32 id = 2; // 1普通 2豪华
}

message C2S_SetClothSwitch {
  required bool isOpen = 1; //false:关闭  true:打开
}

message S2C_SetClothSwitch {
  required bool isOpen = 1; //false:关闭 true:打开
}

message C2S_GetDays7CompInfo {
}

message Days7CompInfo {
	required uint32 id = 1;
	required string name = 2;
	required uint32 rank = 3;
	required uint32 flag = 4;
}
message S2C_GetDays7CompInfo {
  required uint32 ret = 1;
  optional Days7CompInfo me = 2;
  repeated Days7CompInfo infos  = 3;
  required uint32 oszt = 4; //开服零点时间
}

message C2S_GetDays7CompAward {
}

message S2C_GetDays7CompAward {
	required uint32 ret = 1;
	repeated Award awards = 2;
}

message Ksoul {
  required uint32 id = 1;
  required uint32 num = 2;
}

message C2S_GetKsoul {
}

message S2C_GetKsoul {
  repeated Ksoul ksouls = 1;//将灵
  repeated uint32 ksoul_groups = 2;//已激活的阵图
  repeated uint32 ksoul_targets = 3;//阵图成就
  optional uint32 free_summon = 4;//免费点将次数
  //optional uint32 summon_score = 5;//点将点数
  optional uint32 summon_count = 6;//轮回内已经点将的次数
  repeated Ksoul summon_exchange = 7;//今日奇遇兑换的信息
  optional uint32 dungeon_challenge_cnt = 8;
  optional uint32 dungeon_refresh_cnt = 9;
}

message C2S_RecycleKsoul {
  repeated Ksoul ksoul = 1;
}

message S2C_RecycleKsoul {
  required uint32 ret = 1;
  optional uint32 ksoul_point = 4;
}

message OpKsoul {
  repeated Ksoul insert_ksouls = 1; //添加
  repeated Ksoul update_ksouls = 2; //更新
  repeated uint32 delete_ksouls = 3; //删除
}

message C2S_ActiveKsoulGroup {
  required uint32 id = 1;
}

message S2C_ActiveKsoulGroup {
  required uint32 ret = 1;
  required uint32 id = 2;
}

message C2S_ActiveKsoulTarget {
  required uint32 id = 1;
}

message S2C_ActiveKsoulTarget{
  required uint32 ret = 1;
  required uint32 id = 2;
}

message C2S_SummonKsoul {
  required uint32 s_type = 1;//1免费 2单抽 3五连
}

message S2C_SummonKsoul {
  required uint32 ret = 1;
  required uint32 s_type = 2;
  repeated Award awards = 3;
  repeated Award scores = 4;
  optional uint32 free_summon = 5;//免费点将次数
  optional uint32 summon_score = 6;//点将点数
  optional uint32 summon_count = 7;//轮回内已经点将的次数
}

message C2S_SummonKsoulExchange{
  required uint32 id = 1;
}

message S2C_SummonKsoulExchange{
  required uint32 ret = 1;
  required uint32 id = 2;
  repeated Ksoul summon_exchange = 3;//今日奇遇兑换的信息
  optional uint32 summon_score = 4; 
  repeated Award award = 5;
}

message C2S_GetCommonRank {
  required uint32 r_id = 1;//1代表KSOUL
  required uint32 r_type = 2;//1本服 2跨服
}

message S2C_GetCommonRank {
  required uint32 ret = 1;
  required uint32 r_id = 2;
  required uint32 r_type =3;
  repeated CrossUser rank = 4;
  optional uint32 self_rank = 5;
}

message C2S_KsoulShopInfo {
}

message S2C_KsoulShopInfo {
  repeated uint32 id = 1;
  repeated uint32 num = 2;
  required uint32 refresh_cnt = 3;
  required uint32 next_refresh_time = 4;
}

message C2S_KsoulShopBuy {
  required uint32 id = 1;
}

message S2C_KsoulShopBuy {
  required uint32 ret = 1;
  required uint32 id = 2;
  required uint32 index = 3;
}

message C2S_KsoulShopRefresh {
}

message S2C_KsoulShopRefresh {
  required uint32 ret = 1;
}

message C2S_KsoulDungeonInfo {
}
message S2C_KsoulDungeonInfo {
  required uint32 id = 1;
  required uint32 refresh_cnt = 2;
  required uint32 challenge_cnt = 3;
}

message C2S_KsoulDungeonRefresh {
}
message S2C_KsoulDungeonRefresh {
  required uint32 ret = 1;
}

message C2S_KsoulDungeonChallenge {
}
message S2C_KsoulDungeonChallenge {
  required uint32 ret = 1;
  optional BattleReport report = 2;
  repeated Award awards = 3;
}

message C2S_ShareFriendAwardInfo {
}

message ShareFriendAwardInfo {
    required uint32 id = 1; 
    required uint32 last_award_time = 2; //默认为0
}

message S2C_ShareFriendAwardInfo {
	required uint32	ret = 1;
	repeated ShareFriendAwardInfo datas = 2;
}

message C2S_ShareFriendGetAward {
	required uint32 id = 1;
}

message S2C_ShareFriendGetAward {
	required uint32 ret = 1;
	optional ShareFriendAwardInfo datas = 2;
}

message C2S_KsoulSetFightBase {
  required uint32 id = 1;
}

message S2C_KsoulSetFightBase {
  required uint32 ret = 1;
  required uint32 id = 2;
}

message FortuneBuySilverInfo {
	required uint32 time = 1;
	required uint32 silver = 2;
	required uint32 multi = 3;
	required uint32 gold = 4;
}

message C2S_FortuneInfo {
}

message S2C_FortuneInfo {
	required uint32 times = 1;	// 招财总次数
	repeated uint32 boxids = 2; // 已经领取的箱子id
	repeated FortuneBuySilverInfo buys = 3; //每次招财的信息
}

message C2S_FortuneBuySilver {
}

message S2C_FortuneBuySilver {
	required uint32 ret = 1;
	optional FortuneBuySilverInfo buy  = 2;
}

message C2S_FortuneGetBox {
	required uint32 id = 1;
}

message S2C_FortuneGetBox {
	required uint32 ret = 1;
	optional uint32 bid = 2;
	repeated Award awards = 3;
}

